{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.2", "generated_at": "2023-02-17T13:16:57.354105Z", "invocation_id": "562acd58-ad6d-43b5-b6bc-72d9cdd810e9", "env": {}, "project_id": "beb35b7502fa7bb8f1e3ee6da0945d34", "user_id": "3f963c27-9da7-4bb0-9bff-d4ea4b991d88", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.harmony.sushi__ez_sushi_swaps": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.harmony.ethereum_db_sushi.FACT_HOURLY_TOKEN_PRICES", "source.harmony.symbols_cross_tab.MARKET_ASSET_METADATA", "model.harmony.silver__swaps", "model.harmony.silver__tokens", "model.harmony.silver__tokens"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "log_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "sushi", "fqn": ["harmony", "sushi", "sushi__ez_sushi_swaps"], "unique_id": "model.harmony.sushi__ez_sushi_swaps", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'log_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH swap_without_prices AS (\n\n    SELECT\n        se.block_timestamp,\n        se.block_id AS block_number,\n        se.tx_hash,\n        se.pool_address,\n        CASE\n            WHEN se.amount0In <> 0\n            AND se.amount1In <> 0 THEN amount1In / power(\n                10,\n                token1.decimals\n            ) :: FLOAT\n            WHEN se.amount0In <> 0 THEN se.amount0In / power(\n                10,\n                token0.decimals\n            ) :: FLOAT\n            WHEN se.amount1In <> 0 THEN se.amount1In / power(\n                10,\n                token1.decimals\n            ) :: FLOAT\n        END AS amount_in,\n        CASE\n            WHEN se.amount0Out <> 0 THEN se.amount0Out / power(\n                10,\n                token0.decimals\n            ) :: FLOAT\n            WHEN se.amount1Out <> 0 THEN se.amount1Out / power(\n                10,\n                token1.decimals\n            ) :: FLOAT\n        END AS amount_out,\n        se.from_address AS sender,\n        se.log_id,\n        se.event_index,\n        se.evm_origin_from_address,\n        se.evm_origin_to_address,\n        se.native_origin_from_address,\n        se.native_origin_to_address,\n        CASE\n            WHEN se.amount0In <> 0\n            AND se.amount1In <> 0 THEN token1_address\n            WHEN se.amount0In <> 0 THEN token0_address\n            WHEN se.amount1In <> 0 THEN token1_address\n        END AS token_In,\n        CASE\n            WHEN se.amount0Out <> 0 THEN token0_address\n            WHEN se.amount1Out <> 0 THEN token1_address\n        END AS token_out,\n        CASE\n            WHEN se.amount0In <> 0\n            AND se.amount1In <> 0 THEN token1_symbol\n            WHEN se.amount0In <> 0 THEN token0_symbol\n            WHEN se.amount1In <> 0 THEN token1_symbol\n        END AS symbol_In,\n        CASE\n            WHEN se.amount0Out <> 0 THEN token0_symbol\n            WHEN se.amount1Out <> 0 THEN token1_symbol\n        END AS symbol_out,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1.decimals\n            WHEN amount0In <> 0 THEN token0.decimals\n            WHEN amount1In <> 0 THEN token1.decimals\n        END AS decimals_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0.decimals\n            WHEN amount1Out <> 0 THEN token1.decimals\n        END AS decimals_out,\n        se.to_address :: STRING AS tx_to,\n        se._inserted_timestamp\n    FROM\n        {{ ref('silver__swaps') }}\n        se\n        LEFT JOIN {{ ref('silver__tokens') }}\n        token0\n        ON se.token0_address = token0.token_address\n        LEFT JOIN {{ ref('silver__tokens') }}\n        token1\n        ON se.token1_address = token1.token_address\n\n{% if is_incremental() %}\nWHERE\n    block_timestamp >= (\n        SELECT\n            MAX(block_timestamp) :: DATE - 2\n        FROM\n            {{ this }}\n    )\n{% endif %}\n),\neth_prices AS (\n    SELECT\n        token_address,\n        HOUR,\n        symbol,\n        AVG(price) AS price\n    FROM\n        {{ source(\n            'ethereum_db_sushi',\n            'FACT_HOURLY_TOKEN_PRICES'\n        ) }}\n\n{% if is_incremental() %}\nWHERE\n    HOUR :: DATE IN (\n        SELECT\n            DISTINCT block_timestamp :: DATE\n        FROM\n            swap_without_prices\n    )\n{% else %}\nWHERE\n    HOUR :: DATE >= '2020-05-05'\n{% endif %}\nGROUP BY\n    token_address,\n    HOUR,\n    symbol\n),\nharmony_eth_crosstab AS (\n    SELECT\n        NAME,\n        symbol,\n        MAX (\n            CASE\n                WHEN platform_id = 'harmony-shard-0' THEN token_address\n                ELSE ''\n            END\n        ) AS harmony_address,\n        MAX (\n            CASE\n                WHEN platform = 'ethereum' THEN token_address\n                ELSE ''\n            END\n        ) AS eth_address\n    FROM\n        {{ source(\n            'symbols_cross_tab',\n            'MARKET_ASSET_METADATA'\n        ) }}\n    GROUP BY\n        NAME,\n        symbol\n    HAVING\n        harmony_address <> ''\n        AND eth_address <> ''\n    ORDER BY\n        NAME,\n        symbol\n),\nharmony_prices AS (\n    SELECT\n        ep.token_address,\n        ep.hour,\n        ep.symbol,\n        ep.price,\n        hec.harmony_Address AS harmony_address\n    FROM\n        eth_prices ep\n        LEFT JOIN harmony_eth_crosstab hec\n        ON ep.token_address = hec.eth_Address\n)\nSELECT\n    wp.block_timestamp,\n    wp.block_number,\n    wp.tx_hash,\n    wp.pool_address,\n    'sushiswap' AS platform,\n    wp.event_index,\n    wp.evm_origin_from_address,\n    wp.evm_origin_to_address,\n    wp.native_origin_from_address,\n    wp.native_origin_to_address,\n    wp.amount_in,\n    wp.amount_out,\n    wp.sender,\n    wp.log_id,\n    wp.token_In,\n    wp.token_out,\n    wp.symbol_In,\n    wp.symbol_out,\n    wp.tx_to,\n    CASE\n        WHEN wp.decimals_in IS NOT NULL\n        AND wp.amount_in * pIn.price <= 5 * wp.amount_out * pOut.price\n        AND wp.amount_out * pOut.price <= 5 * wp.amount_in * pIn.price THEN wp.amount_in * pIn.price\n        WHEN wp.decimals_in IS NOT NULL\n        AND wp.decimals_out IS NULL THEN wp.amount_in * pIn.price\n        ELSE NULL\n    END AS amount_in_usd,\n    CASE\n        WHEN wp.decimals_out IS NOT NULL\n        AND wp.amount_in * pIn.price <= 5 * wp.amount_out * pOut.price\n        AND wp.amount_out * pOut.price <= 5 * wp.amount_in * pIn.price THEN wp.amount_out * pOut.price\n        WHEN wp.decimals_out IS NOT NULL\n        AND wp.decimals_in IS NULL THEN wp.amount_out * pOut.price\n        ELSE NULL\n    END AS amount_out_usd,\n    wp._inserted_timestamp\nFROM\n    swap_without_prices wp\n    LEFT JOIN harmony_prices pIn\n    ON LOWER(token_In) = LOWER(\n        pIn.harmony_address\n    )\n    AND DATE_TRUNC(\n        'hour',\n        wp.block_timestamp\n    ) = pIn.hour\n    LEFT JOIN harmony_prices pOut\n    ON LOWER(token_out) = LOWER(\n        pOut.harmony_address\n    )\n    AND DATE_TRUNC(\n        'hour',\n        wp.block_timestamp\n    ) = pOut.hour\nWHERE\n    pool_address IN (\n        SELECT\n            token_address\n        FROM\n            mdao_harmony.prod.tokens\n        WHERE\n            token_name = 'SushiSwap LP Token'\n    )", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "sushi/sushi__ez_sushi_swaps.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.sql", "name": "sushi__ez_sushi_swaps", "alias": "ez_sushi_swaps", "checksum": {"name": "sha256", "checksum": "5217219e0bd3c599f5a11d025cf5c90aa7cd8a9400bf4e32ce38d5128c96c022"}, "tags": [], "refs": [["silver__swaps"], ["silver__tokens"], ["silver__tokens"]], "sources": [["ethereum_db_sushi", "FACT_HOURLY_TOKEN_PRICES"], ["symbols_cross_tab", "MARKET_ASSET_METADATA"]], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN": {"name": "AMOUNT_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT": {"name": "AMOUNT_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN_USD": {"name": "AMOUNT_IN_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT_USD": {"name": "AMOUNT_OUT_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_IN": {"name": "TOKEN_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_OUT": {"name": "TOKEN_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_IN": {"name": "SYMBOL_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_OUT": {"name": "SYMBOL_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TO": {"name": "TX_TO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOG_ID": {"name": "LOG_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVM_ORIGIN_FROM_ADDRESS": {"name": "EVM_ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVM_ORIGIN_TO_ADDRESS": {"name": "EVM_ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/sushi/sushi__ez_sushi_swaps.yml", "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "materialized": "incremental", "unique_key": "log_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1676639820.423851, "compiled_code": "\n\nWITH swap_without_prices AS (\n\n    SELECT\n        se.block_timestamp,\n        se.block_id AS block_number,\n        se.tx_hash,\n        se.pool_address,\n        CASE\n            WHEN se.amount0In <> 0\n            AND se.amount1In <> 0 THEN amount1In / power(\n                10,\n                token1.decimals\n            ) :: FLOAT\n            WHEN se.amount0In <> 0 THEN se.amount0In / power(\n                10,\n                token0.decimals\n            ) :: FLOAT\n            WHEN se.amount1In <> 0 THEN se.amount1In / power(\n                10,\n                token1.decimals\n            ) :: FLOAT\n        END AS amount_in,\n        CASE\n            WHEN se.amount0Out <> 0 THEN se.amount0Out / power(\n                10,\n                token0.decimals\n            ) :: FLOAT\n            WHEN se.amount1Out <> 0 THEN se.amount1Out / power(\n                10,\n                token1.decimals\n            ) :: FLOAT\n        END AS amount_out,\n        se.from_address AS sender,\n        se.log_id,\n        se.event_index,\n        se.evm_origin_from_address,\n        se.evm_origin_to_address,\n        se.native_origin_from_address,\n        se.native_origin_to_address,\n        CASE\n            WHEN se.amount0In <> 0\n            AND se.amount1In <> 0 THEN token1_address\n            WHEN se.amount0In <> 0 THEN token0_address\n            WHEN se.amount1In <> 0 THEN token1_address\n        END AS token_In,\n        CASE\n            WHEN se.amount0Out <> 0 THEN token0_address\n            WHEN se.amount1Out <> 0 THEN token1_address\n        END AS token_out,\n        CASE\n            WHEN se.amount0In <> 0\n            AND se.amount1In <> 0 THEN token1_symbol\n            WHEN se.amount0In <> 0 THEN token0_symbol\n            WHEN se.amount1In <> 0 THEN token1_symbol\n        END AS symbol_In,\n        CASE\n            WHEN se.amount0Out <> 0 THEN token0_symbol\n            WHEN se.amount1Out <> 0 THEN token1_symbol\n        END AS symbol_out,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1.decimals\n            WHEN amount0In <> 0 THEN token0.decimals\n            WHEN amount1In <> 0 THEN token1.decimals\n        END AS decimals_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0.decimals\n            WHEN amount1Out <> 0 THEN token1.decimals\n        END AS decimals_out,\n        se.to_address :: STRING AS tx_to,\n        se._inserted_timestamp\n    FROM\n        HARMONY.silver.swaps\n        se\n        LEFT JOIN HARMONY.silver.tokens\n        token0\n        ON se.token0_address = token0.token_address\n        LEFT JOIN HARMONY.silver.tokens\n        token1\n        ON se.token1_address = token1.token_address\n\n\nWHERE\n    block_timestamp >= (\n        SELECT\n            MAX(block_timestamp) :: DATE - 2\n        FROM\n            HARMONY.sushi.ez_sushi_swaps\n    )\n\n),\neth_prices AS (\n    SELECT\n        token_address,\n        HOUR,\n        symbol,\n        AVG(price) AS price\n    FROM\n        ethereum.CORE.FACT_HOURLY_TOKEN_PRICES\n\n\nWHERE\n    HOUR :: DATE IN (\n        SELECT\n            DISTINCT block_timestamp :: DATE\n        FROM\n            swap_without_prices\n    )\n\nGROUP BY\n    token_address,\n    HOUR,\n    symbol\n),\nharmony_eth_crosstab AS (\n    SELECT\n        NAME,\n        symbol,\n        MAX (\n            CASE\n                WHEN platform_id = 'harmony-shard-0' THEN token_address\n                ELSE ''\n            END\n        ) AS harmony_address,\n        MAX (\n            CASE\n                WHEN platform = 'ethereum' THEN token_address\n                ELSE ''\n            END\n        ) AS eth_address\n    FROM\n        FLIPSIDE_PROD_DB.SILVER.MARKET_ASSET_METADATA\n    GROUP BY\n        NAME,\n        symbol\n    HAVING\n        harmony_address <> ''\n        AND eth_address <> ''\n    ORDER BY\n        NAME,\n        symbol\n),\nharmony_prices AS (\n    SELECT\n        ep.token_address,\n        ep.hour,\n        ep.symbol,\n        ep.price,\n        hec.harmony_Address AS harmony_address\n    FROM\n        eth_prices ep\n        LEFT JOIN harmony_eth_crosstab hec\n        ON ep.token_address = hec.eth_Address\n)\nSELECT\n    wp.block_timestamp,\n    wp.block_number,\n    wp.tx_hash,\n    wp.pool_address,\n    'sushiswap' AS platform,\n    wp.event_index,\n    wp.evm_origin_from_address,\n    wp.evm_origin_to_address,\n    wp.native_origin_from_address,\n    wp.native_origin_to_address,\n    wp.amount_in,\n    wp.amount_out,\n    wp.sender,\n    wp.log_id,\n    wp.token_In,\n    wp.token_out,\n    wp.symbol_In,\n    wp.symbol_out,\n    wp.tx_to,\n    CASE\n        WHEN wp.decimals_in IS NOT NULL\n        AND wp.amount_in * pIn.price <= 5 * wp.amount_out * pOut.price\n        AND wp.amount_out * pOut.price <= 5 * wp.amount_in * pIn.price THEN wp.amount_in * pIn.price\n        WHEN wp.decimals_in IS NOT NULL\n        AND wp.decimals_out IS NULL THEN wp.amount_in * pIn.price\n        ELSE NULL\n    END AS amount_in_usd,\n    CASE\n        WHEN wp.decimals_out IS NOT NULL\n        AND wp.amount_in * pIn.price <= 5 * wp.amount_out * pOut.price\n        AND wp.amount_out * pOut.price <= 5 * wp.amount_in * pIn.price THEN wp.amount_out * pOut.price\n        WHEN wp.decimals_out IS NOT NULL\n        AND wp.decimals_in IS NULL THEN wp.amount_out * pOut.price\n        ELSE NULL\n    END AS amount_out_usd,\n    wp._inserted_timestamp\nFROM\n    swap_without_prices wp\n    LEFT JOIN harmony_prices pIn\n    ON LOWER(token_In) = LOWER(\n        pIn.harmony_address\n    )\n    AND DATE_TRUNC(\n        'hour',\n        wp.block_timestamp\n    ) = pIn.hour\n    LEFT JOIN harmony_prices pOut\n    ON LOWER(token_out) = LOWER(\n        pOut.harmony_address\n    )\n    AND DATE_TRUNC(\n        'hour',\n        wp.block_timestamp\n    ) = pOut.hour\nWHERE\n    pool_address IN (\n        SELECT\n            token_address\n        FROM\n            mdao_harmony.prod.tokens\n        WHERE\n            token_name = 'SushiSwap LP Token'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.sushi.ez_sushi_swaps"}, "model.harmony.silver__tokenprices": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_last_x_days", "macro.harmony.create_js_hex_to_int"], "nodes": ["model.harmony.silver__tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "defi", "tokenprice"], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "key", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "cluster_by": ["block_date", "token_address"], "post-hook": [], "pre-hook": [{"sql": "{{ create_js_hex_to_int() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "silver", "silver__tokenprices"], "unique_id": "model.harmony.silver__tokenprices", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"key\",\n  incremental_strategy = 'delete+insert',\n  tags = ['core', 'defi', 'tokenprice'],\n  cluster_by = ['block_date', 'token_address']\n) }}\n\nSELECT\n  key,\n  block_date,\n  token_address,\n  token_symbol,\n  usd_price,\n  usd_volume,\n  token_volume\nFROM\n  {{ ref('silver__tokenprice_from_swaps') }}\nWHERE\n  {{ incremental_last_x_days(\n    \"block_date\",\n    3\n  ) }}\n  AND usd_volume >= 100", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "silver/silver__tokenprices.sql", "original_file_path": "models/silver/silver__tokenprices.sql", "name": "silver__tokenprices", "alias": "tokenprices", "checksum": {"name": "sha256", "checksum": "71cc2fbb99032fe0954c2688529e0f716b42f458ff298a6831a54b515b774118"}, "tags": ["core", "defi", "tokenprice"], "refs": [["silver__tokenprice_from_swaps"]], "sources": [], "metrics": [], "description": "Volume-weighted average daily prices based on swap data, assuming curated stables = 1 USD, and preferring the most liquid pair.  Token prices will show up if they have at least USD100 of daily volume.", "columns": {"key": {"name": "key", "description": "The unique key for the block_date and token_address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_date": {"name": "block_date", "description": "The date of the token price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_address": {"name": "token_address", "description": "Address of the Token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_symbol": {"name": "token_symbol", "description": "HRC token symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_price": {"name": "usd_price", "description": "Volume-weighted average price calculated on the `block_date`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_volume": {"name": "usd_volume", "description": "The USD-equivalent amount swapped on the `block_date` based on curated liquidity pool list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_volume": {"name": "token_volume", "description": "The amount of tokens swapped on this date based on the curated liquidity pool list.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/silver/silver__tokenprices.yml", "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprices.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "pre-hook": "{{ create_js_hex_to_int() }}", "materialized": "incremental", "unique_key": "key", "incremental_strategy": "delete+insert", "tags": ["core", "defi", "tokenprice"], "cluster_by": ["block_date", "token_address"]}, "created_at": 1676639820.9845157, "compiled_code": "\n\nSELECT\n  key,\n  block_date,\n  token_address,\n  token_symbol,\n  usd_price,\n  usd_volume,\n  token_volume\nFROM\n  HARMONY.silver.tokenprice_from_swaps\nWHERE\n  \n        block_date >= current_date() - interval '3 day'\n    \n  AND usd_volume >= 100", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.tokenprices"}, "model.harmony.silver__logs": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_js_hex_to_int"], "nodes": ["model.harmony.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "log_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": [{"sql": "{{ create_js_hex_to_int() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "silver", "silver__logs"], "unique_id": "model.harmony.silver__logs", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'log_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH logs_raw AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id AS tx_hash,\n        tx :bech32_from :: STRING AS native_origin_from_address,\n        tx :bech32_to :: STRING AS native_origin_to_address,\n        tx :from :: STRING AS evm_origin_from_address,\n        tx :to :: STRING AS evm_origin_to_address,\n        tx :receipt :logs AS full_logs,\n        _inserted_timestamp\n    FROM\n        {{ ref(\"bronze__transactions\") }}\n    WHERE\n        {{ incremental_load_filter(\"_inserted_timestamp\") }}\n        qualify ROW_NUMBER() over (\n            PARTITION BY tx_id\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n),\nlogs AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_hash,\n        TO_NUMBER(\n            RIGHT(\n                VALUE :logIndex :: STRING,\n                LENGTH(\n                    VALUE :logIndex :: STRING\n                ) -2\n            ),\n            'xxxxx'\n        ) AS event_index,\n        evm_origin_from_address,\n        evm_origin_to_address,\n        native_origin_from_address,\n        native_origin_to_address,\n        VALUE :bech32_address :: STRING AS native_contract_address,\n        VALUE :address :: STRING AS evm_contract_address,\n        VALUE :decoded :contractName :: STRING AS contract_name,\n        VALUE :decoded :eventName :: STRING AS event_name,\n        VALUE :decoded :inputs AS event_inputs,\n        VALUE :topics AS topics,\n        VALUE :data :: STRING AS DATA,\n        VALUE :removed AS event_removed,\n        _inserted_timestamp\n    FROM\n        logs_raw,\n        LATERAL FLATTEN (\n            input => full_logs\n        )\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_hash,\n    event_index,\n    evm_origin_from_address,\n    evm_origin_to_address,\n    native_origin_from_address,\n    native_origin_to_address,\n    native_contract_address,\n    evm_contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    _inserted_timestamp,\n    concat_ws(\n        '-',\n        tx_hash,\n        event_index\n    ) AS log_id\nFROM\n    logs", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "silver/silver__logs.sql", "original_file_path": "models/silver/silver__logs.sql", "name": "silver__logs", "alias": "logs", "checksum": {"name": "sha256", "checksum": "008fe9d3fe8db6b2d06f5fb159a718f6cfac232ce662706b3f91e643989051c9"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "Harmony Logs", "columns": {"log_id": {"name": "log_id", "description": "Log identifier composed of tx_hash-event_index", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The block number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp for when the block was collated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "Hash of the transaction (32 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_index": {"name": "event_index", "description": "Integer of of the log position in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "native_contract_address": {"name": "native_contract_address", "description": "Native Harmony address of the contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evm_contract_address": {"name": "evm_contract_address", "description": "EVM address of the contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_name": {"name": "contract_name", "description": "Name of the contract called.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "Name of the event executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_inputs": {"name": "event_inputs", "description": "Parameter inputs for the event called.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "topics": {"name": "topics", "description": "Array of 0 to 4 32 Bytes data of indexed log arguments.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data": {"name": "data", "description": "Contains the non-indexed arguments of the log.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_removed": {"name": "event_removed", "description": "True when the log was removed, due to a chain reorganization. false if its a valid log.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/silver/silver__logs.yml", "compiled_path": "target/compiled/harmony/models/silver/silver__logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "pre-hook": "{{ create_js_hex_to_int() }}", "materialized": "incremental", "unique_key": "log_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1676639820.7666233, "compiled_code": "\n\nWITH logs_raw AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id AS tx_hash,\n        tx :bech32_from :: STRING AS native_origin_from_address,\n        tx :bech32_to :: STRING AS native_origin_to_address,\n        tx :from :: STRING AS evm_origin_from_address,\n        tx :to :: STRING AS evm_origin_to_address,\n        tx :receipt :logs AS full_logs,\n        _inserted_timestamp\n    FROM\n        HARMONY.bronze.transactions\n    WHERE\n        -- dbt makes it easy to query your target table by using the \"HARMONY.silver.logs\" variable.\n    \n      _inserted_timestamp > (select max(_inserted_timestamp) from HARMONY.silver.logs)\n        qualify ROW_NUMBER() over (\n            PARTITION BY tx_id\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n),\nlogs AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_hash,\n        TO_NUMBER(\n            RIGHT(\n                VALUE :logIndex :: STRING,\n                LENGTH(\n                    VALUE :logIndex :: STRING\n                ) -2\n            ),\n            'xxxxx'\n        ) AS event_index,\n        evm_origin_from_address,\n        evm_origin_to_address,\n        native_origin_from_address,\n        native_origin_to_address,\n        VALUE :bech32_address :: STRING AS native_contract_address,\n        VALUE :address :: STRING AS evm_contract_address,\n        VALUE :decoded :contractName :: STRING AS contract_name,\n        VALUE :decoded :eventName :: STRING AS event_name,\n        VALUE :decoded :inputs AS event_inputs,\n        VALUE :topics AS topics,\n        VALUE :data :: STRING AS DATA,\n        VALUE :removed AS event_removed,\n        _inserted_timestamp\n    FROM\n        logs_raw,\n        LATERAL FLATTEN (\n            input => full_logs\n        )\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_hash,\n    event_index,\n    evm_origin_from_address,\n    evm_origin_to_address,\n    native_origin_from_address,\n    native_origin_to_address,\n    native_contract_address,\n    evm_contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    _inserted_timestamp,\n    concat_ws(\n        '-',\n        tx_hash,\n        event_index\n    ) AS log_id\nFROM\n    logs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.logs"}, "model.harmony.silver__tokens": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.create_js_hex_to_int"], "nodes": ["seed.harmony.silver__dfk_tokens", "seed.harmony.silver__harmony_explorer_tokens", "seed.harmony.silver__backfill_tokens_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "token_address", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "post-hook": [], "pre-hook": [{"sql": "{{ create_js_hex_to_int() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "silver", "silver__tokens"], "unique_id": "model.harmony.silver__tokens", "raw_code": "{{ config(\n    materialized = 'table',\n    unique_key = 'token_address'\n) }}\n\nWITH dfk_tokens AS (\n\n    SELECT\n        token_address,\n        token_name,\n        token_symbol,\n        decimals\n    FROM\n        {{ ref('silver__dfk_tokens') }}\n),\nharmony_explorer_tokens AS (\n    SELECT\n        token_address,\n        token_name,\n        token_symbol,\n        decimals\n    FROM\n        {{ ref('silver__harmony_explorer_tokens') }}\n),\nbackfill_tokens AS (\n    SELECT\n        token_address,\n        token_name,\n        token_symbol,\n        decimals\n    FROM\n        {{ ref('silver__backfill_tokens_data') }}\n    WHERE\n        token_address NOT IN (\n            SELECT\n                token_address\n            FROM\n                harmony_explorer_tokens\n        )\n)\nSELECT\n    token_address,\n    token_name,\n    token_symbol,\n    decimals\nFROM\n    dfk_tokens\nWHERE\n    token_address NOT IN (\n        SELECT\n            token_address\n        FROM\n            harmony_explorer_tokens\n    )\nUNION\nSELECT\n    token_address,\n    token_name,\n    token_symbol,\n    decimals\nFROM\n    harmony_explorer_tokens\nUNION\nSELECT\n    token_address,\n    token_name,\n    token_symbol,\n    decimals\nFROM\n    backfill_tokens", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "silver/silver__tokens.sql", "original_file_path": "models/silver/silver__tokens.sql", "name": "silver__tokens", "alias": "tokens", "checksum": {"name": "sha256", "checksum": "bcfbcf89fadeb99dc653f3f730a2a3865575eeca2a6bb26b67f0bfd5c2055860"}, "tags": [], "refs": [["silver__dfk_tokens"], ["silver__harmony_explorer_tokens"], ["silver__backfill_tokens_data"]], "sources": [], "metrics": [], "description": "Harmony Tokens", "columns": {"token_address": {"name": "token_address", "description": "The token's `contract_address`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_name": {"name": "token_name", "description": "The token's name as read from the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_symbol": {"name": "token_symbol", "description": "The token's symbol (e.g WONE) as read from the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "decimals": {"name": "decimals", "description": "The token's decimals as read from the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/silver/silver__tokens.yml", "compiled_path": "target/compiled/harmony/models/silver/silver__tokens.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "pre-hook": "{{ create_js_hex_to_int() }}", "materialized": "table", "unique_key": "token_address"}, "created_at": 1676639820.6365426, "compiled_code": "\n\nWITH dfk_tokens AS (\n\n    SELECT\n        token_address,\n        token_name,\n        token_symbol,\n        decimals\n    FROM\n        HARMONY.silver.dfk_tokens\n),\nharmony_explorer_tokens AS (\n    SELECT\n        token_address,\n        token_name,\n        token_symbol,\n        decimals\n    FROM\n        HARMONY.silver.harmony_explorer_tokens\n),\nbackfill_tokens AS (\n    SELECT\n        token_address,\n        token_name,\n        token_symbol,\n        decimals\n    FROM\n        HARMONY.silver.backfill_tokens_data\n    WHERE\n        token_address NOT IN (\n            SELECT\n                token_address\n            FROM\n                harmony_explorer_tokens\n        )\n)\nSELECT\n    token_address,\n    token_name,\n    token_symbol,\n    decimals\nFROM\n    dfk_tokens\nWHERE\n    token_address NOT IN (\n        SELECT\n            token_address\n        FROM\n            harmony_explorer_tokens\n    )\nUNION\nSELECT\n    token_address,\n    token_name,\n    token_symbol,\n    decimals\nFROM\n    harmony_explorer_tokens\nUNION\nSELECT\n    token_address,\n    token_name,\n    token_symbol,\n    decimals\nFROM\n    backfill_tokens", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.tokens"}, "model.harmony.silver__swaps": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_js_hex_to_int"], "nodes": ["model.harmony.silver__logs", "model.harmony.silver__liquidity_pools", "model.harmony.silver__tokens", "model.harmony.silver__tokens"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "log_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": [{"sql": "{{ create_js_hex_to_int() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "silver", "silver__swaps"], "unique_id": "model.harmony.silver__swaps", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'log_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH logs AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_hash,\n        event_index,\n        evm_origin_from_address,\n        evm_origin_to_address,\n        native_origin_from_address,\n        native_origin_to_address,\n        native_contract_address,\n        evm_contract_address,\n        contract_name,\n        event_name,\n        event_inputs,\n        topics,\n        DATA,\n        event_removed,\n        _inserted_timestamp,\n        log_id\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        {{ incremental_load_filter(\"_inserted_timestamp\") }}\n)\nSELECT\n    l.block_timestamp,\n    l.block_id,\n    l.log_id,\n    l.tx_hash,\n    l.evm_contract_address AS pool_address,\n    l.event_index,\n    l.evm_origin_from_address,\n    l.evm_origin_to_address,\n    l.native_origin_from_address,\n    l.native_origin_to_address,\n    p.token0 AS token0_address,\n    t0.token_name AS token0_name,\n    t0.token_symbol AS token0_symbol,\n    TRY_TO_NUMBER(\n        l.event_inputs :amount0In :: STRING\n    ) AS amount0In,\n    TRY_TO_NUMBER(\n        l.event_inputs :amount1In :: STRING\n    ) AS amount1In,\n    TRY_TO_NUMBER(\n        l.event_inputs :amount0Out :: STRING\n    ) AS amount0Out,\n    TRY_TO_NUMBER(\n        l.event_inputs :amount1Out :: STRING\n    ) AS amount1Out,\n    p.token1 AS token1_address,\n    t1.token_name AS token1_name,\n    t1.token_symbol AS token1_symbol,\n    l.event_inputs :sender :: STRING AS from_address,\n    l.event_inputs :to AS to_address,\n    l._inserted_timestamp\nFROM\n    logs AS l\n    JOIN {{ ref('silver__liquidity_pools') }} AS p\n    ON p.pool_address = l.evm_contract_address\n    LEFT JOIN {{ ref('silver__tokens') }} AS t0\n    ON t0.token_address = p.token0\n    LEFT JOIN {{ ref('silver__tokens') }} AS t1\n    ON t1.token_address = p.token1\nWHERE\n    l.event_name = 'Swap'", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "silver/silver__swaps.sql", "original_file_path": "models/silver/silver__swaps.sql", "name": "silver__swaps", "alias": "swaps", "checksum": {"name": "sha256", "checksum": "26d72b35e7c4a9219a70809f118f25d8e883f8ab640911c51d34675c781f6fa8"}, "tags": [], "refs": [["silver__logs"], ["silver__liquidity_pools"], ["silver__tokens"], ["silver__tokens"]], "sources": [], "metrics": [], "description": "Harmony Swaps", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "When the trade was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "log_id": {"name": "log_id", "description": "The unique id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "The transaction hash.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_address": {"name": "pool_address", "description": "The pool address that the swap was conducted in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0_address": {"name": "token0_address", "description": "The `token0` address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0_name": {"name": "token0_name", "description": "The `token0` name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0_symbol": {"name": "token0_symbol", "description": "The `token0` symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount0In": {"name": "amount0In", "description": "The amount of `token0` that went into the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount0Out": {"name": "amount0Out", "description": "The amount of `token0` that came out from the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1_address": {"name": "token1_address", "description": "The `token1` address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1_name": {"name": "token1_name", "description": "The `token1` name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1_symbol": {"name": "token1_symbol", "description": "The `token1` symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount1In": {"name": "amount1In", "description": "The amount of `token1` that went into the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount1Out": {"name": "amount1Out", "description": "The amount of `token` that came out from the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_address": {"name": "from_address", "description": "The address that triggered the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_address": {"name": "to_address", "description": "The address that the out tokens go to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/silver/silver__swaps.yml", "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "pre-hook": "{{ create_js_hex_to_int() }}", "materialized": "incremental", "unique_key": "log_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1676639820.6796846, "compiled_code": "\n\nWITH logs AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_hash,\n        event_index,\n        evm_origin_from_address,\n        evm_origin_to_address,\n        native_origin_from_address,\n        native_origin_to_address,\n        native_contract_address,\n        evm_contract_address,\n        contract_name,\n        event_name,\n        event_inputs,\n        topics,\n        DATA,\n        event_removed,\n        _inserted_timestamp,\n        log_id\n    FROM\n        HARMONY.silver.logs\n    WHERE\n        -- dbt makes it easy to query your target table by using the \"HARMONY.silver.swaps\" variable.\n    \n      _inserted_timestamp > (select max(_inserted_timestamp) from HARMONY.silver.swaps)\n)\nSELECT\n    l.block_timestamp,\n    l.block_id,\n    l.log_id,\n    l.tx_hash,\n    l.evm_contract_address AS pool_address,\n    l.event_index,\n    l.evm_origin_from_address,\n    l.evm_origin_to_address,\n    l.native_origin_from_address,\n    l.native_origin_to_address,\n    p.token0 AS token0_address,\n    t0.token_name AS token0_name,\n    t0.token_symbol AS token0_symbol,\n    TRY_TO_NUMBER(\n        l.event_inputs :amount0In :: STRING\n    ) AS amount0In,\n    TRY_TO_NUMBER(\n        l.event_inputs :amount1In :: STRING\n    ) AS amount1In,\n    TRY_TO_NUMBER(\n        l.event_inputs :amount0Out :: STRING\n    ) AS amount0Out,\n    TRY_TO_NUMBER(\n        l.event_inputs :amount1Out :: STRING\n    ) AS amount1Out,\n    p.token1 AS token1_address,\n    t1.token_name AS token1_name,\n    t1.token_symbol AS token1_symbol,\n    l.event_inputs :sender :: STRING AS from_address,\n    l.event_inputs :to AS to_address,\n    l._inserted_timestamp\nFROM\n    logs AS l\n    JOIN HARMONY.silver.liquidity_pools AS p\n    ON p.pool_address = l.evm_contract_address\n    LEFT JOIN HARMONY.silver.tokens AS t0\n    ON t0.token_address = p.token0\n    LEFT JOIN HARMONY.silver.tokens AS t1\n    ON t1.token_address = p.token1\nWHERE\n    l.event_name = 'Swap'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.swaps"}, "model.harmony.silver__tokenprice_from_swaps": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_last_x_days", "macro.harmony.create_js_hex_to_int"], "nodes": ["seed.harmony.silver__harmony_stable_tokens", "model.harmony.silver__swaps", "model.harmony.silver__tokens", "model.harmony.silver__tokens"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "defi", "tokenprice"], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "key", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "cluster_by": ["block_date", "token_address"], "post-hook": [], "pre-hook": [{"sql": "{{ create_js_hex_to_int() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "silver", "silver__tokenprice_from_swaps"], "unique_id": "model.harmony.silver__tokenprice_from_swaps", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"key\",\n  incremental_strategy = 'delete+insert',\n  tags = ['core', 'defi', 'tokenprice'],\n  cluster_by = ['block_date', 'token_address']\n) }}\n\nWITH stables AS (\n\n  SELECT\n    token_address,\n    token_name,\n    token_symbol,\n    decimals\n  FROM\n    {{ ref('silver__harmony_stable_tokens') }}\n),\nswaps_ref AS (\n  SELECT\n    *\n  FROM\n    {{ ref('silver__swaps') }}\n  WHERE\n    {{ incremental_last_x_days(\n      \"block_timestamp\",\n      3\n    ) }}\n),\n-- trim the swaps table, truncate to day, and normalize the decimals, remove nulls with inner join\nsimpleswaps AS (\n  SELECT\n    DATE_TRUNC(\n      'day',\n      s.block_timestamp\n    ) AS block_date,\n    s.tx_hash,\n    s.pool_address,\n    s.token0_address,\n    s.token0_symbol,\n    s.token1_address,\n    s.token1_symbol,\n    (\n      s.amount0in + s.amount0out\n    ) / pow(\n      10,\n      t0.decimals\n    ) AS amt0,\n    (\n      s.amount1in + s.amount1out\n    ) / pow(\n      10,\n      t1.decimals\n    ) AS amt1\n  FROM\n    swaps_ref AS s\n    INNER JOIN {{ ref('silver__tokens') }} AS t0\n    ON t0.token_address = s.token0_address\n    INNER JOIN {{ ref('silver__tokens') }} AS t1\n    ON t1.token_address = s.token1_address\n),\n-- aggregate daily swap volumes between all pairs\nswaps_daily_agg AS (\n  SELECT\n    s.block_date,\n    s.pool_address,\n    s.token0_address,\n    s.token0_symbol,\n    s.token1_address,\n    s.token1_symbol,\n    SUM(\n      s.amt0\n    ) AS amt0,\n    SUM(\n      s.amt1\n    ) AS amt1\n  FROM\n    simpleswaps AS s\n  GROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6\n),\n-- union all 0->1 and 1->0 swaps into a tall table for simplified bi-directional lookups and volume ranking\nconsolidated_pairs AS (\n  SELECT\n    concat_ws(\n      '-',\n      block_date,\n      token_address\n    ) AS key,\n    block_date,\n    token_address,\n    token_symbol,\n    SUM(amt) AS amt,\n    pair_address,\n    pair_symbol,\n    SUM(pair_amt) AS pair_amt,\n    SUM(pair_amt) / SUM (amt) AS price,\n    ROW_NUMBER() over (\n      PARTITION BY block_date,\n      token_address\n      ORDER BY\n        SUM(amt) DESC\n    ) AS RANK -- can't use rank() because of ties for 1st\n  FROM\n    (\n      SELECT\n        block_date,\n        token0_address AS token_address,\n        token0_symbol AS token_symbol,\n        amt0 AS amt,\n        token1_address AS pair_address,\n        token1_symbol AS pair_symbol,\n        amt1 AS pair_amt\n      FROM\n        swaps_daily_agg\n      UNION ALL\n      SELECT\n        block_date,\n        token1_address AS token_address,\n        token1_symbol AS token_symbol,\n        amt1 AS amt,\n        token0_address AS pair_address,\n        token0_symbol AS pair_symbol,\n        amt0 AS pair_amt\n      FROM\n        swaps_daily_agg\n    )\n  GROUP BY\n    1,\n    2,\n    3,\n    4,\n    6,\n    7\n  ORDER BY\n    4,\n    2,\n    5 DESC\n),\nstart_stables AS (\n  SELECT\n    DISTINCT concat_ws(\n      '-',\n      C.block_date,\n      C.token_address\n    ) AS key,\n    C.block_date,\n    s.token_address,\n    s.token_symbol,\n    1 AS usd_price,\n    0 AS volume_for_price,\n    NULL AS price_pair_token,\n    NULL AS price_pair_symbol,\n    'stables' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN stables AS s\n    ON C.token_address = s.token_address\n),\n-- add WONE lookup\nwone_lookup AS (\n  SELECT\n    C.key,\n    C.block_date,\n    C.token_address,\n    C.token_symbol,\n    SUM(\n      C.pair_amt\n    ) / SUM(\n      C.amt\n    ) AS usd_price,\n    SUM(\n      C.amt\n    ) AS volume_for_price,\n    NULL AS price_pair_token,\n    NULL AS price_pair_symbol,\n    'wONE' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN start_stables AS s\n    ON C.pair_address = s.token_address\n  WHERE\n    C.token_address = '0xcf664087a5bb0237a0bad6742852ec6c8d69a27a' -- WONE\n  GROUP BY\n    1,\n    2,\n    3,\n    4,\n    7,\n    8\n  UNION ALL\n  SELECT\n    *\n  FROM\n    start_stables\n),\n-- add lookups1a table for next round of matches, where top pair matches the wone_lookup table (wone + stables) (exclude keys that already exist in wone_lookup_table)\nlookups1a AS (\n  SELECT\n    C.key,\n    C.block_date,\n    C.token_address,\n    C.token_symbol,\n    C.price * s.usd_price AS usd_price,\n    C.amt AS volume_for_price,\n    C.pair_address AS pair_token_for_price,\n    C.pair_symbol AS pair_symbol_for_price,\n    '1a' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN wone_lookup AS s\n    ON C.pair_address = s.token_address\n    AND C.block_date = s.block_date\n    AND C.rank = 1\n  WHERE\n    C.key NOT IN (\n      SELECT\n        key\n      FROM\n        wone_lookup\n    )\n  UNION ALL\n  SELECT\n    *\n  FROM\n    wone_lookup\n),\n-- add lookups1b table for next round of matches, where top pair matches the lookups1a table (exclude keys that already exist in lookups1a table)\nlookups1b AS (\n  SELECT\n    C.key,\n    C.block_date,\n    C.token_address,\n    C.token_symbol,\n    C.price * s.usd_price AS usd_price,\n    C.amt AS volume_for_price,\n    C.pair_address AS pair_token_for_price,\n    C.pair_symbol AS pair_symbol_for_price,\n    '1b' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN lookups1a AS s\n    ON C.pair_address = s.token_address\n    AND C.block_date = s.block_date\n    AND C.rank = 1\n  WHERE\n    C.key NOT IN (\n      SELECT\n        key\n      FROM\n        lookups1a\n    )\n  UNION ALL\n  SELECT\n    *\n  FROM\n    lookups1a\n),\n-- add lookups1c table for next round of matches, where top pair matches the lookups1b table (exclude keys that already exist in lookups1b table)\nlookups1c AS (\n  SELECT\n    C.key,\n    C.block_date,\n    C.token_address,\n    C.token_symbol,\n    C.price * s.usd_price AS usd_price,\n    C.amt AS volume_for_price,\n    C.pair_address AS pair_token_for_price,\n    C.pair_symbol AS pair_symbol_for_price,\n    '1c' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN lookups1b AS s\n    ON C.pair_address = s.token_address\n    AND C.block_date = s.block_date\n    AND C.rank = 1\n  WHERE\n    C.key NOT IN (\n      SELECT\n        key\n      FROM\n        lookups1b\n    )\n  UNION ALL\n  SELECT\n    *\n  FROM\n    lookups1b\n),\n-- add lookups2a table for next round of matches, where 2nd most common pair matches the lookups1c table (exclude keys that already exist in lookups1c table)\nlookups2a AS (\n  SELECT\n    C.key,\n    C.block_date,\n    C.token_address,\n    C.token_symbol,\n    C.price * s.usd_price AS usd_price,\n    C.amt AS volume_for_price,\n    C.pair_address AS pair_token_for_price,\n    C.pair_symbol AS pair_symbol_for_price,\n    '2a' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN lookups1c AS s\n    ON C.pair_address = s.token_address\n    AND C.block_date = s.block_date\n    AND C.rank = 2\n  WHERE\n    C.key NOT IN (\n      SELECT\n        key\n      FROM\n        lookups1c\n    )\n  UNION ALL\n  SELECT\n    *\n  FROM\n    lookups1c\n),\n-- add lookups2b table for next round of matches, where 2nd most common pair matches the lookups2a table (exclude keys that already exist in lookups2a table)\nlookups2b AS (\n  SELECT\n    C.key,\n    C.block_date,\n    C.token_address,\n    C.token_symbol,\n    C.price * s.usd_price AS usd_price,\n    C.amt AS volume_for_price,\n    C.pair_address AS pair_token_for_price,\n    C.pair_symbol AS pair_symbol_for_price,\n    '2b' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN lookups2a AS s\n    ON C.pair_address = s.token_address\n    AND C.block_date = s.block_date\n    AND C.rank = 1\n  WHERE\n    C.key NOT IN (\n      SELECT\n        key\n      FROM\n        lookups2a\n    )\n  UNION ALL\n  SELECT\n    *\n  FROM\n    lookups2a\n) -- IF needed, additional lookup rounds could be added, e.g.:\n-- TODO: add lookups2c table for next round of matches, where 2nd most common pair matches the lookups2b table (exclude keys that already exist in lookups2b table)\n-- TODO: add lookups3a table for next round of matches, where 3rd most common pair matches the lookups2c table (exclude keys that already exist in lookups2c table)\n-- TODO: add lookups3b table for next round of matches, where 3rd most common pair matches the lookups3a table (exclude keys that already exist in lookups3a table)\n-- TODO: add lookups3c table for next round of matches, where 3rd most common pair matches the lookups3b table (exclude keys that already exist in lookups3b table)\nSELECT\n  l.block_date,\n  l.token_address,\n  l.token_symbol,\n  l.usd_price,\n  l.usd_price * SUM(\n    C.amt\n  ) AS usd_volume,\n  SUM(\n    C.amt\n  ) AS token_volume,\n  l.pair_token_for_price,\n  l.pair_symbol_for_price,\n  l.volume_for_price,\n  l.key,\n  l.lookup_round\nFROM\n  lookups2b AS l\n  LEFT JOIN consolidated_pairs AS C\n  ON l.key = C.key\nGROUP BY\n  l.block_date,\n  l.token_address,\n  l.token_symbol,\n  l.usd_price,\n  l.pair_token_for_price,\n  l.pair_symbol_for_price,\n  l.volume_for_price,\n  l.key,\n  l.lookup_round", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "silver/silver__tokenprice_from_swaps.sql", "original_file_path": "models/silver/silver__tokenprice_from_swaps.sql", "name": "silver__tokenprice_from_swaps", "alias": "tokenprice_from_swaps", "checksum": {"name": "sha256", "checksum": "59ecab534643280005a2f7767281c1013274c22939c27bb42e0e3c0f7e9249b1"}, "tags": ["core", "defi", "tokenprice"], "refs": [["silver__harmony_stable_tokens"], ["silver__swaps"], ["silver__tokens"], ["silver__tokens"]], "sources": [], "metrics": [], "description": "Volume-weighted average daily prices based on swap data, assuming curated stables = 1 USD, and preferring most liquid pair", "columns": {"block_date": {"name": "block_date", "description": "daily timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_address": {"name": "token_address", "description": "HRC token EVM address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_symbol": {"name": "token_symbol", "description": "HRC token symbol", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_price": {"name": "usd_price", "description": "Volume-weighted average price during the block_date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_volume": {"name": "usd_volume", "description": "The USD-equivalent amount swapped on this date based on curated liquidity pool list", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_volume": {"name": "token_volume", "description": "The amount of tokens swapped on this date based on curated liquidity pool list", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pair_token_for_price": {"name": "pair_token_for_price", "description": "The swap pair token used to lookup the usd price, usually the highest volume pair", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pair_symbol_for_price": {"name": "pair_symbol_for_price", "description": "The symbol for the swap pair token used to lookup the usd price, usually the highest volume pair", "meta": {}, "data_type": null, "quote": null, "tags": []}, "volume_for_price": {"name": "volume_for_price", "description": "The quantity of the token swapped with the pair that was used to lookup the usd_price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "key": {"name": "key", "description": "Admin field - Unique key - <block_date>-<token_address>", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lookup_round": {"name": "lookup_round", "description": "Admin field - the point in the price lookup loop that this price was matched", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/silver/silver__tokenprice_from_swaps.yml", "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprice_from_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "pre-hook": "{{ create_js_hex_to_int() }}", "materialized": "incremental", "unique_key": "key", "incremental_strategy": "delete+insert", "tags": ["core", "defi", "tokenprice"], "cluster_by": ["block_date", "token_address"]}, "created_at": 1676639820.6505783, "compiled_code": "\n\nWITH stables AS (\n\n  SELECT\n    token_address,\n    token_name,\n    token_symbol,\n    decimals\n  FROM\n    HARMONY.silver.harmony_stable_tokens\n),\nswaps_ref AS (\n  SELECT\n    *\n  FROM\n    HARMONY.silver.swaps\n  WHERE\n    \n        block_timestamp >= current_date() - interval '3 day'\n    \n),\n-- trim the swaps table, truncate to day, and normalize the decimals, remove nulls with inner join\nsimpleswaps AS (\n  SELECT\n    DATE_TRUNC(\n      'day',\n      s.block_timestamp\n    ) AS block_date,\n    s.tx_hash,\n    s.pool_address,\n    s.token0_address,\n    s.token0_symbol,\n    s.token1_address,\n    s.token1_symbol,\n    (\n      s.amount0in + s.amount0out\n    ) / pow(\n      10,\n      t0.decimals\n    ) AS amt0,\n    (\n      s.amount1in + s.amount1out\n    ) / pow(\n      10,\n      t1.decimals\n    ) AS amt1\n  FROM\n    swaps_ref AS s\n    INNER JOIN HARMONY.silver.tokens AS t0\n    ON t0.token_address = s.token0_address\n    INNER JOIN HARMONY.silver.tokens AS t1\n    ON t1.token_address = s.token1_address\n),\n-- aggregate daily swap volumes between all pairs\nswaps_daily_agg AS (\n  SELECT\n    s.block_date,\n    s.pool_address,\n    s.token0_address,\n    s.token0_symbol,\n    s.token1_address,\n    s.token1_symbol,\n    SUM(\n      s.amt0\n    ) AS amt0,\n    SUM(\n      s.amt1\n    ) AS amt1\n  FROM\n    simpleswaps AS s\n  GROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6\n),\n-- union all 0->1 and 1->0 swaps into a tall table for simplified bi-directional lookups and volume ranking\nconsolidated_pairs AS (\n  SELECT\n    concat_ws(\n      '-',\n      block_date,\n      token_address\n    ) AS key,\n    block_date,\n    token_address,\n    token_symbol,\n    SUM(amt) AS amt,\n    pair_address,\n    pair_symbol,\n    SUM(pair_amt) AS pair_amt,\n    SUM(pair_amt) / SUM (amt) AS price,\n    ROW_NUMBER() over (\n      PARTITION BY block_date,\n      token_address\n      ORDER BY\n        SUM(amt) DESC\n    ) AS RANK -- can't use rank() because of ties for 1st\n  FROM\n    (\n      SELECT\n        block_date,\n        token0_address AS token_address,\n        token0_symbol AS token_symbol,\n        amt0 AS amt,\n        token1_address AS pair_address,\n        token1_symbol AS pair_symbol,\n        amt1 AS pair_amt\n      FROM\n        swaps_daily_agg\n      UNION ALL\n      SELECT\n        block_date,\n        token1_address AS token_address,\n        token1_symbol AS token_symbol,\n        amt1 AS amt,\n        token0_address AS pair_address,\n        token0_symbol AS pair_symbol,\n        amt0 AS pair_amt\n      FROM\n        swaps_daily_agg\n    )\n  GROUP BY\n    1,\n    2,\n    3,\n    4,\n    6,\n    7\n  ORDER BY\n    4,\n    2,\n    5 DESC\n),\nstart_stables AS (\n  SELECT\n    DISTINCT concat_ws(\n      '-',\n      C.block_date,\n      C.token_address\n    ) AS key,\n    C.block_date,\n    s.token_address,\n    s.token_symbol,\n    1 AS usd_price,\n    0 AS volume_for_price,\n    NULL AS price_pair_token,\n    NULL AS price_pair_symbol,\n    'stables' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN stables AS s\n    ON C.token_address = s.token_address\n),\n-- add WONE lookup\nwone_lookup AS (\n  SELECT\n    C.key,\n    C.block_date,\n    C.token_address,\n    C.token_symbol,\n    SUM(\n      C.pair_amt\n    ) / SUM(\n      C.amt\n    ) AS usd_price,\n    SUM(\n      C.amt\n    ) AS volume_for_price,\n    NULL AS price_pair_token,\n    NULL AS price_pair_symbol,\n    'wONE' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN start_stables AS s\n    ON C.pair_address = s.token_address\n  WHERE\n    C.token_address = '0xcf664087a5bb0237a0bad6742852ec6c8d69a27a' -- WONE\n  GROUP BY\n    1,\n    2,\n    3,\n    4,\n    7,\n    8\n  UNION ALL\n  SELECT\n    *\n  FROM\n    start_stables\n),\n-- add lookups1a table for next round of matches, where top pair matches the wone_lookup table (wone + stables) (exclude keys that already exist in wone_lookup_table)\nlookups1a AS (\n  SELECT\n    C.key,\n    C.block_date,\n    C.token_address,\n    C.token_symbol,\n    C.price * s.usd_price AS usd_price,\n    C.amt AS volume_for_price,\n    C.pair_address AS pair_token_for_price,\n    C.pair_symbol AS pair_symbol_for_price,\n    '1a' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN wone_lookup AS s\n    ON C.pair_address = s.token_address\n    AND C.block_date = s.block_date\n    AND C.rank = 1\n  WHERE\n    C.key NOT IN (\n      SELECT\n        key\n      FROM\n        wone_lookup\n    )\n  UNION ALL\n  SELECT\n    *\n  FROM\n    wone_lookup\n),\n-- add lookups1b table for next round of matches, where top pair matches the lookups1a table (exclude keys that already exist in lookups1a table)\nlookups1b AS (\n  SELECT\n    C.key,\n    C.block_date,\n    C.token_address,\n    C.token_symbol,\n    C.price * s.usd_price AS usd_price,\n    C.amt AS volume_for_price,\n    C.pair_address AS pair_token_for_price,\n    C.pair_symbol AS pair_symbol_for_price,\n    '1b' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN lookups1a AS s\n    ON C.pair_address = s.token_address\n    AND C.block_date = s.block_date\n    AND C.rank = 1\n  WHERE\n    C.key NOT IN (\n      SELECT\n        key\n      FROM\n        lookups1a\n    )\n  UNION ALL\n  SELECT\n    *\n  FROM\n    lookups1a\n),\n-- add lookups1c table for next round of matches, where top pair matches the lookups1b table (exclude keys that already exist in lookups1b table)\nlookups1c AS (\n  SELECT\n    C.key,\n    C.block_date,\n    C.token_address,\n    C.token_symbol,\n    C.price * s.usd_price AS usd_price,\n    C.amt AS volume_for_price,\n    C.pair_address AS pair_token_for_price,\n    C.pair_symbol AS pair_symbol_for_price,\n    '1c' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN lookups1b AS s\n    ON C.pair_address = s.token_address\n    AND C.block_date = s.block_date\n    AND C.rank = 1\n  WHERE\n    C.key NOT IN (\n      SELECT\n        key\n      FROM\n        lookups1b\n    )\n  UNION ALL\n  SELECT\n    *\n  FROM\n    lookups1b\n),\n-- add lookups2a table for next round of matches, where 2nd most common pair matches the lookups1c table (exclude keys that already exist in lookups1c table)\nlookups2a AS (\n  SELECT\n    C.key,\n    C.block_date,\n    C.token_address,\n    C.token_symbol,\n    C.price * s.usd_price AS usd_price,\n    C.amt AS volume_for_price,\n    C.pair_address AS pair_token_for_price,\n    C.pair_symbol AS pair_symbol_for_price,\n    '2a' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN lookups1c AS s\n    ON C.pair_address = s.token_address\n    AND C.block_date = s.block_date\n    AND C.rank = 2\n  WHERE\n    C.key NOT IN (\n      SELECT\n        key\n      FROM\n        lookups1c\n    )\n  UNION ALL\n  SELECT\n    *\n  FROM\n    lookups1c\n),\n-- add lookups2b table for next round of matches, where 2nd most common pair matches the lookups2a table (exclude keys that already exist in lookups2a table)\nlookups2b AS (\n  SELECT\n    C.key,\n    C.block_date,\n    C.token_address,\n    C.token_symbol,\n    C.price * s.usd_price AS usd_price,\n    C.amt AS volume_for_price,\n    C.pair_address AS pair_token_for_price,\n    C.pair_symbol AS pair_symbol_for_price,\n    '2b' AS lookup_round\n  FROM\n    consolidated_pairs AS C\n    INNER JOIN lookups2a AS s\n    ON C.pair_address = s.token_address\n    AND C.block_date = s.block_date\n    AND C.rank = 1\n  WHERE\n    C.key NOT IN (\n      SELECT\n        key\n      FROM\n        lookups2a\n    )\n  UNION ALL\n  SELECT\n    *\n  FROM\n    lookups2a\n) -- IF needed, additional lookup rounds could be added, e.g.:\n-- TODO: add lookups2c table for next round of matches, where 2nd most common pair matches the lookups2b table (exclude keys that already exist in lookups2b table)\n-- TODO: add lookups3a table for next round of matches, where 3rd most common pair matches the lookups2c table (exclude keys that already exist in lookups2c table)\n-- TODO: add lookups3b table for next round of matches, where 3rd most common pair matches the lookups3a table (exclude keys that already exist in lookups3a table)\n-- TODO: add lookups3c table for next round of matches, where 3rd most common pair matches the lookups3b table (exclude keys that already exist in lookups3b table)\nSELECT\n  l.block_date,\n  l.token_address,\n  l.token_symbol,\n  l.usd_price,\n  l.usd_price * SUM(\n    C.amt\n  ) AS usd_volume,\n  SUM(\n    C.amt\n  ) AS token_volume,\n  l.pair_token_for_price,\n  l.pair_symbol_for_price,\n  l.volume_for_price,\n  l.key,\n  l.lookup_round\nFROM\n  lookups2b AS l\n  LEFT JOIN consolidated_pairs AS C\n  ON l.key = C.key\nGROUP BY\n  l.block_date,\n  l.token_address,\n  l.token_symbol,\n  l.usd_price,\n  l.pair_token_for_price,\n  l.pair_symbol_for_price,\n  l.volume_for_price,\n  l.key,\n  l.lookup_round", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.tokenprice_from_swaps"}, "model.harmony.silver__transfers": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_js_hex_to_int"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "log_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": [{"sql": "{{ create_js_hex_to_int() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "silver", "silver__transfers"], "unique_id": "model.harmony.silver__transfers", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'log_id',\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH logs AS (\n\n    SELECT\n        log_id,\n        block_id,\n        block_timestamp,\n        tx_hash,\n        evm_contract_address,\n        event_name,\n        event_inputs,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        {{ incremental_load_filter(\"_inserted_timestamp\") }}\n        AND event_name = 'Transfer'\n)\nSELECT\n    log_id,\n    block_id,\n    tx_hash,\n    block_timestamp,\n    evm_contract_address :: STRING AS contract_address,\n    event_inputs :from :: STRING AS from_address,\n    event_inputs :to :: STRING AS to_address,\n    event_inputs :value :: FLOAT AS raw_amount,\n    _inserted_timestamp\nFROM\n    logs\nWHERE\n    raw_amount IS NOT NULL", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "silver/silver__transfers.sql", "original_file_path": "models/silver/silver__transfers.sql", "name": "silver__transfers", "alias": "transfers", "checksum": {"name": "sha256", "checksum": "5eebe13f2478b791aad0ec45e69bf8b1b4461c81af9b1461fe34002ed6ea7ae3"}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "Harmony transfer events.", "columns": {"log_id": {"name": "log_id", "description": "Log identifier composed of tx_hash-event_index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The block ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "The transaction hash.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "The address of the transferred token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_address": {"name": "from_address", "description": "The address sent the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_address": {"name": "to_address", "description": "The address received the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "raw_amount": {"name": "raw_amount", "description": "The token's raw amount.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/silver/silver__transfers.yml", "compiled_path": "target/compiled/harmony/models/silver/silver__transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "pre-hook": "{{ create_js_hex_to_int() }}", "materialized": "incremental", "unique_key": "log_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1676639821.0055017, "compiled_code": "\n\nWITH logs AS (\n\n    SELECT\n        log_id,\n        block_id,\n        block_timestamp,\n        tx_hash,\n        evm_contract_address,\n        event_name,\n        event_inputs,\n        _inserted_timestamp\n    FROM\n        HARMONY.silver.logs\n    WHERE\n        -- dbt makes it easy to query your target table by using the \"HARMONY.silver.transfers\" variable.\n    \n      _inserted_timestamp > (select max(_inserted_timestamp) from HARMONY.silver.transfers)\n        AND event_name = 'Transfer'\n)\nSELECT\n    log_id,\n    block_id,\n    tx_hash,\n    block_timestamp,\n    evm_contract_address :: STRING AS contract_address,\n    event_inputs :from :: STRING AS from_address,\n    event_inputs :to :: STRING AS to_address,\n    event_inputs :value :: FLOAT AS raw_amount,\n    _inserted_timestamp\nFROM\n    logs\nWHERE\n    raw_amount IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.transfers"}, "model.harmony.silver__transactions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_js_hex_to_int"], "nodes": ["model.harmony.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_hash", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": [{"sql": "{{ create_js_hex_to_int() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "silver", "silver__transactions"], "unique_id": "model.harmony.silver__transactions", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'tx_hash',\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::date']\n) }}\n\nWITH base_tx AS (\n\n    SELECT\n        record_id,\n        tx_id,\n        tx_block_index,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx,\n        _inserted_timestamp\n    FROM\n        {{ ref(\"bronze__transactions\") }}\n    WHERE\n        {{ incremental_load_filter(\"_inserted_timestamp\") }}\n        qualify ROW_NUMBER() over (\n            PARTITION BY tx_id\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n)\nSELECT\n    block_timestamp,\n    tx :nonce :: STRING AS nonce,\n    tx_block_index AS INDEX,\n    tx :bech32_from :: STRING AS native_from_address,\n    tx :bech32_to :: STRING AS native_to_address,\n    tx :from :: STRING AS from_address,\n    tx :to :: STRING AS to_address,\n    tx :value AS VALUE,\n    COALESCE(\n        tx :block_number,\n        js_hex_to_int(\n            tx :blockNumber\n        )\n    ) AS block_number,\n    COALESCE(\n        tx :block_hash,\n        tx :blockHash\n    ) :: STRING AS block_hash,\n    COALESCE(\n        tx :gas_price,\n        js_hex_to_int(\n            tx :gasPrice\n        )\n    ) AS gas_price,\n    tx :gas AS gas,\n    tx_id AS tx_hash,\n    tx :input :: STRING AS DATA,\n    tx :receipt :status :: STRING = '0x1' AS status,\n    _inserted_timestamp\nFROM\n    base_tx", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "silver/silver__transactions.sql", "original_file_path": "models/silver/silver__transactions.sql", "name": "silver__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "1c3fb1ac21a8893d27ae6753817154ddce25b49b62b1d47d5038a44cecfd9163"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "This table records all the transactions of the Harmony blockchain.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "The time when the block was mined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nonce": {"name": "nonce", "description": "The number of transactions made by the sender prior to this one.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Integer of the transactions index position in the block. `null` when its pending.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "native_from_address": {"name": "native_from_address", "description": "Native Harmony address of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "native_to_address": {"name": "native_to_address", "description": "Native Harmony address of the receiver.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_address": {"name": "from_address", "description": "The Ethereum address of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_address": {"name": "to_address", "description": "The Ethereum address of the receiver.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The value transfered in ATTO format (a factor of 10^18).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_number": {"name": "block_number", "description": "Block number where this transaction was in. `null` when it's pending.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_hash": {"name": "block_hash", "description": "Hash of the block where this transaction was in. `null` when it's pending.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_price": {"name": "gas_price", "description": "Gas price provided by the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas": {"name": "gas", "description": "Gas provided by the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "The Ethereum hash of the transaction which is the primary key for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data": {"name": "data", "description": "Bytecode of the data sent along with the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Boolean representing whether the transaction is successful or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/silver/silver__transactions.yml", "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "pre-hook": "{{ create_js_hex_to_int() }}", "materialized": "incremental", "unique_key": "tx_hash", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::date"]}, "created_at": 1676639820.9432735, "compiled_code": "\n\nWITH base_tx AS (\n\n    SELECT\n        record_id,\n        tx_id,\n        tx_block_index,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx,\n        _inserted_timestamp\n    FROM\n        HARMONY.bronze.transactions\n    WHERE\n        -- dbt makes it easy to query your target table by using the \"HARMONY.silver.transactions\" variable.\n    \n      _inserted_timestamp > (select max(_inserted_timestamp) from HARMONY.silver.transactions)\n        qualify ROW_NUMBER() over (\n            PARTITION BY tx_id\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n)\nSELECT\n    block_timestamp,\n    tx :nonce :: STRING AS nonce,\n    tx_block_index AS INDEX,\n    tx :bech32_from :: STRING AS native_from_address,\n    tx :bech32_to :: STRING AS native_to_address,\n    tx :from :: STRING AS from_address,\n    tx :to :: STRING AS to_address,\n    tx :value AS VALUE,\n    COALESCE(\n        tx :block_number,\n        js_hex_to_int(\n            tx :blockNumber\n        )\n    ) AS block_number,\n    COALESCE(\n        tx :block_hash,\n        tx :blockHash\n    ) :: STRING AS block_hash,\n    COALESCE(\n        tx :gas_price,\n        js_hex_to_int(\n            tx :gasPrice\n        )\n    ) AS gas_price,\n    tx :gas AS gas,\n    tx_id AS tx_hash,\n    tx :input :: STRING AS DATA,\n    tx :receipt :status :: STRING = '0x1' AS status,\n    _inserted_timestamp\nFROM\n    base_tx", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.transactions"}, "model.harmony.silver__blocks": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_js_hex_to_int"], "nodes": ["model.harmony.bronze__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": [{"sql": "{{ create_js_hex_to_int() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "silver", "silver__blocks"], "unique_id": "model.harmony.silver__blocks", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'block_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::date']\n) }}\n\nWITH base_blocks AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        _inserted_timestamp\n    FROM\n        {{ ref(\"bronze__blocks\") }}\n    WHERE\n        {{ incremental_load_filter(\"_inserted_timestamp\") }}\n        qualify ROW_NUMBER() over (\n            PARTITION BY block_id\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n)\nSELECT\n    block_id,\n    block_timestamp,\n    header :hash :: STRING AS block_hash,\n    COALESCE(\n        header :parent_hash,\n        header :parentHash\n    ) :: STRING AS block_parent_hash,\n    COALESCE(\n        header :gas_limit,\n        js_hex_to_int(\n            header :gasLimit\n        )\n    ) AS gas_limit,\n    COALESCE(\n        header :gas_used,\n        js_hex_to_int(\n            header :gasUsed\n        )\n    ) AS gas_used,\n    header :miner :: STRING AS miner,\n    header :nonce :: STRING AS nonce,\n    CASE\n        WHEN header :size LIKE '0x%' THEN js_hex_to_int(\n            header :size\n        )\n        ELSE header :size\n    END AS SIZE,\n    tx_count,\n    COALESCE(\n        header :state_root,\n        header :stateRoot\n    ) :: STRING AS state_root,\n    COALESCE(\n        header :receipts_root,\n        header :receiptsRoot\n    ) :: STRING AS receipts_root,\n    _inserted_timestamp\nFROM\n    base_blocks", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "silver/silver__blocks.sql", "original_file_path": "models/silver/silver__blocks.sql", "name": "silver__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "13ff61103aaee1b80177f3185d29b2a9d5783c3e1b6535b295456c254b4e2183"}, "tags": [], "refs": [["bronze__blocks"]], "sources": [], "metrics": [], "description": "This table records all the blocks of Harmony blockchain.", "columns": {"block_id": {"name": "block_id", "description": "The block number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp for when the block was collated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_hash": {"name": "block_hash", "description": "Hash of the block (32 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_parent_hash": {"name": "block_parent_hash", "description": "Hash of the parent block (32 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_limit": {"name": "gas_limit", "description": "The maximum gas allowed in this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_used": {"name": "gas_used", "description": "The total used gas by all transactions in this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "miner": {"name": "miner", "description": "The address of the beneficiary to whom the mining rewards were given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nonce": {"name": "nonce", "description": "Hash of the generated proof-of-work (8 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "size": {"name": "size", "description": "Integer the size of this block in bytes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the given block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state_root": {"name": "state_root", "description": "The root hash that stores the entire state of the system - account balances, contract storage, contract code and account nonces are inside", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipts_root": {"name": "receipts_root", "description": "The root hash that stores receipts of all transactions included in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/silver/silver__blocks.yml", "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "pre-hook": "{{ create_js_hex_to_int() }}", "materialized": "incremental", "unique_key": "block_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::date"]}, "created_at": 1676639820.8563366, "compiled_code": "\n\nWITH base_blocks AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        _inserted_timestamp\n    FROM\n        HARMONY.bronze.blocks\n    WHERE\n        -- dbt makes it easy to query your target table by using the \"HARMONY.silver.blocks\" variable.\n    \n      _inserted_timestamp > (select max(_inserted_timestamp) from HARMONY.silver.blocks)\n        qualify ROW_NUMBER() over (\n            PARTITION BY block_id\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n)\nSELECT\n    block_id,\n    block_timestamp,\n    header :hash :: STRING AS block_hash,\n    COALESCE(\n        header :parent_hash,\n        header :parentHash\n    ) :: STRING AS block_parent_hash,\n    COALESCE(\n        header :gas_limit,\n        js_hex_to_int(\n            header :gasLimit\n        )\n    ) AS gas_limit,\n    COALESCE(\n        header :gas_used,\n        js_hex_to_int(\n            header :gasUsed\n        )\n    ) AS gas_used,\n    header :miner :: STRING AS miner,\n    header :nonce :: STRING AS nonce,\n    CASE\n        WHEN header :size LIKE '0x%' THEN js_hex_to_int(\n            header :size\n        )\n        ELSE header :size\n    END AS SIZE,\n    tx_count,\n    COALESCE(\n        header :state_root,\n        header :stateRoot\n    ) :: STRING AS state_root,\n    COALESCE(\n        header :receipts_root,\n        header :receiptsRoot\n    ) :: STRING AS receipts_root,\n    _inserted_timestamp\nFROM\n    base_blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.blocks"}, "model.harmony.silver__liquidity_pools": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.create_js_hex_to_int"], "nodes": ["model.harmony.silver__logs", "model.harmony.silver__tokens", "model.harmony.silver__tokens", "seed.harmony.silver__backfill_pools_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "pool_address", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "post-hook": [], "pre-hook": [{"sql": "{{ create_js_hex_to_int() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "silver", "silver__liquidity_pools"], "unique_id": "model.harmony.silver__liquidity_pools", "raw_code": "{{ config(\n    materialized = 'table',\n    unique_key = 'pool_address'\n) }}\n\nWITH src_logs_lp AS (\n\n    SELECT\n        event_inputs :pair :: STRING AS pool_address,\n        '' AS pool_name,\n        event_inputs :token0 :: STRING AS token0,\n        event_inputs :token1 :: STRING AS token1\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        event_name = 'PairCreated'\n),\nlogs_lp AS (\n    SELECT\n        pool_address,\n        t0.token_symbol || '-' || t1.token_symbol || ' LP' AS pool_name,\n        token0,\n        token1\n    FROM\n        src_logs_lp p\n        INNER JOIN {{ ref('silver__tokens') }} AS t0\n        ON p.token0 = t0.token_address\n        INNER JOIN {{ ref('silver__tokens') }} AS t1\n        ON p.token1 = t1.token_address\n),\nbackfill_from_swaps AS (\n    SELECT\n        pool_address,\n        pool_name,\n        token0,\n        token1\n    FROM\n        {{ ref('silver__backfill_pools_data') }}\n    WHERE\n        pool_address NOT IN (\n            SELECT\n                pool_address\n            FROM\n                logs_lp\n        )\n)\nSELECT\n    pool_address,\n    pool_name,\n    token0,\n    token1\nFROM\n    logs_lp\nUNION\nSELECT\n    pool_address,\n    pool_name,\n    token0,\n    token1\nFROM\n    backfill_from_swaps", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "silver/silver__liquidity_pools.sql", "original_file_path": "models/silver/silver__liquidity_pools.sql", "name": "silver__liquidity_pools", "alias": "liquidity_pools", "checksum": {"name": "sha256", "checksum": "ec3b3dbb7ecf50f4b95a06941472aa4de21459f7dd16087998bc0ed536226a79"}, "tags": [], "refs": [["silver__logs"], ["silver__tokens"], ["silver__tokens"], ["silver__backfill_pools_data"]], "sources": [], "metrics": [], "description": "Harmony Liquidity Pools", "columns": {"pool_address": {"name": "pool_address", "description": "The pool's `contract_address`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_name": {"name": "pool_name", "description": "The internally generated name generated by `token0`'s symbol and `token1`'s symbol (e.g JEWEL-WONE LP).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0": {"name": "token0", "description": "The `token0`'s `contract_address`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1": {"name": "token1", "description": "The `token1`'s `contract_address`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/silver/silver__liquidity_pools.yml", "compiled_path": "target/compiled/harmony/models/silver/silver__liquidity_pools.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "pre-hook": "{{ create_js_hex_to_int() }}", "materialized": "table", "unique_key": "pool_address"}, "created_at": 1676639820.743166, "compiled_code": "\n\nWITH src_logs_lp AS (\n\n    SELECT\n        event_inputs :pair :: STRING AS pool_address,\n        '' AS pool_name,\n        event_inputs :token0 :: STRING AS token0,\n        event_inputs :token1 :: STRING AS token1\n    FROM\n        HARMONY.silver.logs\n    WHERE\n        event_name = 'PairCreated'\n),\nlogs_lp AS (\n    SELECT\n        pool_address,\n        t0.token_symbol || '-' || t1.token_symbol || ' LP' AS pool_name,\n        token0,\n        token1\n    FROM\n        src_logs_lp p\n        INNER JOIN HARMONY.silver.tokens AS t0\n        ON p.token0 = t0.token_address\n        INNER JOIN HARMONY.silver.tokens AS t1\n        ON p.token1 = t1.token_address\n),\nbackfill_from_swaps AS (\n    SELECT\n        pool_address,\n        pool_name,\n        token0,\n        token1\n    FROM\n        HARMONY.silver.backfill_pools_data\n    WHERE\n        pool_address NOT IN (\n            SELECT\n                pool_address\n            FROM\n                logs_lp\n        )\n)\nSELECT\n    pool_address,\n    pool_name,\n    token0,\n    token1\nFROM\n    logs_lp\nUNION\nSELECT\n    pool_address,\n    pool_name,\n    token0,\n    token1\nFROM\n    backfill_from_swaps", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.liquidity_pools"}, "model.harmony.core__dim_blocks": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "core", "fqn": ["harmony", "core", "core__dim_blocks"], "unique_id": "model.harmony.core__dim_blocks", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['block_id']\n    ) }} AS dim_block_id,\n    block_id,\n    block_timestamp,\n    block_hash,\n    block_parent_hash,\n    gas_limit,\n    gas_used,\n    miner,\n    nonce,\n    SIZE,\n    tx_count,\n    state_root,\n    receipts_root,\n    _inserted_timestamp\nFROM\n    {{ ref(\"silver__blocks\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "core/core__dim_blocks.sql", "original_file_path": "models/core/core__dim_blocks.sql", "name": "core__dim_blocks", "alias": "dim_blocks", "checksum": {"name": "sha256", "checksum": "10fbb7c5e176d06db9efbf586e3e48848b880a6dc7df715eb2d5fe4c8ad56796"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "This table records all the blocks of Harmony blockchain.", "columns": {"DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The block number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp for when the block was collated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Hash of the block (32 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_PARENT_HASH": {"name": "BLOCK_PARENT_HASH", "description": "Hash of the parent block (32 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "The maximum gas allowed in this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "The total used gas by all transactions in this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINER": {"name": "MINER", "description": "The address of the beneficiary to whom the mining rewards were given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "Hash of the generated proof-of-work (8 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIZE": {"name": "SIZE", "description": "Integer the size of this block in bytes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "The number of transactions in the given block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATE_ROOT": {"name": "STATE_ROOT", "description": "The root hash that stores the entire state of the system - account balances, contract storage, contract code and account nonces are inside", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPTS_ROOT": {"name": "RECEIPTS_ROOT", "description": "The root hash that stores receipts of all transactions included in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/core/core__dim_blocks.yml", "compiled_path": "target/compiled/harmony/models/core/core__dim_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "materialized": "view"}, "created_at": 1676639821.0990183, "compiled_code": "\n\nSELECT\n    md5(cast(coalesce(cast(block_id as \n    varchar\n), '') as \n    varchar\n)) AS dim_block_id,\n    block_id,\n    block_timestamp,\n    block_hash,\n    block_parent_hash,\n    gas_limit,\n    gas_used,\n    miner,\n    nonce,\n    SIZE,\n    tx_count,\n    state_root,\n    receipts_root,\n    _inserted_timestamp\nFROM\n    HARMONY.silver.blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.core.dim_blocks"}, "model.harmony.core__dim_liquidity_pools": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.harmony.silver__liquidity_pools"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "core", "fqn": ["harmony", "core", "core__dim_liquidity_pools"], "unique_id": "model.harmony.core__dim_liquidity_pools", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['pool_address']\n    ) }} AS dim_liquidity_pool_id,\n    pool_address,\n    pool_name,\n    token0,\n    token1\nFROM\n    {{ ref(\"silver__liquidity_pools\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "core/core__dim_liquidity_pools.sql", "original_file_path": "models/core/core__dim_liquidity_pools.sql", "name": "core__dim_liquidity_pools", "alias": "dim_liquidity_pools", "checksum": {"name": "sha256", "checksum": "b81819cfd1682ec93af7054ed03d78cc6410071e0c245df9ede7eda8c5445733"}, "tags": [], "refs": [["silver__liquidity_pools"]], "sources": [], "metrics": [], "description": "Harmony Liquidity Pools", "columns": {"DIM_LIQUIDITY_POOL_ID": {"name": "DIM_LIQUIDITY_POOL_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The pool's `contract_address`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "The internally generated name generated by `token0`'s symbol and `token1`'s symbol (e.g JEWEL-WONE LP).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0": {"name": "TOKEN0", "description": "The `token0`'s `contract_address`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1": {"name": "TOKEN1", "description": "The `token1`'s `contract_address`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/core/core__dim_liquidity_pools.yml", "compiled_path": "target/compiled/harmony/models/core/core__dim_liquidity_pools.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "materialized": "view"}, "created_at": 1676639821.0768356, "compiled_code": "\n\nSELECT\n    md5(cast(coalesce(cast(pool_address as \n    varchar\n), '') as \n    varchar\n)) AS dim_liquidity_pool_id,\n    pool_address,\n    pool_name,\n    token0,\n    token1\nFROM\n    HARMONY.silver.liquidity_pools", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.core.dim_liquidity_pools"}, "model.harmony.core__fact_transfers": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.harmony.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "core", "fqn": ["harmony", "core", "core__fact_transfers"], "unique_id": "model.harmony.core__fact_transfers", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['log_id']\n    ) }} AS fact_transfers_id,\n    log_id,\n    block_id,\n    tx_hash,\n    block_timestamp,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount\nFROM\n    {{ ref('silver__transfers') }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "core/core__fact_transfers.sql", "original_file_path": "models/core/core__fact_transfers.sql", "name": "core__fact_transfers", "alias": "fact_transfers", "checksum": {"name": "sha256", "checksum": "b49c5db4f66c198db2a1b0d60088b4bc3b31fad85d102f549219879c310d5aed"}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "Harmony transfer events.", "columns": {"FACT_TRANSFERS_ID": {"name": "FACT_TRANSFERS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOG_ID": {"name": "LOG_ID", "description": "Log identifier composed of tx_hash-event_index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The block ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "The transaction hash.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The time the block was minted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The address of the transferred token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The address sent the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The address received the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_AMOUNT": {"name": "RAW_AMOUNT", "description": "The token's raw amount.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/core/core__fact_transfers.yml", "compiled_path": "target/compiled/harmony/models/core/core__fact_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "materialized": "view"}, "created_at": 1676639821.0870767, "compiled_code": "\n\nSELECT\n    md5(cast(coalesce(cast(log_id as \n    varchar\n), '') as \n    varchar\n)) AS fact_transfers_id,\n    log_id,\n    block_id,\n    tx_hash,\n    block_timestamp,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount\nFROM\n    HARMONY.silver.transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.core.fact_transfers"}, "model.harmony.core__fact_swaps": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "core", "fqn": ["harmony", "core", "core__fact_swaps"], "unique_id": "model.harmony.core__fact_swaps", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['log_id']\n    ) }} AS fact_swaps_id,\n    block_timestamp,\n    block_id,\n    log_id,\n    tx_hash,\n    pool_address,\n    event_index,\n    evm_origin_from_address,\n    evm_origin_to_address,\n    native_origin_from_address,\n    native_origin_to_address,\n    token0_address,\n    token0_name,\n    token0_symbol,\n    amount0In,\n    amount1In,\n    amount0Out,\n    amount1Out,\n    token1_address,\n    token1_name,\n    token1_symbol,\n    from_address,\n    to_address,\n    _inserted_timestamp\nFROM\n    {{ ref('silver__swaps') }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "core/core__fact_swaps.sql", "original_file_path": "models/core/core__fact_swaps.sql", "name": "core__fact_swaps", "alias": "fact_swaps", "checksum": {"name": "sha256", "checksum": "8462bae44712b8aa1338f680b7d342470c2d19e6ad243a13ceed7ace867adea0"}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "Harmony Swaps", "columns": {"FACT_SWAPS_ID": {"name": "FACT_SWAPS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "When the trade was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOG_ID": {"name": "LOG_ID", "description": "The unique id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "The transaction hash.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The pool address that the swap was conducted in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_ADDRESS": {"name": "TOKEN0_ADDRESS", "description": "The `token0` address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_NAME": {"name": "TOKEN0_NAME", "description": "The `token0` name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_SYMBOL": {"name": "TOKEN0_SYMBOL", "description": "The `token0` symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT0IN": {"name": "AMOUNT0IN", "description": "The amount of `token0` that went into the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT0OUT": {"name": "AMOUNT0OUT", "description": "The amount of `token0` that came out from the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_ADDRESS": {"name": "TOKEN1_ADDRESS", "description": "The `token1` address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_NAME": {"name": "TOKEN1_NAME", "description": "The `token1` name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_SYMBOL": {"name": "TOKEN1_SYMBOL", "description": "The `token1` symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT1IN": {"name": "AMOUNT1IN", "description": "The amount of `token1` that went into the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT1OUT": {"name": "AMOUNT1OUT", "description": "The amount of `token` that came out from the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The address that triggered the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The address that the out tokens go to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/core/core__fact_swaps.yml", "compiled_path": "target/compiled/harmony/models/core/core__fact_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "materialized": "view"}, "created_at": 1676639821.0555513, "compiled_code": "\n\nSELECT\n    md5(cast(coalesce(cast(log_id as \n    varchar\n), '') as \n    varchar\n)) AS fact_swaps_id,\n    block_timestamp,\n    block_id,\n    log_id,\n    tx_hash,\n    pool_address,\n    event_index,\n    evm_origin_from_address,\n    evm_origin_to_address,\n    native_origin_from_address,\n    native_origin_to_address,\n    token0_address,\n    token0_name,\n    token0_symbol,\n    amount0In,\n    amount1In,\n    amount0Out,\n    amount1Out,\n    token1_address,\n    token1_name,\n    token1_symbol,\n    from_address,\n    to_address,\n    _inserted_timestamp\nFROM\n    HARMONY.silver.swaps", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.core.fact_swaps"}, "model.harmony.core__fact_transactions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "core", "fqn": ["harmony", "core", "core__fact_transactions"], "unique_id": "model.harmony.core__fact_transactions", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['tx_hash']\n    ) }} AS fact_transactions_id,\n    block_timestamp,\n    nonce,\n    INDEX,\n    native_from_address,\n    native_to_address,\n    from_address,\n    to_address,\n    VALUE,\n    block_number,\n    block_hash,\n    gas_price,\n    gas,\n    tx_hash,\n    DATA,\n    status\nFROM\n    {{ ref('silver__transactions') }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "core/core__fact_transactions.sql", "original_file_path": "models/core/core__fact_transactions.sql", "name": "core__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "50c642bbaf781edfd325825078b7bf1b4d5210dd74df195b774e0f91bdc354e7"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "This table records all the transactions of the Harmony blockchain.", "columns": {"FACT_TRANSACTIONS_ID": {"name": "FACT_TRANSACTIONS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The time when the block was mined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "The number of transactions made by the sender prior to this one.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Integer of the transactions index position in the block. `null` when its pending.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NATIVE_FROM_ADDRESS": {"name": "NATIVE_FROM_ADDRESS", "description": "Native Harmony address of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NATIVE_TO_ADDRESS": {"name": "NATIVE_TO_ADDRESS", "description": "Native Harmony address of the receiver.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The Ethereum address of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The Ethereum address of the receiver.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALUE": {"name": "VALUE", "description": "The value transfered in ATTO format (a factor of 10^18).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Block number where this transaction was in. `null` when it's pending.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Hash of the block where this transaction was in. `null` when it's pending.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_PRICE": {"name": "GAS_PRICE", "description": "Gas price provided by the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS": {"name": "GAS", "description": "Gas provided by the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "The Ethereum hash of the transaction which is the primary key for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "Bytecode of the data sent along with the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "Boolean representing whether the transaction is successful or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/core/core__fact_transactions.yml", "compiled_path": "target/compiled/harmony/models/core/core__fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "materialized": "view"}, "created_at": 1676639821.1122196, "compiled_code": "\n\nSELECT\n    md5(cast(coalesce(cast(tx_hash as \n    varchar\n), '') as \n    varchar\n)) AS fact_transactions_id,\n    block_timestamp,\n    nonce,\n    INDEX,\n    native_from_address,\n    native_to_address,\n    from_address,\n    to_address,\n    VALUE,\n    block_number,\n    block_hash,\n    gas_price,\n    gas,\n    tx_hash,\n    DATA,\n    status\nFROM\n    HARMONY.silver.transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.core.fact_transactions"}, "model.harmony.core__fact_tokenprices": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.harmony.silver__tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "core", "fqn": ["harmony", "core", "core__fact_tokenprices"], "unique_id": "model.harmony.core__fact_tokenprices", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['key']\n  ) }} AS fact_tokenprices_id,\n  block_date,\n  token_address,\n  token_symbol,\n  usd_price,\n  usd_volume,\n  token_volume\nFROM\n  {{ ref('silver__tokenprices') }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "core/core__fact_tokenprices.sql", "original_file_path": "models/core/core__fact_tokenprices.sql", "name": "core__fact_tokenprices", "alias": "fact_tokenprices", "checksum": {"name": "sha256", "checksum": "327e8f28bb370d929e8df77a8d243f8c550ea41f1b0524054b255819ca0dfd7a"}, "tags": [], "refs": [["silver__tokenprices"]], "sources": [], "metrics": [], "description": "Volume-weighted average daily prices based on swap data, assuming curated stables = 1 USD, and preferring the most liquid pair.  Token prices will show up if they have at least USD100 of daily volume.", "columns": {"FACT_TOKENPRICES_ID": {"name": "FACT_TOKENPRICES_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DATE": {"name": "BLOCK_DATE", "description": "The date of the token price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "Address of the Token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_SYMBOL": {"name": "TOKEN_SYMBOL", "description": "HRC token symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USD_PRICE": {"name": "USD_PRICE", "description": "Volume-weighted average price calculated on the `block_date`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USD_VOLUME": {"name": "USD_VOLUME", "description": "The USD-equivalent amount swapped on the `block_date` based on curated liquidity pool list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_VOLUME": {"name": "TOKEN_VOLUME", "description": "The amount of tokens swapped on this date based on the curated liquidity pool list.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/core/core__fact_tokenprices.yml", "compiled_path": "target/compiled/harmony/models/core/core__fact_tokenprices.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "materialized": "view"}, "created_at": 1676639821.042384, "compiled_code": "\n\nSELECT\n  md5(cast(coalesce(cast(key as \n    varchar\n), '') as \n    varchar\n)) AS fact_tokenprices_id,\n  block_date,\n  token_address,\n  token_symbol,\n  usd_price,\n  usd_volume,\n  token_volume\nFROM\n  HARMONY.silver.tokenprices", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.core.fact_tokenprices"}, "model.harmony.core__fact_event_logs": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "core", "fqn": ["harmony", "core", "core__fact_event_logs"], "unique_id": "model.harmony.core__fact_event_logs", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['log_id']\n    ) }} AS fact_event_logs_id,\n    block_id,\n    block_timestamp,\n    tx_hash,\n    event_index,\n    evm_origin_from_address,\n    evm_origin_to_address,\n    native_origin_from_address,\n    native_origin_to_address,\n    native_contract_address,\n    evm_contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    log_id\nFROM\n    {{ ref(\"silver__logs\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "core/core__fact_event_logs.sql", "original_file_path": "models/core/core__fact_event_logs.sql", "name": "core__fact_event_logs", "alias": "fact_event_logs", "checksum": {"name": "sha256", "checksum": "8fabb055f433c27686bd7e651eff1a6e5f1c9464c61cf6933449823227661902"}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "Harmony Logs", "columns": {"FACT_EVENT_LOGS_ID": {"name": "FACT_EVENT_LOGS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOG_ID": {"name": "LOG_ID", "description": "Log identifier composed of tx_hash-event_index", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The block number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp for when the block was collated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Hash of the transaction (32 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Integer of of the log position in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NATIVE_CONTRACT_ADDRESS": {"name": "NATIVE_CONTRACT_ADDRESS", "description": "Native Harmony address of the contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVM_CONTRACT_ADDRESS": {"name": "EVM_CONTRACT_ADDRESS", "description": "EVM address of the contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_NAME": {"name": "CONTRACT_NAME", "description": "Name of the contract called.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_NAME": {"name": "EVENT_NAME", "description": "Name of the event executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INPUTS": {"name": "EVENT_INPUTS", "description": "Parameter inputs for the event called.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOPICS": {"name": "TOPICS", "description": "Array of 0 to 4 32 Bytes data of indexed log arguments.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "Contains the non-indexed arguments of the log.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_REMOVED": {"name": "EVENT_REMOVED", "description": "True when the log was removed, due to a chain reorganization. false if its a valid log.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/core/core__fact_event_logs.yml", "compiled_path": "target/compiled/harmony/models/core/core__fact_event_logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "materialized": "view"}, "created_at": 1676639821.0677037, "compiled_code": "\n\nSELECT\n    md5(cast(coalesce(cast(log_id as \n    varchar\n), '') as \n    varchar\n)) AS fact_event_logs_id,\n    block_id,\n    block_timestamp,\n    tx_hash,\n    event_index,\n    evm_origin_from_address,\n    evm_origin_to_address,\n    native_origin_from_address,\n    native_origin_to_address,\n    native_contract_address,\n    evm_contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    log_id\nFROM\n    HARMONY.silver.logs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.core.fact_event_logs"}, "model.harmony.core__dim_tokens": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.harmony.silver__tokens"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "core", "fqn": ["harmony", "core", "core__dim_tokens"], "unique_id": "model.harmony.core__dim_tokens", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['token_address']\n    ) }} AS dim_tokens_id,\n    token_address,\n    token_name,\n    token_symbol,\n    decimals\nFROM\n    {{ ref('silver__tokens') }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "core/core__dim_tokens.sql", "original_file_path": "models/core/core__dim_tokens.sql", "name": "core__dim_tokens", "alias": "dim_tokens", "checksum": {"name": "sha256", "checksum": "6845a0fb5c09e0e52a17d08fa6ab90cac3ffb10d28ebae5366b8da2c975aa01e"}, "tags": [], "refs": [["silver__tokens"]], "sources": [], "metrics": [], "description": "Harmony Tokens", "columns": {"DIM_TOKENS_ID": {"name": "DIM_TOKENS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "The token's `contract_address`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_NAME": {"name": "TOKEN_NAME", "description": "The token's name as read from the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_SYMBOL": {"name": "TOKEN_SYMBOL", "description": "The token's symbol (e.g WONE) as read from the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The token's decimals as read from the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/core/core__dim_tokens.yml", "compiled_path": "target/compiled/harmony/models/core/core__dim_tokens.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "materialized": "view"}, "created_at": 1676639821.0269456, "compiled_code": "\n\nSELECT\n    md5(cast(coalesce(cast(token_address as \n    varchar\n), '') as \n    varchar\n)) AS dim_tokens_id,\n    token_address,\n    token_name,\n    token_symbol,\n    decimals\nFROM\n    HARMONY.silver.tokens", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.core.dim_tokens"}, "model.harmony.bronze__blocks": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.harmony.chainwalkers.harmony_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "bronze", "fqn": ["harmony", "bronze", "bronze__blocks"], "unique_id": "model.harmony.bronze__blocks", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    _inserted_timestamp\nFROM\n    {{ source(\n        \"chainwalkers\",\n        \"harmony_blocks\"\n    ) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "bronze/bronze__blocks.sql", "original_file_path": "models/bronze/bronze__blocks.sql", "name": "bronze__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "e06f0725728ff3ec9ef2e2922393e3de41bc7318d2ee05623c3ba6e0cbd6d6e6"}, "tags": [], "refs": [], "sources": [["chainwalkers", "harmony_blocks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/bronze/bronze__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "materialized": "view"}, "created_at": 1676639820.2015052, "compiled_code": "\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    _inserted_timestamp\nFROM\n    chainwalkers.prod.harmony_blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.bronze.blocks"}, "model.harmony.bronze__transactions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.harmony.chainwalkers.harmony_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "core": null, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "bronze", "fqn": ["harmony", "bronze", "bronze__transactions"], "unique_id": "model.harmony.bronze__transactions", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    tx_id,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    _inserted_timestamp\nFROM\n    {{ source(\n        \"chainwalkers\",\n        \"harmony_txs\"\n    ) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "bronze/bronze__transactions.sql", "original_file_path": "models/bronze/bronze__transactions.sql", "name": "bronze__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "defee25cdb0315fa8bdf2f49396e23c3e56063f368fc37ef781751f84051ee3d"}, "tags": [], "refs": [], "sources": [["chainwalkers", "harmony_txs"]], "metrics": [], "description": "Transactions from the Harmony chain shard 0. Duplicates have been removed.", "columns": {"record_id": {"name": "record_id", "description": "A unique id for the record generated by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "Synonmous with transaction hash, a unique on chain identifier for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_block_index": {"name": "tx_block_index", "description": "The index of the transaction within the block. Starts at 0.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offset_id": {"name": "offset_id", "description": "Synonmous with `block_id` for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network. (i.e. mainnet, testnet, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Synonmous with blockchain name for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "The time this row was ingested by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "harmony://models/bronze/bronze__transactions.yml", "compiled_path": "target/compiled/harmony/models/bronze/bronze__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "core": null, "materialized": "view"}, "created_at": 1676639821.1468987, "compiled_code": "\n\nSELECT\n    record_id,\n    tx_id,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    _inserted_timestamp\nFROM\n    chainwalkers.prod.harmony_txs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.bronze.transactions"}, "seed.harmony.silver__backfill_pools_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "harmony_tokens", "silver__backfill_pools_data"], "unique_id": "seed.harmony.silver__backfill_pools_data", "raw_code": "", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "harmony_tokens/silver__backfill_pools_data.csv", "original_file_path": "data/harmony_tokens/silver__backfill_pools_data.csv", "name": "silver__backfill_pools_data", "alias": "backfill_pools_data", "checksum": {"name": "sha256", "checksum": "1ec361e38c92e74abcfc33845c1b0029d3ce8c4ae287d4d5506dc22e26064fb9"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1676639820.2278366, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.backfill_pools_data"}, "seed.harmony.silver__harmony_stable_tokens": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "harmony_tokens", "silver__harmony_stable_tokens"], "unique_id": "seed.harmony.silver__harmony_stable_tokens", "raw_code": "", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "harmony_tokens/silver__harmony_stable_tokens.csv", "original_file_path": "data/harmony_tokens/silver__harmony_stable_tokens.csv", "name": "silver__harmony_stable_tokens", "alias": "harmony_stable_tokens", "checksum": {"name": "sha256", "checksum": "a1eedd7fd2881c246ba1c321d62d20f3e55e985ca63417d755d31cab39b87c47"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1676639820.2304153, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.harmony_stable_tokens"}, "seed.harmony.silver__backfill_tokens_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "harmony_tokens", "silver__backfill_tokens_data"], "unique_id": "seed.harmony.silver__backfill_tokens_data", "raw_code": "", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "harmony_tokens/silver__backfill_tokens_data.csv", "original_file_path": "data/harmony_tokens/silver__backfill_tokens_data.csv", "name": "silver__backfill_tokens_data", "alias": "backfill_tokens_data", "checksum": {"name": "sha256", "checksum": "7f7c2532e27c42b2efed77a74a820470cb81dadc96b8399605c958dab6366830"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1676639820.2327542, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.backfill_tokens_data"}, "seed.harmony.silver__harmony_explorer_tokens": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "harmony_tokens", "silver__harmony_explorer_tokens"], "unique_id": "seed.harmony.silver__harmony_explorer_tokens", "raw_code": "", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "harmony_tokens/silver__harmony_explorer_tokens.csv", "original_file_path": "data/harmony_tokens/silver__harmony_explorer_tokens.csv", "name": "silver__harmony_explorer_tokens", "alias": "harmony_explorer_tokens", "checksum": {"name": "sha256", "checksum": "ff0e764b942b09239c578eb658e931ba04d217e9e489689f991971216d91693e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1676639820.2351072, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.harmony_explorer_tokens"}, "seed.harmony.silver__dfk_tokens": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "silver", "fqn": ["harmony", "dfk", "silver__dfk_tokens"], "unique_id": "seed.harmony.silver__dfk_tokens", "raw_code": "", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dfk/silver__dfk_tokens.csv", "original_file_path": "data/dfk/silver__dfk_tokens.csv", "name": "silver__dfk_tokens", "alias": "dfk_tokens", "checksum": {"name": "sha256", "checksum": "2037dd7a01423afe8786b4ffab1bd6fd781ee28979708ba59d96523503de284f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1676639820.2374668, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.silver.dfk_tokens"}, "operation.dbt_constraints.dbt_constraints-on-run-end-0": {"compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.dbt_constraints.create_constraints"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "dbt_constraints-on-run-end-0", "fqn": ["dbt_constraints", "hooks", "dbt_constraints-on-run-end-0"], "unique_id": "operation.dbt_constraints.dbt_constraints-on-run-end-0", "raw_code": "{{ dbt_constraints.create_constraints() }}", "language": "sql", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "hooks/dbt_constraints-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "dbt_constraints-on-run-end-0", "alias": "", "checksum": {"name": "sha256", "checksum": "322fdaf41d183a13b7417bf8f47935d83bfdf07242073cf29b8c8789010746fb"}, "tags": ["on-run-end"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1676639820.3238702, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "test.harmony.not_null_sushi__ez_sushi_swaps_BLOCK_NUMBER.49aaf3ca6a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_sushi", "fqn": ["harmony", "sushi", "not_null_sushi__ez_sushi_swaps_BLOCK_NUMBER"], "unique_id": "test.harmony.not_null_sushi__ez_sushi_swaps_BLOCK_NUMBER.49aaf3ca6a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_sushi__ez_sushi_swaps_BLOCK_NUMBER.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "not_null_sushi__ez_sushi_swaps_BLOCK_NUMBER", "alias": "ez_sushi_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/not_null_sushi__ez_sushi_swaps_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.4350426, "compiled_code": "\n    \n    \n\n\n\nselect BLOCK_NUMBER\nfrom HARMONY.sushi.ez_sushi_swaps\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_NUMBER__NUMBER__FLOAT.b806644c8e": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e68b8d7cfc1ad68c8ddd643cb0aa4c76", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_NUMBER__NUMBER__FLOAT.b806644c8e", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e68b8d7cfc1ad68c8ddd643cb0aa4c76\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_e68b8d7cfc1ad68c8ddd643cb0aa4c76.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "ez_sushi_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_e68b8d7cfc1ad68c8ddd643cb0aa4c76.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e68b8d7cfc1ad68c8ddd643cb0aa4c76"}, "created_at": 1676639820.4372494, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.not_null_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP.b5ddce3a4c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_sushi", "fqn": ["harmony", "sushi", "not_null_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP"], "unique_id": "test.harmony.not_null_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP.b5ddce3a4c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "not_null_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP", "alias": "ez_sushi_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/not_null_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.4538925, "compiled_code": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom HARMONY.sushi.ez_sushi_swaps\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__day__1.82c9acb683": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_be2da5678c9801600f286647b7c388c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__day__1.82c9acb683", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_be2da5678c9801600f286647b7c388c9\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_row_va_be2da5678c9801600f286647b7c388c9.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__day__1", "alias": "ez_sushi_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_row_va_be2da5678c9801600f286647b7c388c9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_be2da5678c9801600f286647b7c388c9"}, "created_at": 1676639820.4558988, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        HARMONY.sushi.ez_sushi_swaps\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2ef3ef9355": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ff53348ab2e280d396b779b39af43ce5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2ef3ef9355", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ff53348ab2e280d396b779b39af43ce5\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_ff53348ab2e280d396b779b39af43ce5.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_sushi_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_ff53348ab2e280d396b779b39af43ce5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ff53348ab2e280d396b779b39af43ce5"}, "created_at": 1676639820.4856775, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.not_null_sushi__ez_sushi_swaps_TX_HASH.bb62e48d4e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_sushi", "fqn": ["harmony", "sushi", "not_null_sushi__ez_sushi_swaps_TX_HASH"], "unique_id": "test.harmony.not_null_sushi__ez_sushi_swaps_TX_HASH.bb62e48d4e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_sushi__ez_sushi_swaps_TX_HASH.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "not_null_sushi__ez_sushi_swaps_TX_HASH", "alias": "ez_sushi_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/not_null_sushi__ez_sushi_swaps_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.4924855, "compiled_code": "\n    \n    \n\n\n\nselect TX_HASH\nfrom HARMONY.sushi.ez_sushi_swaps\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_HASH__0_xX_0_9a_fA_F_.5a402045dc": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d5e22c6b8b9693d1f1b5fdfc6a5fab8f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_HASH__0_xX_0_9a_fA_F_.5a402045dc", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d5e22c6b8b9693d1f1b5fdfc6a5fab8f\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_d5e22c6b8b9693d1f1b5fdfc6a5fab8f.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_HASH__0_xX_0_9a_fA_F_", "alias": "ez_sushi_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_d5e22c6b8b9693d1f1b5fdfc6a5fab8f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d5e22c6b8b9693d1f1b5fdfc6a5fab8f"}, "created_at": 1676639820.4944777, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.sushi.ez_sushi_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.not_null_sushi__ez_sushi_swaps_POOL_ADDRESS.4b6799907f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_sushi", "fqn": ["harmony", "sushi", "not_null_sushi__ez_sushi_swaps_POOL_ADDRESS"], "unique_id": "test.harmony.not_null_sushi__ez_sushi_swaps_POOL_ADDRESS.4b6799907f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_sushi__ez_sushi_swaps_POOL_ADDRESS.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "not_null_sushi__ez_sushi_swaps_POOL_ADDRESS", "alias": "ez_sushi_swaps_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/not_null_sushi__ez_sushi_swaps_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.5159996, "compiled_code": "\n    \n    \n\n\n\nselect POOL_ADDRESS\nfrom HARMONY.sushi.ez_sushi_swaps\nwhere POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POOL_ADDRESS", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.bd262348ce": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2e4eb24189ff84fc8e02582ca6ea2cb5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.bd262348ce", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2e4eb24189ff84fc8e02582ca6ea2cb5\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_2e4eb24189ff84fc8e02582ca6ea2cb5.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_sushi_swaps_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_2e4eb24189ff84fc8e02582ca6ea2cb5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2e4eb24189ff84fc8e02582ca6ea2cb5"}, "created_at": 1676639820.5179856, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(POOL_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.sushi.ez_sushi_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POOL_ADDRESS", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.not_null_sushi__ez_sushi_swaps_AMOUNT_IN.e94b624204": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_IN", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_sushi", "fqn": ["harmony", "sushi", "not_null_sushi__ez_sushi_swaps_AMOUNT_IN"], "unique_id": "test.harmony.not_null_sushi__ez_sushi_swaps_AMOUNT_IN.e94b624204", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_sushi__ez_sushi_swaps_AMOUNT_IN.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "not_null_sushi__ez_sushi_swaps_AMOUNT_IN", "alias": "ez_sushi_swaps_AMOUNT_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/not_null_sushi__ez_sushi_swaps_AMOUNT_IN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.5244107, "compiled_code": "\n    \n    \n\n\n\nselect AMOUNT_IN\nfrom HARMONY.sushi.ez_sushi_swaps\nwhere AMOUNT_IN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_IN", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN__NUMBER__FLOAT.8c21fa4f5a": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_610ce22d33e93b17c400c2b290a599f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN__NUMBER__FLOAT"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN__NUMBER__FLOAT.8c21fa4f5a", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_610ce22d33e93b17c400c2b290a599f4\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_610ce22d33e93b17c400c2b290a599f4.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN__NUMBER__FLOAT", "alias": "ez_sushi_swaps_AMOUNT_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_610ce22d33e93b17c400c2b290a599f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_610ce22d33e93b17c400c2b290a599f4"}, "created_at": 1676639820.5264044, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_IN", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.not_null_sushi__ez_sushi_swaps_AMOUNT_OUT.a7df9dc6fc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_sushi", "fqn": ["harmony", "sushi", "not_null_sushi__ez_sushi_swaps_AMOUNT_OUT"], "unique_id": "test.harmony.not_null_sushi__ez_sushi_swaps_AMOUNT_OUT.a7df9dc6fc", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_sushi__ez_sushi_swaps_AMOUNT_OUT.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "not_null_sushi__ez_sushi_swaps_AMOUNT_OUT", "alias": "ez_sushi_swaps_AMOUNT_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/not_null_sushi__ez_sushi_swaps_AMOUNT_OUT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.5327232, "compiled_code": "\n    \n    \n\n\n\nselect AMOUNT_OUT\nfrom HARMONY.sushi.ez_sushi_swaps\nwhere AMOUNT_OUT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_OUT", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT__NUMBER__FLOAT.6b7f01837a": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6c271a39473f081fd3c64fdcd08fd35f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT__NUMBER__FLOAT"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT__NUMBER__FLOAT.6b7f01837a", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c271a39473f081fd3c64fdcd08fd35f\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_6c271a39473f081fd3c64fdcd08fd35f.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT__NUMBER__FLOAT", "alias": "ez_sushi_swaps_AMOUNT_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_6c271a39473f081fd3c64fdcd08fd35f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6c271a39473f081fd3c64fdcd08fd35f"}, "created_at": 1676639820.5346975, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_OUT", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.d86443d5f9": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN_USD", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ab41a50b905845fed22fae4e6a01082e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN_USD__NUMBER__FLOAT"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.d86443d5f9", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ab41a50b905845fed22fae4e6a01082e\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_ab41a50b905845fed22fae4e6a01082e.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN_USD__NUMBER__FLOAT", "alias": "ez_sushi_swaps_AMOUNT_IN_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_ab41a50b905845fed22fae4e6a01082e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ab41a50b905845fed22fae4e6a01082e"}, "created_at": 1676639820.5410128, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_IN_USD", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.6b03ebe0d3": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT_USD", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8e63e84f7666e000b5302788c453b772", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.6b03ebe0d3", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8e63e84f7666e000b5302788c453b772\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_8e63e84f7666e000b5302788c453b772.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT", "alias": "ez_sushi_swaps_AMOUNT_OUT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_8e63e84f7666e000b5302788c453b772.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8e63e84f7666e000b5302788c453b772"}, "created_at": 1676639820.5472524, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_OUT_USD", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.not_null_sushi__ez_sushi_swaps_TOKEN_IN.b89e733da7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_sushi", "fqn": ["harmony", "sushi", "not_null_sushi__ez_sushi_swaps_TOKEN_IN"], "unique_id": "test.harmony.not_null_sushi__ez_sushi_swaps_TOKEN_IN.b89e733da7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_sushi__ez_sushi_swaps_TOKEN_IN.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "not_null_sushi__ez_sushi_swaps_TOKEN_IN", "alias": "ez_sushi_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/not_null_sushi__ez_sushi_swaps_TOKEN_IN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.5531962, "compiled_code": "\n    \n    \n\n\n\nselect TOKEN_IN\nfrom HARMONY.sushi.ez_sushi_swaps\nwhere TOKEN_IN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_IN", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.9c3856914a": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0cd878031a36ccf1cc2f96c55f61cb2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_IN__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.9c3856914a", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0cd878031a36ccf1cc2f96c55f61cb2b\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_0cd878031a36ccf1cc2f96c55f61cb2b.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_IN__0_xX_0_9a_fA_F_", "alias": "ez_sushi_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_0cd878031a36ccf1cc2f96c55f61cb2b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0cd878031a36ccf1cc2f96c55f61cb2b"}, "created_at": 1676639820.5554686, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_IN, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.sushi.ez_sushi_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_IN", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.not_null_sushi__ez_sushi_swaps_TOKEN_OUT.564efc5972": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_sushi", "fqn": ["harmony", "sushi", "not_null_sushi__ez_sushi_swaps_TOKEN_OUT"], "unique_id": "test.harmony.not_null_sushi__ez_sushi_swaps_TOKEN_OUT.564efc5972", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_sushi__ez_sushi_swaps_TOKEN_OUT.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "not_null_sushi__ez_sushi_swaps_TOKEN_OUT", "alias": "ez_sushi_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/not_null_sushi__ez_sushi_swaps_TOKEN_OUT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.5614803, "compiled_code": "\n    \n    \n\n\n\nselect TOKEN_OUT\nfrom HARMONY.sushi.ez_sushi_swaps\nwhere TOKEN_OUT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_OUT", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.31674c7bd2": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1965ff4d2f4625ad54a8a637284f7c62", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.31674c7bd2", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1965ff4d2f4625ad54a8a637284f7c62\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_1965ff4d2f4625ad54a8a637284f7c62.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_", "alias": "ez_sushi_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_1965ff4d2f4625ad54a8a637284f7c62.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1965ff4d2f4625ad54a8a637284f7c62"}, "created_at": 1676639820.5637052, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_OUT, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.sushi.ez_sushi_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_OUT", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_IN__STRING__VARCHAR.e48cedcabd": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_IN", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d4510b13239025b697299206e4cd7098", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_IN__STRING__VARCHAR"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_IN__STRING__VARCHAR.e48cedcabd", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d4510b13239025b697299206e4cd7098\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_d4510b13239025b697299206e4cd7098.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_IN__STRING__VARCHAR", "alias": "ez_sushi_swaps_SYMBOL_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_d4510b13239025b697299206e4cd7098.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d4510b13239025b697299206e4cd7098"}, "created_at": 1676639820.5697038, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_IN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL_IN", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_OUT__STRING__VARCHAR.150a3c5ff1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_898cee26b52681be1aa5bd1e5ab01eff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_OUT__STRING__VARCHAR"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_OUT__STRING__VARCHAR.150a3c5ff1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_898cee26b52681be1aa5bd1e5ab01eff\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_898cee26b52681be1aa5bd1e5ab01eff.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_OUT__STRING__VARCHAR", "alias": "ez_sushi_swaps_SYMBOL_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_898cee26b52681be1aa5bd1e5ab01eff.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_898cee26b52681be1aa5bd1e5ab01eff"}, "created_at": 1676639820.575927, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_OUT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL_OUT", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.not_null_sushi__ez_sushi_swaps_SENDER.fcc63b82a8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP > '2021-08-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_sushi", "fqn": ["harmony", "sushi", "not_null_sushi__ez_sushi_swaps_SENDER"], "unique_id": "test.harmony.not_null_sushi__ez_sushi_swaps_SENDER.fcc63b82a8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP > '2021-08-01'\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_sushi__ez_sushi_swaps_SENDER.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "not_null_sushi__ez_sushi_swaps_SENDER", "alias": "ez_sushi_swaps_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/not_null_sushi__ez_sushi_swaps_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP > '2021-08-01'"}, "created_at": 1676639820.582631, "compiled_code": "\n    \n    \n\n\n\nselect SENDER\nfrom (select * from HARMONY.sushi.ez_sushi_swaps where BLOCK_TIMESTAMP > '2021-08-01') dbt_subquery\nwhere SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SENDER", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_SENDER__0_xX_0_9a_fA_F_.fb158a3920": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SENDER", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b2c187d042f04541627f977d40dc95ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_SENDER__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_SENDER__0_xX_0_9a_fA_F_.fb158a3920", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b2c187d042f04541627f977d40dc95ac\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_b2c187d042f04541627f977d40dc95ac.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_SENDER__0_xX_0_9a_fA_F_", "alias": "ez_sushi_swaps_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_b2c187d042f04541627f977d40dc95ac.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b2c187d042f04541627f977d40dc95ac"}, "created_at": 1676639820.5846276, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(SENDER, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.sushi.ez_sushi_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SENDER", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.not_null_sushi__ez_sushi_swaps_TX_TO.ee09d3adcf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TO", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_sushi", "fqn": ["harmony", "sushi", "not_null_sushi__ez_sushi_swaps_TX_TO"], "unique_id": "test.harmony.not_null_sushi__ez_sushi_swaps_TX_TO.ee09d3adcf", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_sushi__ez_sushi_swaps_TX_TO.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "not_null_sushi__ez_sushi_swaps_TX_TO", "alias": "ez_sushi_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/not_null_sushi__ez_sushi_swaps_TX_TO.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.590917, "compiled_code": "\n    \n    \n\n\n\nselect TX_TO\nfrom HARMONY.sushi.ez_sushi_swaps\nwhere TX_TO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TO", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_TO__0_xX_0_9a_fA_F_.efcfd3e73d": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_TO", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bbd49618dc91d6da68c2a6a6b92fa675", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_TO__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_TO__0_xX_0_9a_fA_F_.efcfd3e73d", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bbd49618dc91d6da68c2a6a6b92fa675\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_bbd49618dc91d6da68c2a6a6b92fa675.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_TO__0_xX_0_9a_fA_F_", "alias": "ez_sushi_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_bbd49618dc91d6da68c2a6a6b92fa675.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_bbd49618dc91d6da68c2a6a6b92fa675"}, "created_at": 1676639820.5928564, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_TO, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.sushi.ez_sushi_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TO", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_PLATFORM__STRING__VARCHAR.ada792b8af": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f16eb5df60ca0ff054b333e281908171", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_PLATFORM__STRING__VARCHAR"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_PLATFORM__STRING__VARCHAR.ada792b8af", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f16eb5df60ca0ff054b333e281908171\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_f16eb5df60ca0ff054b333e281908171.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_PLATFORM__STRING__VARCHAR", "alias": "ez_sushi_swaps_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_f16eb5df60ca0ff054b333e281908171.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f16eb5df60ca0ff054b333e281908171"}, "created_at": 1676639820.5991282, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.not_null_sushi__ez_sushi_swaps_LOG_ID.f743ccabf8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LOG_ID", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_sushi", "fqn": ["harmony", "sushi", "not_null_sushi__ez_sushi_swaps_LOG_ID"], "unique_id": "test.harmony.not_null_sushi__ez_sushi_swaps_LOG_ID.f743ccabf8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_sushi__ez_sushi_swaps_LOG_ID.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "not_null_sushi__ez_sushi_swaps_LOG_ID", "alias": "ez_sushi_swaps_LOG_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/not_null_sushi__ez_sushi_swaps_LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.605095, "compiled_code": "\n    \n    \n\n\n\nselect LOG_ID\nfrom HARMONY.sushi.ez_sushi_swaps\nwhere LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOG_ID", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.not_null_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS.a2fe4d105f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVM_ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_sushi", "fqn": ["harmony", "sushi", "not_null_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS"], "unique_id": "test.harmony.not_null_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS.a2fe4d105f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "not_null_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS", "alias": "ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/not_null_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6079447, "compiled_code": "\n    \n    \n\n\n\nselect EVM_ORIGIN_FROM_ADDRESS\nfrom HARMONY.sushi.ez_sushi_swaps\nwhere EVM_ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVM_ORIGIN_FROM_ADDRESS", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.632b69e5f5": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "EVM_ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1ef285466b9eeb89b654418903e12e3a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.632b69e5f5", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1ef285466b9eeb89b654418903e12e3a\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_1ef285466b9eeb89b654418903e12e3a.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_1ef285466b9eeb89b654418903e12e3a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1ef285466b9eeb89b654418903e12e3a"}, "created_at": 1676639820.6099179, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(EVM_ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.sushi.ez_sushi_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVM_ORIGIN_FROM_ADDRESS", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.9068afc1bd": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "EVM_ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c68b0e2dd138b173b09ff2d0f2872de1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["harmony", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.9068afc1bd", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c68b0e2dd138b173b09ff2d0f2872de1\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_c68b0e2dd138b173b09ff2d0f2872de1.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_sushi_swaps_EVM_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_expectations_expect_column_c68b0e2dd138b173b09ff2d0f2872de1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c68b0e2dd138b173b09ff2d0f2872de1"}, "created_at": 1676639820.6161838, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(EVM_ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.sushi.ez_sushi_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVM_ORIGIN_TO_ADDRESS", "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.dbt_utils_unique_combination_of_columns_sushi__ez_sushi_swaps_LOG_ID.5d0b1819b0": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["LOG_ID"], "model": "{{ get_where_subquery(ref('sushi__ez_sushi_swaps')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushi__ez_sushi_swaps"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_aaae46683b7779feaa65cb5d8f243ca1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_utils_unique_combination_of_columns_sushi", "fqn": ["harmony", "sushi", "dbt_utils_unique_combination_of_columns_sushi__ez_sushi_swaps_LOG_ID"], "unique_id": "test.harmony.dbt_utils_unique_combination_of_columns_sushi__ez_sushi_swaps_LOG_ID.5d0b1819b0", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_aaae46683b7779feaa65cb5d8f243ca1\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_utils_unique_combination_o_aaae46683b7779feaa65cb5d8f243ca1.sql", "original_file_path": "models/sushi/sushi__ez_sushi_swaps.yml", "name": "dbt_utils_unique_combination_of_columns_sushi__ez_sushi_swaps_LOG_ID", "alias": "ez_sushi_swaps_LOG_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_sushi_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/sushi/sushi__ez_sushi_swaps.yml/dbt_utils_unique_combination_o_aaae46683b7779feaa65cb5d8f243ca1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_aaae46683b7779feaa65cb5d8f243ca1"}, "created_at": 1676639820.6221836, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        LOG_ID\n    from HARMONY.sushi.ez_sushi_swaps\n    group by LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.sushi__ez_sushi_swaps"}, "test.harmony.unique_silver__tokens_token_address.84d981b6ce": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "token_address", "model": "{{ get_where_subquery(ref('silver__tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "unique_silver", "fqn": ["harmony", "silver", "unique_silver__tokens_token_address"], "unique_id": "test.harmony.unique_silver__tokens_token_address.84d981b6ce", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "unique_silver__tokens_token_address.sql", "original_file_path": "models/silver/silver__tokens.yml", "name": "unique_silver__tokens_token_address", "alias": "tokens_token_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokens.yml/unique_silver__tokens_token_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6377397, "compiled_code": "\n    \n    \n\nselect\n    token_address as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.silver.tokens\nwhere token_address is not null\ngroup by token_address\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_address", "file_key_name": "models.silver__tokens"}, "test.harmony.not_null_silver__tokens_token_address.cdb9d76349": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_address", "model": "{{ get_where_subquery(ref('silver__tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokens_token_address"], "unique_id": "test.harmony.not_null_silver__tokens_token_address.cdb9d76349", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokens_token_address.sql", "original_file_path": "models/silver/silver__tokens.yml", "name": "not_null_silver__tokens_token_address", "alias": "tokens_token_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokens.yml/not_null_silver__tokens_token_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6397197, "compiled_code": "\n    \n    \n\n\n\nselect token_address\nfrom HARMONY.silver.tokens\nwhere token_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_address", "file_key_name": "models.silver__tokens"}, "test.harmony.not_null_silver__tokens_token_symbol.fa00cdf7a3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_symbol", "model": "{{ get_where_subquery(ref('silver__tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokens_token_symbol"], "unique_id": "test.harmony.not_null_silver__tokens_token_symbol.fa00cdf7a3", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokens_token_symbol.sql", "original_file_path": "models/silver/silver__tokens.yml", "name": "not_null_silver__tokens_token_symbol", "alias": "tokens_token_symbol", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokens.yml/not_null_silver__tokens_token_symbol.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6420052, "compiled_code": "\n    \n    \n\n\n\nselect token_symbol\nfrom HARMONY.silver.tokens\nwhere token_symbol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_symbol", "file_key_name": "models.silver__tokens"}, "test.harmony.not_null_silver__tokens_decimals.51d3587826": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "decimals", "model": "{{ get_where_subquery(ref('silver__tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokens_decimals"], "unique_id": "test.harmony.not_null_silver__tokens_decimals.51d3587826", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokens_decimals.sql", "original_file_path": "models/silver/silver__tokens.yml", "name": "not_null_silver__tokens_decimals", "alias": "tokens_decimals", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokens.yml/not_null_silver__tokens_decimals.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6439567, "compiled_code": "\n    \n    \n\n\n\nselect decimals\nfrom HARMONY.silver.tokens\nwhere decimals is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "decimals", "file_key_name": "models.silver__tokens"}, "test.harmony.not_null_silver__tokenprice_from_swaps_block_date.dc0ad7005d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_date", "model": "{{ get_where_subquery(ref('silver__tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprice_from_swaps_block_date"], "unique_id": "test.harmony.not_null_silver__tokenprice_from_swaps_block_date.dc0ad7005d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprice_from_swaps_block_date.sql", "original_file_path": "models/silver/silver__tokenprice_from_swaps.yml", "name": "not_null_silver__tokenprice_from_swaps_block_date", "alias": "tokenprice_from_swaps_block_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprice_from_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprice_from_swaps.yml/not_null_silver__tokenprice_from_swaps_block_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6520364, "compiled_code": "\n    \n    \n\n\n\nselect block_date\nfrom HARMONY.silver.tokenprice_from_swaps\nwhere block_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_date", "file_key_name": "models.silver__tokenprice_from_swaps"}, "test.harmony.not_null_silver__tokenprice_from_swaps_token_address.aa7359019b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_address", "model": "{{ get_where_subquery(ref('silver__tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprice_from_swaps_token_address"], "unique_id": "test.harmony.not_null_silver__tokenprice_from_swaps_token_address.aa7359019b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprice_from_swaps_token_address.sql", "original_file_path": "models/silver/silver__tokenprice_from_swaps.yml", "name": "not_null_silver__tokenprice_from_swaps_token_address", "alias": "tokenprice_from_swaps_token_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprice_from_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprice_from_swaps.yml/not_null_silver__tokenprice_from_swaps_token_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6540532, "compiled_code": "\n    \n    \n\n\n\nselect token_address\nfrom HARMONY.silver.tokenprice_from_swaps\nwhere token_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_address", "file_key_name": "models.silver__tokenprice_from_swaps"}, "test.harmony.not_null_silver__tokenprice_from_swaps_token_symbol.908ae9c22c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_symbol", "model": "{{ get_where_subquery(ref('silver__tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprice_from_swaps_token_symbol"], "unique_id": "test.harmony.not_null_silver__tokenprice_from_swaps_token_symbol.908ae9c22c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprice_from_swaps_token_symbol.sql", "original_file_path": "models/silver/silver__tokenprice_from_swaps.yml", "name": "not_null_silver__tokenprice_from_swaps_token_symbol", "alias": "tokenprice_from_swaps_token_symbol", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprice_from_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprice_from_swaps.yml/not_null_silver__tokenprice_from_swaps_token_symbol.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6560018, "compiled_code": "\n    \n    \n\n\n\nselect token_symbol\nfrom HARMONY.silver.tokenprice_from_swaps\nwhere token_symbol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_symbol", "file_key_name": "models.silver__tokenprice_from_swaps"}, "test.harmony.not_null_silver__tokenprice_from_swaps_usd_price.f0b57a6fa3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "usd_price", "model": "{{ get_where_subquery(ref('silver__tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprice_from_swaps_usd_price"], "unique_id": "test.harmony.not_null_silver__tokenprice_from_swaps_usd_price.f0b57a6fa3", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprice_from_swaps_usd_price.sql", "original_file_path": "models/silver/silver__tokenprice_from_swaps.yml", "name": "not_null_silver__tokenprice_from_swaps_usd_price", "alias": "tokenprice_from_swaps_usd_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprice_from_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprice_from_swaps.yml/not_null_silver__tokenprice_from_swaps_usd_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.657963, "compiled_code": "\n    \n    \n\n\n\nselect usd_price\nfrom HARMONY.silver.tokenprice_from_swaps\nwhere usd_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "usd_price", "file_key_name": "models.silver__tokenprice_from_swaps"}, "test.harmony.not_null_silver__tokenprice_from_swaps_usd_volume.57ba30eec5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "usd_volume", "model": "{{ get_where_subquery(ref('silver__tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprice_from_swaps_usd_volume"], "unique_id": "test.harmony.not_null_silver__tokenprice_from_swaps_usd_volume.57ba30eec5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprice_from_swaps_usd_volume.sql", "original_file_path": "models/silver/silver__tokenprice_from_swaps.yml", "name": "not_null_silver__tokenprice_from_swaps_usd_volume", "alias": "tokenprice_from_swaps_usd_volume", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprice_from_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprice_from_swaps.yml/not_null_silver__tokenprice_from_swaps_usd_volume.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6599433, "compiled_code": "\n    \n    \n\n\n\nselect usd_volume\nfrom HARMONY.silver.tokenprice_from_swaps\nwhere usd_volume is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "usd_volume", "file_key_name": "models.silver__tokenprice_from_swaps"}, "test.harmony.not_null_silver__tokenprice_from_swaps_token_volume.12b6440929": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_volume", "model": "{{ get_where_subquery(ref('silver__tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprice_from_swaps_token_volume"], "unique_id": "test.harmony.not_null_silver__tokenprice_from_swaps_token_volume.12b6440929", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprice_from_swaps_token_volume.sql", "original_file_path": "models/silver/silver__tokenprice_from_swaps.yml", "name": "not_null_silver__tokenprice_from_swaps_token_volume", "alias": "tokenprice_from_swaps_token_volume", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprice_from_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprice_from_swaps.yml/not_null_silver__tokenprice_from_swaps_token_volume.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.661932, "compiled_code": "\n    \n    \n\n\n\nselect token_volume\nfrom HARMONY.silver.tokenprice_from_swaps\nwhere token_volume is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_volume", "file_key_name": "models.silver__tokenprice_from_swaps"}, "test.harmony.not_null_silver__tokenprice_from_swaps_volume_for_price.59917fdae7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "volume_for_price", "model": "{{ get_where_subquery(ref('silver__tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprice_from_swaps_volume_for_price"], "unique_id": "test.harmony.not_null_silver__tokenprice_from_swaps_volume_for_price.59917fdae7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprice_from_swaps_volume_for_price.sql", "original_file_path": "models/silver/silver__tokenprice_from_swaps.yml", "name": "not_null_silver__tokenprice_from_swaps_volume_for_price", "alias": "tokenprice_from_swaps_volume_for_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprice_from_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprice_from_swaps.yml/not_null_silver__tokenprice_from_swaps_volume_for_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6641505, "compiled_code": "\n    \n    \n\n\n\nselect volume_for_price\nfrom HARMONY.silver.tokenprice_from_swaps\nwhere volume_for_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "volume_for_price", "file_key_name": "models.silver__tokenprice_from_swaps"}, "test.harmony.not_null_silver__tokenprice_from_swaps_key.441c86c2d6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "key", "model": "{{ get_where_subquery(ref('silver__tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprice_from_swaps_key"], "unique_id": "test.harmony.not_null_silver__tokenprice_from_swaps_key.441c86c2d6", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprice_from_swaps_key.sql", "original_file_path": "models/silver/silver__tokenprice_from_swaps.yml", "name": "not_null_silver__tokenprice_from_swaps_key", "alias": "tokenprice_from_swaps_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprice_from_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprice_from_swaps.yml/not_null_silver__tokenprice_from_swaps_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.666107, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom HARMONY.silver.tokenprice_from_swaps\nwhere key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "key", "file_key_name": "models.silver__tokenprice_from_swaps"}, "test.harmony.unique_silver__tokenprice_from_swaps_key.5d8eb9c8b5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "key", "model": "{{ get_where_subquery(ref('silver__tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "unique_silver", "fqn": ["harmony", "silver", "unique_silver__tokenprice_from_swaps_key"], "unique_id": "test.harmony.unique_silver__tokenprice_from_swaps_key.5d8eb9c8b5", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "unique_silver__tokenprice_from_swaps_key.sql", "original_file_path": "models/silver/silver__tokenprice_from_swaps.yml", "name": "unique_silver__tokenprice_from_swaps_key", "alias": "tokenprice_from_swaps_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprice_from_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprice_from_swaps.yml/unique_silver__tokenprice_from_swaps_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6679938, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.silver.tokenprice_from_swaps\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "key", "file_key_name": "models.silver__tokenprice_from_swaps"}, "test.harmony.not_null_silver__tokenprice_from_swaps_lookup_round.a59b096081": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "lookup_round", "model": "{{ get_where_subquery(ref('silver__tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprice_from_swaps_lookup_round"], "unique_id": "test.harmony.not_null_silver__tokenprice_from_swaps_lookup_round.a59b096081", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprice_from_swaps_lookup_round.sql", "original_file_path": "models/silver/silver__tokenprice_from_swaps.yml", "name": "not_null_silver__tokenprice_from_swaps_lookup_round", "alias": "tokenprice_from_swaps_lookup_round", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprice_from_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprice_from_swaps.yml/not_null_silver__tokenprice_from_swaps_lookup_round.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6699252, "compiled_code": "\n    \n    \n\n\n\nselect lookup_round\nfrom HARMONY.silver.tokenprice_from_swaps\nwhere lookup_round is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "lookup_round", "file_key_name": "models.silver__tokenprice_from_swaps"}, "test.harmony.not_null_silver__swaps_block_timestamp.6419130b6a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__swaps_block_timestamp"], "unique_id": "test.harmony.not_null_silver__swaps_block_timestamp.6419130b6a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__swaps_block_timestamp.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_block_timestamp", "alias": "swaps_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/not_null_silver__swaps_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.68089, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom HARMONY.silver.swaps\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.silver__swaps"}, "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_block_timestamp__day__1.067ceccffb": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_51d41dee44439f9d6ae444df315dd6cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_block_timestamp__day__1"], "unique_id": "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_block_timestamp__day__1.067ceccffb", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_51d41dee44439f9d6ae444df315dd6cc\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_row_va_51d41dee44439f9d6ae444df315dd6cc.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_block_timestamp__day__1", "alias": "swaps_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/dbt_expectations_expect_row_va_51d41dee44439f9d6ae444df315dd6cc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_51d41dee44439f9d6ae444df315dd6cc"}, "created_at": 1676639820.6831348, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(block_timestamp as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        HARMONY.silver.swaps\n    where\n        -- to exclude erroneous future dates\n        cast(block_timestamp as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.silver__swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__swaps_block_timestamp__TIMESTAMP_NTZ.670b2383a8": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c8d27de9af20dad198be10944bf9611d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__swaps_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__swaps_block_timestamp__TIMESTAMP_NTZ.670b2383a8", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c8d27de9af20dad198be10944bf9611d\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_c8d27de9af20dad198be10944bf9611d.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__swaps_block_timestamp__TIMESTAMP_NTZ", "alias": "swaps_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/dbt_expectations_expect_column_c8d27de9af20dad198be10944bf9611d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c8d27de9af20dad198be10944bf9611d"}, "created_at": 1676639820.6910233, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN0_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT0IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT1IN' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT0OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT1OUT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN1_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.silver__swaps"}, "test.harmony.not_null_silver__swaps_log_id.bc6d550699": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__swaps_log_id"], "unique_id": "test.harmony.not_null_silver__swaps_log_id.bc6d550699", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__swaps_log_id.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_log_id", "alias": "swaps_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/not_null_silver__swaps_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6966522, "compiled_code": "\n    \n    \n\n\n\nselect log_id\nfrom HARMONY.silver.swaps\nwhere log_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.silver__swaps"}, "test.harmony.unique_silver__swaps_log_id.38d2ba9755": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "unique_silver", "fqn": ["harmony", "silver", "unique_silver__swaps_log_id"], "unique_id": "test.harmony.unique_silver__swaps_log_id.38d2ba9755", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "unique_silver__swaps_log_id.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "unique_silver__swaps_log_id", "alias": "swaps_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/unique_silver__swaps_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.6989155, "compiled_code": "\n    \n    \n\nselect\n    log_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.silver.swaps\nwhere log_id is not null\ngroup by log_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.silver__swaps"}, "test.harmony.not_null_silver__swaps_tx_hash.dbda80b98f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__swaps_tx_hash"], "unique_id": "test.harmony.not_null_silver__swaps_tx_hash.dbda80b98f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__swaps_tx_hash.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_tx_hash", "alias": "swaps_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/not_null_silver__swaps_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7008433, "compiled_code": "\n    \n    \n\n\n\nselect tx_hash\nfrom HARMONY.silver.swaps\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.silver__swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_tx_hash__0_xX_0_9a_fA_F_.b5a6ecac1f": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "tx_hash", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_11dad77ebb3166e8f41afbc1f7bdda25", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__swaps_tx_hash__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_tx_hash__0_xX_0_9a_fA_F_.b5a6ecac1f", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_11dad77ebb3166e8f41afbc1f7bdda25\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_11dad77ebb3166e8f41afbc1f7bdda25.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__swaps_tx_hash__0_xX_0_9a_fA_F_", "alias": "swaps_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/dbt_expectations_expect_column_11dad77ebb3166e8f41afbc1f7bdda25.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_11dad77ebb3166e8f41afbc1f7bdda25"}, "created_at": 1676639820.7027488, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(tx_hash, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.silver.swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.silver__swaps"}, "test.harmony.not_null_silver__swaps_pool_address.a0f27eb1f4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__swaps_pool_address"], "unique_id": "test.harmony.not_null_silver__swaps_pool_address.a0f27eb1f4", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__swaps_pool_address.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_pool_address", "alias": "swaps_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/not_null_silver__swaps_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7090857, "compiled_code": "\n    \n    \n\n\n\nselect pool_address\nfrom HARMONY.silver.swaps\nwhere pool_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token0_address__0_xX_0_9a_fA_F_.0a8c00aa03": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "token0_address", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8bd4351024c921fa6c3f039a99c02763", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token0_address__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token0_address__0_xX_0_9a_fA_F_.0a8c00aa03", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8bd4351024c921fa6c3f039a99c02763\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_8bd4351024c921fa6c3f039a99c02763.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token0_address__0_xX_0_9a_fA_F_", "alias": "swaps_token0_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/dbt_expectations_expect_column_8bd4351024c921fa6c3f039a99c02763.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8bd4351024c921fa6c3f039a99c02763"}, "created_at": 1676639820.7110472, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(token0_address, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.silver.swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token0_address", "file_key_name": "models.silver__swaps"}, "test.harmony.not_null_silver__swaps_amount0Out.cda2e57c17": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount0Out", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__swaps_amount0Out"], "unique_id": "test.harmony.not_null_silver__swaps_amount0Out.cda2e57c17", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__swaps_amount0Out.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_amount0Out", "alias": "swaps_amount0Out", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/not_null_silver__swaps_amount0Out.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7173135, "compiled_code": "\n    \n    \n\n\n\nselect amount0Out\nfrom HARMONY.silver.swaps\nwhere amount0Out is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount0Out", "file_key_name": "models.silver__swaps"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token1_address__0_xX_0_9a_fA_F_.e54af594c1": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "token1_address", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_727c450d2d091c532c79e951c30cec39", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token1_address__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token1_address__0_xX_0_9a_fA_F_.e54af594c1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_727c450d2d091c532c79e951c30cec39\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_727c450d2d091c532c79e951c30cec39.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token1_address__0_xX_0_9a_fA_F_", "alias": "swaps_token1_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/dbt_expectations_expect_column_727c450d2d091c532c79e951c30cec39.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_727c450d2d091c532c79e951c30cec39"}, "created_at": 1676639820.71932, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(token1_address, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.silver.swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token1_address", "file_key_name": "models.silver__swaps"}, "test.harmony.not_null_silver__swaps_amount1In.e0bc8964a5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount1In", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__swaps_amount1In"], "unique_id": "test.harmony.not_null_silver__swaps_amount1In.e0bc8964a5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__swaps_amount1In.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_amount1In", "alias": "swaps_amount1In", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/not_null_silver__swaps_amount1In.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7260756, "compiled_code": "\n    \n    \n\n\n\nselect amount1In\nfrom HARMONY.silver.swaps\nwhere amount1In is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount1In", "file_key_name": "models.silver__swaps"}, "test.harmony.not_null_silver__swaps_amount1Out.42932415b4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount1Out", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__swaps_amount1Out"], "unique_id": "test.harmony.not_null_silver__swaps_amount1Out.42932415b4", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__swaps_amount1Out.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_amount1Out", "alias": "swaps_amount1Out", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/not_null_silver__swaps_amount1Out.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7280023, "compiled_code": "\n    \n    \n\n\n\nselect amount1Out\nfrom HARMONY.silver.swaps\nwhere amount1Out is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount1Out", "file_key_name": "models.silver__swaps"}, "test.harmony.not_null_silver__swaps_from_address.c1fcaa4685": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_address", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__swaps_from_address"], "unique_id": "test.harmony.not_null_silver__swaps_from_address.c1fcaa4685", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__swaps_from_address.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_from_address", "alias": "swaps_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/not_null_silver__swaps_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.729933, "compiled_code": "\n    \n    \n\n\n\nselect from_address\nfrom HARMONY.silver.swaps\nwhere from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_address", "file_key_name": "models.silver__swaps"}, "test.harmony.not_null_silver__swaps_to_address.7917716776": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_address", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__swaps_to_address"], "unique_id": "test.harmony.not_null_silver__swaps_to_address.7917716776", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__swaps_to_address.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_to_address", "alias": "swaps_to_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/not_null_silver__swaps_to_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.731843, "compiled_code": "\n    \n    \n\n\n\nselect to_address\nfrom HARMONY.silver.swaps\nwhere to_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "to_address", "file_key_name": "models.silver__swaps"}, "test.harmony.not_null_silver__swaps__inserted_timestamp.8c6bc00b4f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_inserted_timestamp", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__swaps__inserted_timestamp"], "unique_id": "test.harmony.not_null_silver__swaps__inserted_timestamp.8c6bc00b4f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__swaps__inserted_timestamp.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps__inserted_timestamp", "alias": "swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/not_null_silver__swaps__inserted_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7337685, "compiled_code": "\n    \n    \n\n\n\nselect _inserted_timestamp\nfrom HARMONY.silver.swaps\nwhere _inserted_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_inserted_timestamp", "file_key_name": "models.silver__swaps"}, "test.harmony.dbt_utils_unique_combination_of_columns_silver__swaps_LOG_ID.b46ef73616": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["LOG_ID"], "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["harmony", "silver", "dbt_utils_unique_combination_of_columns_silver__swaps_LOG_ID"], "unique_id": "test.harmony.dbt_utils_unique_combination_of_columns_silver__swaps_LOG_ID.b46ef73616", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_utils_unique_combination_of_columns_silver__swaps_LOG_ID.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_LOG_ID", "alias": "swaps_LOG_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__swaps.yml/dbt_utils_unique_combination_of_columns_silver__swaps_LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.735978, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        LOG_ID\n    from HARMONY.silver.swaps\n    group by LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__swaps"}, "test.harmony.unique_silver__liquidity_pools_pool_address.d1c5d9e379": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__liquidity_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__liquidity_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "unique_silver", "fqn": ["harmony", "silver", "unique_silver__liquidity_pools_pool_address"], "unique_id": "test.harmony.unique_silver__liquidity_pools_pool_address.d1c5d9e379", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "unique_silver__liquidity_pools_pool_address.sql", "original_file_path": "models/silver/silver__liquidity_pools.yml", "name": "unique_silver__liquidity_pools_pool_address", "alias": "liquidity_pools_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__liquidity_pools.yml/unique_silver__liquidity_pools_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7443476, "compiled_code": "\n    \n    \n\nselect\n    pool_address as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.silver.liquidity_pools\nwhere pool_address is not null\ngroup by pool_address\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__liquidity_pools"}, "test.harmony.not_null_silver__liquidity_pools_pool_address.fc5bad21fb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__liquidity_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__liquidity_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__liquidity_pools_pool_address"], "unique_id": "test.harmony.not_null_silver__liquidity_pools_pool_address.fc5bad21fb", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__liquidity_pools_pool_address.sql", "original_file_path": "models/silver/silver__liquidity_pools.yml", "name": "not_null_silver__liquidity_pools_pool_address", "alias": "liquidity_pools_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__liquidity_pools.yml/not_null_silver__liquidity_pools_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7466908, "compiled_code": "\n    \n    \n\n\n\nselect pool_address\nfrom HARMONY.silver.liquidity_pools\nwhere pool_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.silver__liquidity_pools"}, "test.harmony.not_null_silver__liquidity_pools_pool_name.eac305bdc9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_name", "model": "{{ get_where_subquery(ref('silver__liquidity_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__liquidity_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__liquidity_pools_pool_name"], "unique_id": "test.harmony.not_null_silver__liquidity_pools_pool_name.eac305bdc9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__liquidity_pools_pool_name.sql", "original_file_path": "models/silver/silver__liquidity_pools.yml", "name": "not_null_silver__liquidity_pools_pool_name", "alias": "liquidity_pools_pool_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__liquidity_pools.yml/not_null_silver__liquidity_pools_pool_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7486353, "compiled_code": "\n    \n    \n\n\n\nselect pool_name\nfrom HARMONY.silver.liquidity_pools\nwhere pool_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_name", "file_key_name": "models.silver__liquidity_pools"}, "test.harmony.not_null_silver__liquidity_pools_token0.b5814b0316": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "token0", "model": "{{ get_where_subquery(ref('silver__liquidity_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__liquidity_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__liquidity_pools_token0"], "unique_id": "test.harmony.not_null_silver__liquidity_pools_token0.b5814b0316", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__liquidity_pools_token0.sql", "original_file_path": "models/silver/silver__liquidity_pools.yml", "name": "not_null_silver__liquidity_pools_token0", "alias": "liquidity_pools_token0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__liquidity_pools.yml/not_null_silver__liquidity_pools_token0.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7505708, "compiled_code": "\n    \n    \n\n\n\nselect token0\nfrom HARMONY.silver.liquidity_pools\nwhere token0 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token0", "file_key_name": "models.silver__liquidity_pools"}, "test.harmony.not_null_silver__liquidity_pools_token1.a1beb20c06": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "token1", "model": "{{ get_where_subquery(ref('silver__liquidity_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__liquidity_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__liquidity_pools_token1"], "unique_id": "test.harmony.not_null_silver__liquidity_pools_token1.a1beb20c06", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__liquidity_pools_token1.sql", "original_file_path": "models/silver/silver__liquidity_pools.yml", "name": "not_null_silver__liquidity_pools_token1", "alias": "liquidity_pools_token1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__liquidity_pools.yml/not_null_silver__liquidity_pools_token1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7524934, "compiled_code": "\n    \n    \n\n\n\nselect token1\nfrom HARMONY.silver.liquidity_pools\nwhere token1 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token1", "file_key_name": "models.silver__liquidity_pools"}, "test.harmony.dbt_utils_unique_combination_of_columns_silver__liquidity_pools_POOL_ADDRESS.87ef1a5a30": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["POOL_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__liquidity_pools')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__liquidity_pools"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b49af88d8fa277596908725e4df74a51", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["harmony", "silver", "dbt_utils_unique_combination_of_columns_silver__liquidity_pools_POOL_ADDRESS"], "unique_id": "test.harmony.dbt_utils_unique_combination_of_columns_silver__liquidity_pools_POOL_ADDRESS.87ef1a5a30", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b49af88d8fa277596908725e4df74a51\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_utils_unique_combination_o_b49af88d8fa277596908725e4df74a51.sql", "original_file_path": "models/silver/silver__liquidity_pools.yml", "name": "dbt_utils_unique_combination_of_columns_silver__liquidity_pools_POOL_ADDRESS", "alias": "liquidity_pools_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__liquidity_pools.yml/dbt_utils_unique_combination_o_b49af88d8fa277596908725e4df74a51.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b49af88d8fa277596908725e4df74a51"}, "created_at": 1676639820.754433, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        POOL_ADDRESS\n    from HARMONY.silver.liquidity_pools\n    group by POOL_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__liquidity_pools"}, "test.harmony.unique_silver__logs_log_id.b0534634c1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "unique_silver", "fqn": ["harmony", "silver", "unique_silver__logs_log_id"], "unique_id": "test.harmony.unique_silver__logs_log_id.b0534634c1", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "unique_silver__logs_log_id.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "unique_silver__logs_log_id", "alias": "logs_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/unique_silver__logs_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7678401, "compiled_code": "\n    \n    \n\nselect\n    log_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.silver.logs\nwhere log_id is not null\ngroup by log_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.silver__logs"}, "test.harmony.not_null_silver__logs_log_id.40e84ec907": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__logs_log_id"], "unique_id": "test.harmony.not_null_silver__logs_log_id.40e84ec907", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__logs_log_id.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_log_id", "alias": "logs_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/not_null_silver__logs_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.769806, "compiled_code": "\n    \n    \n\n\n\nselect log_id\nfrom HARMONY.silver.logs\nwhere log_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.silver__logs"}, "test.harmony.not_null_silver__logs_block_id.32225c90cc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__logs_block_id"], "unique_id": "test.harmony.not_null_silver__logs_block_id.32225c90cc", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__logs_block_id.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_block_id", "alias": "logs_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/not_null_silver__logs_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7717676, "compiled_code": "\n    \n    \n\n\n\nselect block_id\nfrom HARMONY.silver.logs\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.silver__logs"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_id__NUMBER.65f9dc93a1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_13c3f2de31dfcef265c25f8e4402cf32", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_id__NUMBER"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_id__NUMBER.65f9dc93a1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_13c3f2de31dfcef265c25f8e4402cf32\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_13c3f2de31dfcef265c25f8e4402cf32.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_id__NUMBER", "alias": "logs_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/dbt_expectations_expect_column_13c3f2de31dfcef265c25f8e4402cf32.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_13c3f2de31dfcef265c25f8e4402cf32"}, "created_at": 1676639820.7736847, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.silver__logs"}, "test.harmony.not_null_silver__logs_block_timestamp.85ba4d96cb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__logs_block_timestamp"], "unique_id": "test.harmony.not_null_silver__logs_block_timestamp.85ba4d96cb", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__logs_block_timestamp.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_block_timestamp", "alias": "logs_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/not_null_silver__logs_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7796338, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom HARMONY.silver.logs\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.silver__logs"}, "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_block_timestamp__day__1.060ac3b8fb": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_cfbbeb5e83d803c0de2db91290d9b30d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_block_timestamp__day__1"], "unique_id": "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_block_timestamp__day__1.060ac3b8fb", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_cfbbeb5e83d803c0de2db91290d9b30d\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_row_va_cfbbeb5e83d803c0de2db91290d9b30d.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_block_timestamp__day__1", "alias": "logs_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/dbt_expectations_expect_row_va_cfbbeb5e83d803c0de2db91290d9b30d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_cfbbeb5e83d803c0de2db91290d9b30d"}, "created_at": 1676639820.7816043, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(block_timestamp as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        HARMONY.silver.logs\n    where\n        -- to exclude erroneous future dates\n        cast(block_timestamp as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.silver__logs"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_timestamp__TIMESTAMP_NTZ.751f70d483": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6d67f148dd9d9994ddc7829b85aec6e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_timestamp__TIMESTAMP_NTZ.751f70d483", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6d67f148dd9d9994ddc7829b85aec6e4\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_6d67f148dd9d9994ddc7829b85aec6e4.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_timestamp__TIMESTAMP_NTZ", "alias": "logs_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/dbt_expectations_expect_column_6d67f148dd9d9994ddc7829b85aec6e4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6d67f148dd9d9994ddc7829b85aec6e4"}, "created_at": 1676639820.7907093, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.silver__logs"}, "test.harmony.not_null_silver__logs_tx_hash.b38748e3fd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__logs_tx_hash"], "unique_id": "test.harmony.not_null_silver__logs_tx_hash.b38748e3fd", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__logs_tx_hash.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_tx_hash", "alias": "logs_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/not_null_silver__logs_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.7966688, "compiled_code": "\n    \n    \n\n\n\nselect tx_hash\nfrom HARMONY.silver.logs\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.silver__logs"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__logs_tx_hash__0_xX_0_9a_fA_F_.92cdfa00ed": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "tx_hash", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c4d04bddc67bb8351503b24ec0a2734c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_tx_hash__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__logs_tx_hash__0_xX_0_9a_fA_F_.92cdfa00ed", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c4d04bddc67bb8351503b24ec0a2734c\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_c4d04bddc67bb8351503b24ec0a2734c.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_tx_hash__0_xX_0_9a_fA_F_", "alias": "logs_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/dbt_expectations_expect_column_c4d04bddc67bb8351503b24ec0a2734c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c4d04bddc67bb8351503b24ec0a2734c"}, "created_at": 1676639820.798678, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(tx_hash, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.silver__logs"}, "test.harmony.not_null_silver__logs_event_index.a3feb87adf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_index", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__logs_event_index"], "unique_id": "test.harmony.not_null_silver__logs_event_index.a3feb87adf", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__logs_event_index.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_event_index", "alias": "logs_event_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/not_null_silver__logs_event_index.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.8050675, "compiled_code": "\n    \n    \n\n\n\nselect event_index\nfrom HARMONY.silver.logs\nwhere event_index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_index", "file_key_name": "models.silver__logs"}, "test.harmony.not_null_silver__logs_evm_contract_address.067f1be309": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "evm_contract_address", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__logs_evm_contract_address"], "unique_id": "test.harmony.not_null_silver__logs_evm_contract_address.067f1be309", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__logs_evm_contract_address.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_evm_contract_address", "alias": "logs_evm_contract_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/not_null_silver__logs_evm_contract_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.807029, "compiled_code": "\n    \n    \n\n\n\nselect evm_contract_address\nfrom HARMONY.silver.logs\nwhere evm_contract_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "evm_contract_address", "file_key_name": "models.silver__logs"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__logs_evm_contract_address__0_xX_0_9a_fA_F_.976fb77467": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "evm_contract_address", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_15e29f5269f623b6e3ffe6abdf62cd55", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_evm_contract_address__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__logs_evm_contract_address__0_xX_0_9a_fA_F_.976fb77467", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_15e29f5269f623b6e3ffe6abdf62cd55\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_15e29f5269f623b6e3ffe6abdf62cd55.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_evm_contract_address__0_xX_0_9a_fA_F_", "alias": "logs_evm_contract_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/dbt_expectations_expect_column_15e29f5269f623b6e3ffe6abdf62cd55.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_15e29f5269f623b6e3ffe6abdf62cd55"}, "created_at": 1676639820.8089728, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(evm_contract_address, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "evm_contract_address", "file_key_name": "models.silver__logs"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_name__STRING__VARCHAR.9b6b8b63c2": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "event_name", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_589829ae5f04a82cc81a198a1b95e0cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_name__STRING__VARCHAR"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_name__STRING__VARCHAR.9b6b8b63c2", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_589829ae5f04a82cc81a198a1b95e0cb\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_589829ae5f04a82cc81a198a1b95e0cb.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_name__STRING__VARCHAR", "alias": "logs_event_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/dbt_expectations_expect_column_589829ae5f04a82cc81a198a1b95e0cb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_589829ae5f04a82cc81a198a1b95e0cb"}, "created_at": 1676639820.81526, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_name", "file_key_name": "models.silver__logs"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_inputs__OBJECT__VARIANT.2b089c53c7": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT", "VARIANT"], "column_name": "event_inputs", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_778d643b1329aa7352ed3e5d0ae6ae7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_inputs__OBJECT__VARIANT"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_inputs__OBJECT__VARIANT.2b089c53c7", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_778d643b1329aa7352ed3e5d0ae6ae7e\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_778d643b1329aa7352ed3e5d0ae6ae7e.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_inputs__OBJECT__VARIANT", "alias": "logs_event_inputs", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/dbt_expectations_expect_column_778d643b1329aa7352ed3e5d0ae6ae7e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_778d643b1329aa7352ed3e5d0ae6ae7e"}, "created_at": 1676639820.8215463, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NATIVE_CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVM_CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INPUTS'\n            and\n            relation_column_type not in ('OBJECT', 'VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_inputs", "file_key_name": "models.silver__logs"}, "test.harmony.not_null_silver__logs_topics.fa8920332a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "topics", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__logs_topics"], "unique_id": "test.harmony.not_null_silver__logs_topics.fa8920332a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__logs_topics.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_topics", "alias": "logs_topics", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/not_null_silver__logs_topics.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.8275282, "compiled_code": "\n    \n    \n\n\n\nselect topics\nfrom HARMONY.silver.logs\nwhere topics is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "topics", "file_key_name": "models.silver__logs"}, "test.harmony.not_null_silver__logs_data.a1bd813a43": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "data", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__logs_data"], "unique_id": "test.harmony.not_null_silver__logs_data.a1bd813a43", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__logs_data.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_data", "alias": "logs_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/not_null_silver__logs_data.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.8297586, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom HARMONY.silver.logs\nwhere data is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "data", "file_key_name": "models.silver__logs"}, "test.harmony.not_null_silver__logs_event_removed.423eaaec26": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_removed", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__logs_event_removed"], "unique_id": "test.harmony.not_null_silver__logs_event_removed.423eaaec26", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__logs_event_removed.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_event_removed", "alias": "logs_event_removed", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/not_null_silver__logs_event_removed.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.831704, "compiled_code": "\n    \n    \n\n\n\nselect event_removed\nfrom HARMONY.silver.logs\nwhere event_removed is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_removed", "file_key_name": "models.silver__logs"}, "test.harmony.dbt_utils_unique_combination_of_columns_silver__logs_LOG_ID.56ad8797d0": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["LOG_ID"], "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["harmony", "silver", "dbt_utils_unique_combination_of_columns_silver__logs_LOG_ID"], "unique_id": "test.harmony.dbt_utils_unique_combination_of_columns_silver__logs_LOG_ID.56ad8797d0", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_utils_unique_combination_of_columns_silver__logs_LOG_ID.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_utils_unique_combination_of_columns_silver__logs_LOG_ID", "alias": "logs_LOG_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/dbt_utils_unique_combination_of_columns_silver__logs_LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.8335893, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        LOG_ID\n    from HARMONY.silver.logs\n    group by LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__logs"}, "test.harmony.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_ID__TX_HASH.a2e6e00fbb": {"test_metadata": {"name": "sequence_gaps", "kwargs": {"partition_by": ["BLOCK_ID", "TX_HASH"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.harmony.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "sequence_gaps_silver", "fqn": ["harmony", "silver", "sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_ID__TX_HASH"], "unique_id": "test.harmony.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_ID__TX_HASH.a2e6e00fbb", "raw_code": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_ID__TX_HASH.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_ID__TX_HASH", "alias": "logs_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__logs.yml/sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_ID__TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1676639820.840204, "compiled_code": "WITH source AS (\n    SELECT\n        BLOCK_ID, TX_HASH,\n        EVENT_INDEX,\n        LAG(\n            EVENT_INDEX,\n            1\n        ) over (\n            PARTITION BY BLOCK_ID, TX_HASH\n            ORDER BY\n                EVENT_INDEX ASC\n        ) AS prev_EVENT_INDEX\n    FROM\n        (select * from HARMONY.silver.logs where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n)\nSELECT\n    BLOCK_ID, TX_HASH,\n    prev_EVENT_INDEX,\n    EVENT_INDEX,\n    EVENT_INDEX - prev_EVENT_INDEX\n    - 1 AS gap\nFROM\n    source\nWHERE\n    EVENT_INDEX - prev_EVENT_INDEX <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__logs"}, "test.harmony.unique_silver__blocks_block_id.f7be7f6b71": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "unique_silver", "fqn": ["harmony", "silver", "unique_silver__blocks_block_id"], "unique_id": "test.harmony.unique_silver__blocks_block_id.f7be7f6b71", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "unique_silver__blocks_block_id.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "unique_silver__blocks_block_id", "alias": "blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/unique_silver__blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.8575294, "compiled_code": "\n    \n    \n\nselect\n    block_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.silver.blocks\nwhere block_id is not null\ngroup by block_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.silver__blocks"}, "test.harmony.not_null_silver__blocks_block_id.267efd80e1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__blocks_block_id"], "unique_id": "test.harmony.not_null_silver__blocks_block_id.267efd80e1", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__blocks_block_id.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_block_id", "alias": "blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/not_null_silver__blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.8595397, "compiled_code": "\n    \n    \n\n\n\nselect block_id\nfrom HARMONY.silver.blocks\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.silver__blocks"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_id__NUMBER__FLOAT.400333bd32": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4efc228ab0d4df21e8921a55d9ff1195", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_id__NUMBER__FLOAT"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_id__NUMBER__FLOAT.400333bd32", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4efc228ab0d4df21e8921a55d9ff1195\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_4efc228ab0d4df21e8921a55d9ff1195.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_id__NUMBER__FLOAT", "alias": "blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/dbt_expectations_expect_column_4efc228ab0d4df21e8921a55d9ff1195.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4efc228ab0d4df21e8921a55d9ff1195"}, "created_at": 1676639820.861478, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.silver__blocks"}, "test.harmony.not_null_silver__blocks_block_timestamp.0920efa41b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__blocks_block_timestamp"], "unique_id": "test.harmony.not_null_silver__blocks_block_timestamp.0920efa41b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__blocks_block_timestamp.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_block_timestamp", "alias": "blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/not_null_silver__blocks_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.86768, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom HARMONY.silver.blocks\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.silver__blocks"}, "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1.21cac2f295": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_f8c7cb807bf5527b93589f5606885739", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1"], "unique_id": "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1.21cac2f295", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_f8c7cb807bf5527b93589f5606885739\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_row_va_f8c7cb807bf5527b93589f5606885739.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1", "alias": "blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/dbt_expectations_expect_row_va_f8c7cb807bf5527b93589f5606885739.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_f8c7cb807bf5527b93589f5606885739"}, "created_at": 1676639820.869638, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(block_timestamp as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        HARMONY.silver.blocks\n    where\n        -- to exclude erroneous future dates\n        cast(block_timestamp as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.silver__blocks"}, "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ.a690d9e325": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_48f7fbc31e0abd10b3a5ed647d44f893", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ.a690d9e325", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_48f7fbc31e0abd10b3a5ed647d44f893\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_48f7fbc31e0abd10b3a5ed647d44f893.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ", "alias": "blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/dbt_expectations_expect_column_48f7fbc31e0abd10b3a5ed647d44f893.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_48f7fbc31e0abd10b3a5ed647d44f893"}, "created_at": 1676639820.877616, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.silver__blocks"}, "test.harmony.unique_silver__blocks_block_hash.cdd5b93cb8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "block_hash", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "unique_silver", "fqn": ["harmony", "silver", "unique_silver__blocks_block_hash"], "unique_id": "test.harmony.unique_silver__blocks_block_hash.cdd5b93cb8", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "unique_silver__blocks_block_hash.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "unique_silver__blocks_block_hash", "alias": "blocks_block_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/unique_silver__blocks_block_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.8832073, "compiled_code": "\n    \n    \n\nselect\n    block_hash as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.silver.blocks\nwhere block_hash is not null\ngroup by block_hash\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_hash", "file_key_name": "models.silver__blocks"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_block_parent_hash__0_xX_0_9a_fA_F_.a60111cce9": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "block_parent_hash", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3089d7ff9a10466e34c763c4ebdd2879", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_block_parent_hash__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_block_parent_hash__0_xX_0_9a_fA_F_.a60111cce9", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3089d7ff9a10466e34c763c4ebdd2879\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_3089d7ff9a10466e34c763c4ebdd2879.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_block_parent_hash__0_xX_0_9a_fA_F_", "alias": "blocks_block_parent_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/dbt_expectations_expect_column_3089d7ff9a10466e34c763c4ebdd2879.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3089d7ff9a10466e34c763c4ebdd2879"}, "created_at": 1676639820.8893878, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(block_parent_hash, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_parent_hash", "file_key_name": "models.silver__blocks"}, "test.harmony.not_null_silver__blocks_miner.6dbe19a617": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "miner", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__blocks_miner"], "unique_id": "test.harmony.not_null_silver__blocks_miner.6dbe19a617", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__blocks_miner.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_miner", "alias": "blocks_miner", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/not_null_silver__blocks_miner.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.8996484, "compiled_code": "\n    \n    \n\n\n\nselect miner\nfrom HARMONY.silver.blocks\nwhere miner is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "miner", "file_key_name": "models.silver__blocks"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_miner__0_xX_0_9a_fA_F_.30387dc41b": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "miner", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a91598f995f23dfce78d7125dd02596", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_miner__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_miner__0_xX_0_9a_fA_F_.30387dc41b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a91598f995f23dfce78d7125dd02596\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_9a91598f995f23dfce78d7125dd02596.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_miner__0_xX_0_9a_fA_F_", "alias": "blocks_miner", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/dbt_expectations_expect_column_9a91598f995f23dfce78d7125dd02596.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9a91598f995f23dfce78d7125dd02596"}, "created_at": 1676639820.9015656, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(miner, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "miner", "file_key_name": "models.silver__blocks"}, "test.harmony.not_null_silver__blocks_nonce.94b002faf1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "nonce", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__blocks_nonce"], "unique_id": "test.harmony.not_null_silver__blocks_nonce.94b002faf1", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__blocks_nonce.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_nonce", "alias": "blocks_nonce", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/not_null_silver__blocks_nonce.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9078865, "compiled_code": "\n    \n    \n\n\n\nselect nonce\nfrom HARMONY.silver.blocks\nwhere nonce is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "nonce", "file_key_name": "models.silver__blocks"}, "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_nonce__0_xX_0_9a_fA_F_.78e67d4fa7": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "nonce", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e9cdb24fade6685b8cfb9a31b02e349b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_nonce__0_xX_0_9a_fA_F_"], "unique_id": "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_nonce__0_xX_0_9a_fA_F_.78e67d4fa7", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e9cdb24fade6685b8cfb9a31b02e349b\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_e9cdb24fade6685b8cfb9a31b02e349b.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_nonce__0_xX_0_9a_fA_F_", "alias": "blocks_nonce", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/dbt_expectations_expect_column_e9cdb24fade6685b8cfb9a31b02e349b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e9cdb24fade6685b8cfb9a31b02e349b"}, "created_at": 1676639820.9098597, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(nonce, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from HARMONY.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "nonce", "file_key_name": "models.silver__blocks"}, "test.harmony.not_null_silver__blocks_size.0832a5c552": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "size", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__blocks_size"], "unique_id": "test.harmony.not_null_silver__blocks_size.0832a5c552", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__blocks_size.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_size", "alias": "blocks_size", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/not_null_silver__blocks_size.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.916112, "compiled_code": "\n    \n    \n\n\n\nselect size\nfrom HARMONY.silver.blocks\nwhere size is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "size", "file_key_name": "models.silver__blocks"}, "test.harmony.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id"], "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["harmony", "silver", "dbt_utils_unique_combination_of_columns_silver__blocks_block_id"], "unique_id": "test.harmony.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_utils_unique_combination_of_columns_silver__blocks_block_id.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_utils_unique_combination_of_columns_silver__blocks_block_id", "alias": "blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/dbt_utils_unique_combination_of_columns_silver__blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9241598, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id\n    from HARMONY.silver.blocks\n    group by block_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__blocks"}, "test.harmony.sequence_gaps_silver__blocks_block_id.c10db99188": {"test_metadata": {"name": "sequence_gaps", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.harmony.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE - 1", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": ">10"}, "database": "HARMONY", "schema": "sequence_gaps_silver", "fqn": ["harmony", "silver", "sequence_gaps_silver__blocks_block_id"], "unique_id": "test.harmony.sequence_gaps_silver__blocks_block_id.c10db99188", "raw_code": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",where=\"BLOCK_TIMESTAMP < CURRENT_DATE - 1\",error_if=\">10\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "sequence_gaps_silver__blocks_block_id.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "sequence_gaps_silver__blocks_block_id", "alias": "blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__blocks.yml/sequence_gaps_silver__blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "where": "BLOCK_TIMESTAMP < CURRENT_DATE - 1", "error_if": ">10"}, "created_at": 1676639820.9307988, "compiled_code": "WITH source AS (\n    SELECT\n        \n        block_id,\n        LAG(\n            block_id,\n            1\n        ) over (\n            \n            ORDER BY\n                block_id ASC\n        ) AS prev_block_id\n    FROM\n        (select * from HARMONY.silver.blocks where BLOCK_TIMESTAMP < CURRENT_DATE - 1) dbt_subquery\n)\nSELECT\n    \n    prev_block_id,\n    block_id,\n    block_id - prev_block_id\n    - 1 AS gap\nFROM\n    source\nWHERE\n    block_id - prev_block_id <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__blocks"}, "test.harmony.not_null_silver__transactions_block_timestamp.1554985986": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transactions_block_timestamp"], "unique_id": "test.harmony.not_null_silver__transactions_block_timestamp.1554985986", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transactions_block_timestamp.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_block_timestamp", "alias": "transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.yml/not_null_silver__transactions_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.944498, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom HARMONY.silver.transactions\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.silver__transactions"}, "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1.bdc2ddbf00": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_5d2004d0f76917aee39e225642f78757", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["harmony", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1"], "unique_id": "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1.bdc2ddbf00", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_5d2004d0f76917aee39e225642f78757\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_row_va_5d2004d0f76917aee39e225642f78757.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1", "alias": "transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.yml/dbt_expectations_expect_row_va_5d2004d0f76917aee39e225642f78757.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_5d2004d0f76917aee39e225642f78757"}, "created_at": 1676639820.946563, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(block_timestamp as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        HARMONY.silver.transactions\n    where\n        -- to exclude erroneous future dates\n        cast(block_timestamp as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.silver__transactions"}, "test.harmony.not_null_silver__transactions_nonce.e553344380": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "nonce", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transactions_nonce"], "unique_id": "test.harmony.not_null_silver__transactions_nonce.e553344380", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transactions_nonce.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_nonce", "alias": "transactions_nonce", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.yml/not_null_silver__transactions_nonce.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.954863, "compiled_code": "\n    \n    \n\n\n\nselect nonce\nfrom HARMONY.silver.transactions\nwhere nonce is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "nonce", "file_key_name": "models.silver__transactions"}, "test.harmony.not_null_silver__transactions_from_address.cb53fcb412": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_address", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transactions_from_address"], "unique_id": "test.harmony.not_null_silver__transactions_from_address.cb53fcb412", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transactions_from_address.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_from_address", "alias": "transactions_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.yml/not_null_silver__transactions_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9567974, "compiled_code": "\n    \n    \n\n\n\nselect from_address\nfrom HARMONY.silver.transactions\nwhere from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_address", "file_key_name": "models.silver__transactions"}, "test.harmony.not_null_silver__transactions_value.252eabb536": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transactions_value"], "unique_id": "test.harmony.not_null_silver__transactions_value.252eabb536", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transactions_value.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_value", "alias": "transactions_value", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.yml/not_null_silver__transactions_value.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9589796, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom HARMONY.silver.transactions\nwhere value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "value", "file_key_name": "models.silver__transactions"}, "test.harmony.not_null_silver__transactions_gas_price.4a6a7bc99f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_price", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transactions_gas_price"], "unique_id": "test.harmony.not_null_silver__transactions_gas_price.4a6a7bc99f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transactions_gas_price.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_gas_price", "alias": "transactions_gas_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.yml/not_null_silver__transactions_gas_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9609005, "compiled_code": "\n    \n    \n\n\n\nselect gas_price\nfrom HARMONY.silver.transactions\nwhere gas_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gas_price", "file_key_name": "models.silver__transactions"}, "test.harmony.not_null_silver__transactions_gas.67ccee0621": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transactions_gas"], "unique_id": "test.harmony.not_null_silver__transactions_gas.67ccee0621", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transactions_gas.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_gas", "alias": "transactions_gas", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.yml/not_null_silver__transactions_gas.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9628239, "compiled_code": "\n    \n    \n\n\n\nselect gas\nfrom HARMONY.silver.transactions\nwhere gas is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gas", "file_key_name": "models.silver__transactions"}, "test.harmony.not_null_silver__transactions_tx_hash.d542339dda": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transactions_tx_hash"], "unique_id": "test.harmony.not_null_silver__transactions_tx_hash.d542339dda", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transactions_tx_hash.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_tx_hash", "alias": "transactions_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.yml/not_null_silver__transactions_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.964812, "compiled_code": "\n    \n    \n\n\n\nselect tx_hash\nfrom HARMONY.silver.transactions\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.silver__transactions"}, "test.harmony.unique_silver__transactions_tx_hash.bee83d976b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "unique_silver", "fqn": ["harmony", "silver", "unique_silver__transactions_tx_hash"], "unique_id": "test.harmony.unique_silver__transactions_tx_hash.bee83d976b", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "unique_silver__transactions_tx_hash.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "unique_silver__transactions_tx_hash", "alias": "transactions_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.yml/unique_silver__transactions_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.967013, "compiled_code": "\n    \n    \n\nselect\n    tx_hash as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.silver.transactions\nwhere tx_hash is not null\ngroup by tx_hash\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.silver__transactions"}, "test.harmony.not_null_silver__transactions_data.90d1ffd10b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "data", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transactions_data"], "unique_id": "test.harmony.not_null_silver__transactions_data.90d1ffd10b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transactions_data.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_data", "alias": "transactions_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.yml/not_null_silver__transactions_data.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9692712, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom HARMONY.silver.transactions\nwhere data is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "data", "file_key_name": "models.silver__transactions"}, "test.harmony.not_null_silver__transactions_status.6c30495740": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "status", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transactions_status"], "unique_id": "test.harmony.not_null_silver__transactions_status.6c30495740", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transactions_status.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_status", "alias": "transactions_status", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.yml/not_null_silver__transactions_status.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.971242, "compiled_code": "\n    \n    \n\n\n\nselect status\nfrom HARMONY.silver.transactions\nwhere status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status", "file_key_name": "models.silver__transactions"}, "test.harmony.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_inserted_timestamp", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transactions__inserted_timestamp"], "unique_id": "test.harmony.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transactions__inserted_timestamp.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions__inserted_timestamp", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.yml/not_null_silver__transactions__inserted_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9731622, "compiled_code": "\n    \n    \n\n\n\nselect _inserted_timestamp\nfrom HARMONY.silver.transactions\nwhere _inserted_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_inserted_timestamp", "file_key_name": "models.silver__transactions"}, "test.harmony.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_HASH"], "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["harmony", "silver", "dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH"], "unique_id": "test.harmony.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH", "alias": "transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transactions.yml/dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32"}, "created_at": 1676639820.9751246, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_HASH\n    from HARMONY.silver.transactions\n    group by TX_HASH\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__transactions"}, "test.harmony.not_null_silver__tokenprices_key.824f14495e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "key", "model": "{{ get_where_subquery(ref('silver__tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprices_key"], "unique_id": "test.harmony.not_null_silver__tokenprices_key.824f14495e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprices_key.sql", "original_file_path": "models/silver/silver__tokenprices.yml", "name": "not_null_silver__tokenprices_key", "alias": "tokenprices_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprices.yml/not_null_silver__tokenprices_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9857013, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom HARMONY.silver.tokenprices\nwhere key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "key", "file_key_name": "models.silver__tokenprices"}, "test.harmony.unique_silver__tokenprices_key.7d4cf4f773": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "key", "model": "{{ get_where_subquery(ref('silver__tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "unique_silver", "fqn": ["harmony", "silver", "unique_silver__tokenprices_key"], "unique_id": "test.harmony.unique_silver__tokenprices_key.7d4cf4f773", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "unique_silver__tokenprices_key.sql", "original_file_path": "models/silver/silver__tokenprices.yml", "name": "unique_silver__tokenprices_key", "alias": "tokenprices_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprices.yml/unique_silver__tokenprices_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9876666, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.silver.tokenprices\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "key", "file_key_name": "models.silver__tokenprices"}, "test.harmony.not_null_silver__tokenprices_block_date.a9d2fe4662": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_date", "model": "{{ get_where_subquery(ref('silver__tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprices_block_date"], "unique_id": "test.harmony.not_null_silver__tokenprices_block_date.a9d2fe4662", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprices_block_date.sql", "original_file_path": "models/silver/silver__tokenprices.yml", "name": "not_null_silver__tokenprices_block_date", "alias": "tokenprices_block_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprices.yml/not_null_silver__tokenprices_block_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9896054, "compiled_code": "\n    \n    \n\n\n\nselect block_date\nfrom HARMONY.silver.tokenprices\nwhere block_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_date", "file_key_name": "models.silver__tokenprices"}, "test.harmony.not_null_silver__tokenprices_token_address.b5d226ae48": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_address", "model": "{{ get_where_subquery(ref('silver__tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprices_token_address"], "unique_id": "test.harmony.not_null_silver__tokenprices_token_address.b5d226ae48", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprices_token_address.sql", "original_file_path": "models/silver/silver__tokenprices.yml", "name": "not_null_silver__tokenprices_token_address", "alias": "tokenprices_token_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprices.yml/not_null_silver__tokenprices_token_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9919422, "compiled_code": "\n    \n    \n\n\n\nselect token_address\nfrom HARMONY.silver.tokenprices\nwhere token_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_address", "file_key_name": "models.silver__tokenprices"}, "test.harmony.not_null_silver__tokenprices_token_symbol.5948abf1ec": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_symbol", "model": "{{ get_where_subquery(ref('silver__tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprices_token_symbol"], "unique_id": "test.harmony.not_null_silver__tokenprices_token_symbol.5948abf1ec", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprices_token_symbol.sql", "original_file_path": "models/silver/silver__tokenprices.yml", "name": "not_null_silver__tokenprices_token_symbol", "alias": "tokenprices_token_symbol", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprices.yml/not_null_silver__tokenprices_token_symbol.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9939094, "compiled_code": "\n    \n    \n\n\n\nselect token_symbol\nfrom HARMONY.silver.tokenprices\nwhere token_symbol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_symbol", "file_key_name": "models.silver__tokenprices"}, "test.harmony.not_null_silver__tokenprices_usd_price.234f43f6f8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "usd_price", "model": "{{ get_where_subquery(ref('silver__tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprices_usd_price"], "unique_id": "test.harmony.not_null_silver__tokenprices_usd_price.234f43f6f8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprices_usd_price.sql", "original_file_path": "models/silver/silver__tokenprices.yml", "name": "not_null_silver__tokenprices_usd_price", "alias": "tokenprices_usd_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprices.yml/not_null_silver__tokenprices_usd_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9958322, "compiled_code": "\n    \n    \n\n\n\nselect usd_price\nfrom HARMONY.silver.tokenprices\nwhere usd_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "usd_price", "file_key_name": "models.silver__tokenprices"}, "test.harmony.not_null_silver__tokenprices_usd_volume.bea0063552": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "usd_volume", "model": "{{ get_where_subquery(ref('silver__tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprices_usd_volume"], "unique_id": "test.harmony.not_null_silver__tokenprices_usd_volume.bea0063552", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprices_usd_volume.sql", "original_file_path": "models/silver/silver__tokenprices.yml", "name": "not_null_silver__tokenprices_usd_volume", "alias": "tokenprices_usd_volume", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprices.yml/not_null_silver__tokenprices_usd_volume.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.997749, "compiled_code": "\n    \n    \n\n\n\nselect usd_volume\nfrom HARMONY.silver.tokenprices\nwhere usd_volume is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "usd_volume", "file_key_name": "models.silver__tokenprices"}, "test.harmony.not_null_silver__tokenprices_token_volume.87dce12af5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_volume", "model": "{{ get_where_subquery(ref('silver__tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__tokenprices_token_volume"], "unique_id": "test.harmony.not_null_silver__tokenprices_token_volume.87dce12af5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__tokenprices_token_volume.sql", "original_file_path": "models/silver/silver__tokenprices.yml", "name": "not_null_silver__tokenprices_token_volume", "alias": "tokenprices_token_volume", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tokenprices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__tokenprices.yml/not_null_silver__tokenprices_token_volume.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639820.9997008, "compiled_code": "\n    \n    \n\n\n\nselect token_volume\nfrom HARMONY.silver.tokenprices\nwhere token_volume is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_volume", "file_key_name": "models.silver__tokenprices"}, "test.harmony.unique_silver__transfers_log_id.a9169cebd7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "unique_silver", "fqn": ["harmony", "silver", "unique_silver__transfers_log_id"], "unique_id": "test.harmony.unique_silver__transfers_log_id.a9169cebd7", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "unique_silver__transfers_log_id.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "unique_silver__transfers_log_id", "alias": "transfers_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transfers.yml/unique_silver__transfers_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.0066931, "compiled_code": "\n    \n    \n\nselect\n    log_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.silver.transfers\nwhere log_id is not null\ngroup by log_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.silver__transfers"}, "test.harmony.not_null_silver__transfers_log_id.b85b524f16": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transfers_log_id"], "unique_id": "test.harmony.not_null_silver__transfers_log_id.b85b524f16", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transfers_log_id.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_log_id", "alias": "transfers_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transfers.yml/not_null_silver__transfers_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.0086865, "compiled_code": "\n    \n    \n\n\n\nselect log_id\nfrom HARMONY.silver.transfers\nwhere log_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.silver__transfers"}, "test.harmony.not_null_silver__transfers_block_id.77f03bb32e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transfers_block_id"], "unique_id": "test.harmony.not_null_silver__transfers_block_id.77f03bb32e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transfers_block_id.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_block_id", "alias": "transfers_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transfers.yml/not_null_silver__transfers_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.0108838, "compiled_code": "\n    \n    \n\n\n\nselect block_id\nfrom HARMONY.silver.transfers\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.silver__transfers"}, "test.harmony.not_null_silver__transfers_tx_hash.b0da0c6141": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transfers_tx_hash"], "unique_id": "test.harmony.not_null_silver__transfers_tx_hash.b0da0c6141", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transfers_tx_hash.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_tx_hash", "alias": "transfers_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transfers.yml/not_null_silver__transfers_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.0128732, "compiled_code": "\n    \n    \n\n\n\nselect tx_hash\nfrom HARMONY.silver.transfers\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.silver__transfers"}, "test.harmony.not_null_silver__transfers_block_timestamp.0793efcca3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transfers_block_timestamp"], "unique_id": "test.harmony.not_null_silver__transfers_block_timestamp.0793efcca3", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transfers_block_timestamp.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_block_timestamp", "alias": "transfers_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transfers.yml/not_null_silver__transfers_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.014822, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom HARMONY.silver.transfers\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.silver__transfers"}, "test.harmony.not_null_silver__transfers_contract_address.bb507b1064": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_address", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transfers_contract_address"], "unique_id": "test.harmony.not_null_silver__transfers_contract_address.bb507b1064", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transfers_contract_address.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_contract_address", "alias": "transfers_contract_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transfers.yml/not_null_silver__transfers_contract_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.0167723, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom HARMONY.silver.transfers\nwhere contract_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contract_address", "file_key_name": "models.silver__transfers"}, "test.harmony.not_null_silver__transfers_from_address.d07403aa89": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_address", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transfers_from_address"], "unique_id": "test.harmony.not_null_silver__transfers_from_address.d07403aa89", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transfers_from_address.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_from_address", "alias": "transfers_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transfers.yml/not_null_silver__transfers_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.0186872, "compiled_code": "\n    \n    \n\n\n\nselect from_address\nfrom HARMONY.silver.transfers\nwhere from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_address", "file_key_name": "models.silver__transfers"}, "test.harmony.not_null_silver__transfers_to_address.56c037ad67": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_address", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transfers_to_address"], "unique_id": "test.harmony.not_null_silver__transfers_to_address.56c037ad67", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transfers_to_address.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_to_address", "alias": "transfers_to_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transfers.yml/not_null_silver__transfers_to_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.0205908, "compiled_code": "\n    \n    \n\n\n\nselect to_address\nfrom HARMONY.silver.transfers\nwhere to_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "to_address", "file_key_name": "models.silver__transfers"}, "test.harmony.not_null_silver__transfers_raw_amount.82c0c17a7d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "raw_amount", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__transfers_raw_amount"], "unique_id": "test.harmony.not_null_silver__transfers_raw_amount.82c0c17a7d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__transfers_raw_amount.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_raw_amount", "alias": "transfers_raw_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/silver/silver__transfers.yml/not_null_silver__transfers_raw_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.0228167, "compiled_code": "\n    \n    \n\n\n\nselect raw_amount\nfrom HARMONY.silver.transfers\nwhere raw_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "raw_amount", "file_key_name": "models.silver__transfers"}, "test.harmony.dbt_expectations_expect_column_to_exist_core__dim_tokens_DIM_TOKENS_ID.ca6fe4de67": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DIM_TOKENS_ID", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.core__dim_tokens"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4f719040e0f6dbd9c58848942ab5de8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["harmony", "core", "dbt_expectations_expect_column_to_exist_core__dim_tokens_DIM_TOKENS_ID"], "unique_id": "test.harmony.dbt_expectations_expect_column_to_exist_core__dim_tokens_DIM_TOKENS_ID.ca6fe4de67", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4f719040e0f6dbd9c58848942ab5de8b\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_4f719040e0f6dbd9c58848942ab5de8b.sql", "original_file_path": "models/core/core__dim_tokens.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_DIM_TOKENS_ID", "alias": "dim_tokens_DIM_TOKENS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/core__dim_tokens.yml/dbt_expectations_expect_column_4f719040e0f6dbd9c58848942ab5de8b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4f719040e0f6dbd9c58848942ab5de8b"}, "created_at": 1676639821.028141, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('DIM_TOKENS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_TOKENS_ID", "file_key_name": "models.core__dim_tokens"}, "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_tokenprices_FACT_TOKENPRICES_ID.83419f6bfe": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TOKENPRICES_ID", "model": "{{ get_where_subquery(ref('core__fact_tokenprices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.core__fact_tokenprices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_32211de3fc4275e9a76fdcd95d90c00a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["harmony", "core", "dbt_expectations_expect_column_to_exist_core__fact_tokenprices_FACT_TOKENPRICES_ID"], "unique_id": "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_tokenprices_FACT_TOKENPRICES_ID.83419f6bfe", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_32211de3fc4275e9a76fdcd95d90c00a\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_32211de3fc4275e9a76fdcd95d90c00a.sql", "original_file_path": "models/core/core__fact_tokenprices.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_tokenprices_FACT_TOKENPRICES_ID", "alias": "fact_tokenprices_FACT_TOKENPRICES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_tokenprices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/core__fact_tokenprices.yml/dbt_expectations_expect_column_32211de3fc4275e9a76fdcd95d90c00a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_32211de3fc4275e9a76fdcd95d90c00a"}, "created_at": 1676639821.0436044, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('FACT_TOKENPRICES_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_TOKENPRICES_ID", "file_key_name": "models.core__fact_tokenprices"}, "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID.87b06ee713": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SWAPS_ID", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_772580aa53b8cabe1100cddb87c3c1d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["harmony", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID"], "unique_id": "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID.87b06ee713", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_772580aa53b8cabe1100cddb87c3c1d2\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_772580aa53b8cabe1100cddb87c3c1d2.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID", "alias": "fact_swaps_FACT_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/core__fact_swaps.yml/dbt_expectations_expect_column_772580aa53b8cabe1100cddb87c3c1d2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_772580aa53b8cabe1100cddb87c3c1d2"}, "created_at": 1676639821.0567741, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('FACT_SWAPS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_SWAPS_ID", "file_key_name": "models.core__fact_swaps"}, "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_event_logs_FACT_EVENT_LOGS_ID.c4518f5cd7": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_EVENT_LOGS_ID", "model": "{{ get_where_subquery(ref('core__fact_event_logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.core__fact_event_logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7488605d4b26d94bd36c358b98e56576", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["harmony", "core", "dbt_expectations_expect_column_to_exist_core__fact_event_logs_FACT_EVENT_LOGS_ID"], "unique_id": "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_event_logs_FACT_EVENT_LOGS_ID.c4518f5cd7", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7488605d4b26d94bd36c358b98e56576\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_7488605d4b26d94bd36c358b98e56576.sql", "original_file_path": "models/core/core__fact_event_logs.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_event_logs_FACT_EVENT_LOGS_ID", "alias": "fact_event_logs_FACT_EVENT_LOGS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_event_logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/core__fact_event_logs.yml/dbt_expectations_expect_column_7488605d4b26d94bd36c358b98e56576.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7488605d4b26d94bd36c358b98e56576"}, "created_at": 1676639821.0689754, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('FACT_EVENT_LOGS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_EVENT_LOGS_ID", "file_key_name": "models.core__fact_event_logs"}, "test.harmony.dbt_expectations_expect_column_to_exist_core__dim_liquidity_pools_DIM_LIQUIDITY_POOL_ID.cfe59b4ac8": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DIM_LIQUIDITY_POOL_ID", "model": "{{ get_where_subquery(ref('core__dim_liquidity_pools')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.core__dim_liquidity_pools"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a61e88632ad373b4967f9b112b31dd33", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["harmony", "core", "dbt_expectations_expect_column_to_exist_core__dim_liquidity_pools_DIM_LIQUIDITY_POOL_ID"], "unique_id": "test.harmony.dbt_expectations_expect_column_to_exist_core__dim_liquidity_pools_DIM_LIQUIDITY_POOL_ID.cfe59b4ac8", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a61e88632ad373b4967f9b112b31dd33\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_a61e88632ad373b4967f9b112b31dd33.sql", "original_file_path": "models/core/core__dim_liquidity_pools.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_liquidity_pools_DIM_LIQUIDITY_POOL_ID", "alias": "dim_liquidity_pools_DIM_LIQUIDITY_POOL_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_liquidity_pools"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/core__dim_liquidity_pools.yml/dbt_expectations_expect_column_a61e88632ad373b4967f9b112b31dd33.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a61e88632ad373b4967f9b112b31dd33"}, "created_at": 1676639821.0781112, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('DIM_LIQUIDITY_POOL_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_LIQUIDITY_POOL_ID", "file_key_name": "models.core__dim_liquidity_pools"}, "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TRANSFERS_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["harmony", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID"], "unique_id": "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID", "alias": "fact_transfers_FACT_TRANSFERS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5"}, "created_at": 1676639821.0883126, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('FACT_TRANSFERS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_TRANSFERS_ID", "file_key_name": "models.core__fact_transfers"}, "test.harmony.dbt_expectations_expect_column_to_exist_core__dim_blocks_DIM_BLOCK_ID.cc097dc5dc": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.core__dim_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_22b4234287d92491fab2f3c33cd64b82", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["harmony", "core", "dbt_expectations_expect_column_to_exist_core__dim_blocks_DIM_BLOCK_ID"], "unique_id": "test.harmony.dbt_expectations_expect_column_to_exist_core__dim_blocks_DIM_BLOCK_ID.cc097dc5dc", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_22b4234287d92491fab2f3c33cd64b82\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_22b4234287d92491fab2f3c33cd64b82.sql", "original_file_path": "models/core/core__dim_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_blocks_DIM_BLOCK_ID", "alias": "dim_blocks_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/core__dim_blocks.yml/dbt_expectations_expect_column_22b4234287d92491fab2f3c33cd64b82.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_22b4234287d92491fab2f3c33cd64b82"}, "created_at": 1676639821.1005163, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('DIM_BLOCK_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__dim_blocks"}, "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_transactions_FACT_TRANSACTIONS_ID.3cfaac32a9": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TRANSACTIONS_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fee6ddfed12a486bf00e3ac5e034520e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["harmony", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_FACT_TRANSACTIONS_ID"], "unique_id": "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_transactions_FACT_TRANSACTIONS_ID.3cfaac32a9", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fee6ddfed12a486bf00e3ac5e034520e\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "dbt_expectations_expect_column_fee6ddfed12a486bf00e3ac5e034520e.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_FACT_TRANSACTIONS_ID", "alias": "fact_transactions_FACT_TRANSACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_fee6ddfed12a486bf00e3ac5e034520e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fee6ddfed12a486bf00e3ac5e034520e"}, "created_at": 1676639821.1134546, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('FACT_TRANSACTIONS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FACT_TRANSACTIONS_ID", "file_key_name": "models.core__fact_transactions"}, "test.harmony.not_null_bonze__blocks_record_id.566699a3d9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "record_id", "model": "{{ get_where_subquery(ref('bonze__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bonze", "fqn": ["harmony", "bronze", "not_null_bonze__blocks_record_id"], "unique_id": "test.harmony.not_null_bonze__blocks_record_id.566699a3d9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bonze__blocks_record_id.sql", "original_file_path": "models/bronze/bronze__blocks.yml", "name": "not_null_bonze__blocks_record_id", "alias": "blocks_record_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bonze__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.124691, "column_name": "record_id", "file_key_name": "models.bonze__blocks"}, "test.harmony.not_null_bonze__blocks_offset_id.e635caef80": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "offset_id", "model": "{{ get_where_subquery(ref('bonze__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bonze", "fqn": ["harmony", "bronze", "not_null_bonze__blocks_offset_id"], "unique_id": "test.harmony.not_null_bonze__blocks_offset_id.e635caef80", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bonze__blocks_offset_id.sql", "original_file_path": "models/bronze/bronze__blocks.yml", "name": "not_null_bonze__blocks_offset_id", "alias": "blocks_offset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bonze__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.1267157, "column_name": "offset_id", "file_key_name": "models.bonze__blocks"}, "test.harmony.not_null_bonze__blocks_block_id.1b3cae964c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('bonze__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bonze", "fqn": ["harmony", "bronze", "not_null_bonze__blocks_block_id"], "unique_id": "test.harmony.not_null_bonze__blocks_block_id.1b3cae964c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bonze__blocks_block_id.sql", "original_file_path": "models/bronze/bronze__blocks.yml", "name": "not_null_bonze__blocks_block_id", "alias": "blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bonze__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.1289136, "column_name": "block_id", "file_key_name": "models.bonze__blocks"}, "test.harmony.not_null_bonze__blocks_block_timestamp.364a824d90": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('bonze__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bonze", "fqn": ["harmony", "bronze", "not_null_bonze__blocks_block_timestamp"], "unique_id": "test.harmony.not_null_bonze__blocks_block_timestamp.364a824d90", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bonze__blocks_block_timestamp.sql", "original_file_path": "models/bronze/bronze__blocks.yml", "name": "not_null_bonze__blocks_block_timestamp", "alias": "blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bonze__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.130875, "column_name": "block_timestamp", "file_key_name": "models.bonze__blocks"}, "test.harmony.not_null_bonze__blocks_network.e181e89265": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "network", "model": "{{ get_where_subquery(ref('bonze__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bonze", "fqn": ["harmony", "bronze", "not_null_bonze__blocks_network"], "unique_id": "test.harmony.not_null_bonze__blocks_network.e181e89265", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bonze__blocks_network.sql", "original_file_path": "models/bronze/bronze__blocks.yml", "name": "not_null_bonze__blocks_network", "alias": "blocks_network", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bonze__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.132811, "column_name": "network", "file_key_name": "models.bonze__blocks"}, "test.harmony.not_null_bonze__blocks_chain_id.5583086f04": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('bonze__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bonze", "fqn": ["harmony", "bronze", "not_null_bonze__blocks_chain_id"], "unique_id": "test.harmony.not_null_bonze__blocks_chain_id.5583086f04", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bonze__blocks_chain_id.sql", "original_file_path": "models/bronze/bronze__blocks.yml", "name": "not_null_bonze__blocks_chain_id", "alias": "blocks_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bonze__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.134747, "column_name": "chain_id", "file_key_name": "models.bonze__blocks"}, "test.harmony.not_null_bonze__blocks_tx_count.54c67748a9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count", "model": "{{ get_where_subquery(ref('bonze__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bonze", "fqn": ["harmony", "bronze", "not_null_bonze__blocks_tx_count"], "unique_id": "test.harmony.not_null_bonze__blocks_tx_count.54c67748a9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bonze__blocks_tx_count.sql", "original_file_path": "models/bronze/bronze__blocks.yml", "name": "not_null_bonze__blocks_tx_count", "alias": "blocks_tx_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bonze__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.136648, "column_name": "tx_count", "file_key_name": "models.bonze__blocks"}, "test.harmony.not_null_bonze__blocks_header.eed11d8297": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "header", "model": "{{ get_where_subquery(ref('bonze__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bonze", "fqn": ["harmony", "bronze", "not_null_bonze__blocks_header"], "unique_id": "test.harmony.not_null_bonze__blocks_header.eed11d8297", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bonze__blocks_header.sql", "original_file_path": "models/bronze/bronze__blocks.yml", "name": "not_null_bonze__blocks_header", "alias": "blocks_header", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bonze__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.1386566, "column_name": "header", "file_key_name": "models.bonze__blocks"}, "test.harmony.not_null_bonze__blocks__inserted_timestamp.baac8432d2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_inserted_timestamp", "model": "{{ get_where_subquery(ref('bonze__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bonze", "fqn": ["harmony", "bronze", "not_null_bonze__blocks__inserted_timestamp"], "unique_id": "test.harmony.not_null_bonze__blocks__inserted_timestamp.baac8432d2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bonze__blocks__inserted_timestamp.sql", "original_file_path": "models/bronze/bronze__blocks.yml", "name": "not_null_bonze__blocks__inserted_timestamp", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bonze__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.1408465, "column_name": "_inserted_timestamp", "file_key_name": "models.bonze__blocks"}, "test.harmony.not_null_bronze__transactions_record_id.230dc348e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "record_id", "model": "{{ get_where_subquery(ref('bronze__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bronze", "fqn": ["harmony", "bronze", "not_null_bronze__transactions_record_id"], "unique_id": "test.harmony.not_null_bronze__transactions_record_id.230dc348e9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bronze__transactions_record_id.sql", "original_file_path": "models/bronze/bronze__transactions.yml", "name": "not_null_bronze__transactions_record_id", "alias": "transactions_record_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/bronze/bronze__transactions.yml/not_null_bronze__transactions_record_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.1480882, "compiled_code": "\n    \n    \n\n\n\nselect record_id\nfrom HARMONY.bronze.transactions\nwhere record_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "record_id", "file_key_name": "models.bronze__transactions"}, "test.harmony.not_null_bronze__transactions_tx_id.c31ab25698": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('bronze__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bronze", "fqn": ["harmony", "bronze", "not_null_bronze__transactions_tx_id"], "unique_id": "test.harmony.not_null_bronze__transactions_tx_id.c31ab25698", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bronze__transactions_tx_id.sql", "original_file_path": "models/bronze/bronze__transactions.yml", "name": "not_null_bronze__transactions_tx_id", "alias": "transactions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/bronze/bronze__transactions.yml/not_null_bronze__transactions_tx_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.150366, "compiled_code": "\n    \n    \n\n\n\nselect tx_id\nfrom HARMONY.bronze.transactions\nwhere tx_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_id", "file_key_name": "models.bronze__transactions"}, "test.harmony.tx_gaps_bronze__transactions_BLOCK_ID__tx_id__tx_count.960db882f2": {"test_metadata": {"name": "tx_gaps", "kwargs": {"column_block": "BLOCK_ID", "column_tx_count": "tx_count", "column_name": "tx_id", "model": "{{ get_where_subquery(ref('bronze__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.harmony.test_tx_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.bronze__transactions"]}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": ">78"}, "database": "HARMONY", "schema": "tx_gaps_bronze", "fqn": ["harmony", "bronze", "tx_gaps_bronze__transactions_BLOCK_ID__tx_id__tx_count"], "unique_id": "test.harmony.tx_gaps_bronze__transactions_BLOCK_ID__tx_id__tx_count.960db882f2", "raw_code": "{{ test_tx_gaps(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",where=\"BLOCK_TIMESTAMP < CURRENT_DATE\",error_if=\">78\") }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "tx_gaps_bronze__transactions_BLOCK_ID__tx_id__tx_count.sql", "original_file_path": "models/bronze/bronze__transactions.yml", "name": "tx_gaps_bronze__transactions_BLOCK_ID__tx_id__tx_count", "alias": "transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bronze__transactions"], ["blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "error_if": ">78"}, "created_at": 1676639821.1537046, "column_name": "tx_id", "file_key_name": "models.bronze__transactions"}, "test.harmony.not_null_bronze__transactions_tx_block_index.dfb7580b37": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_block_index", "model": "{{ get_where_subquery(ref('bronze__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bronze", "fqn": ["harmony", "bronze", "not_null_bronze__transactions_tx_block_index"], "unique_id": "test.harmony.not_null_bronze__transactions_tx_block_index.dfb7580b37", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bronze__transactions_tx_block_index.sql", "original_file_path": "models/bronze/bronze__transactions.yml", "name": "not_null_bronze__transactions_tx_block_index", "alias": "transactions_tx_block_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/bronze/bronze__transactions.yml/not_null_bronze__transactions_tx_block_index.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.1631446, "compiled_code": "\n    \n    \n\n\n\nselect tx_block_index\nfrom HARMONY.bronze.transactions\nwhere tx_block_index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_block_index", "file_key_name": "models.bronze__transactions"}, "test.harmony.not_null_bronze__transactions_offset_id.e9af2daa68": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "offset_id", "model": "{{ get_where_subquery(ref('bronze__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bronze", "fqn": ["harmony", "bronze", "not_null_bronze__transactions_offset_id"], "unique_id": "test.harmony.not_null_bronze__transactions_offset_id.e9af2daa68", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bronze__transactions_offset_id.sql", "original_file_path": "models/bronze/bronze__transactions.yml", "name": "not_null_bronze__transactions_offset_id", "alias": "transactions_offset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/bronze/bronze__transactions.yml/not_null_bronze__transactions_offset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.1650934, "compiled_code": "\n    \n    \n\n\n\nselect offset_id\nfrom HARMONY.bronze.transactions\nwhere offset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "offset_id", "file_key_name": "models.bronze__transactions"}, "test.harmony.not_null_bronze__transactions_block_id.3f0d16bdd0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('bronze__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bronze", "fqn": ["harmony", "bronze", "not_null_bronze__transactions_block_id"], "unique_id": "test.harmony.not_null_bronze__transactions_block_id.3f0d16bdd0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bronze__transactions_block_id.sql", "original_file_path": "models/bronze/bronze__transactions.yml", "name": "not_null_bronze__transactions_block_id", "alias": "transactions_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/bronze/bronze__transactions.yml/not_null_bronze__transactions_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.1670232, "compiled_code": "\n    \n    \n\n\n\nselect block_id\nfrom HARMONY.bronze.transactions\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.bronze__transactions"}, "test.harmony.not_null_bronze__transactions_block_timestamp.d0362c6400": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('bronze__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bronze", "fqn": ["harmony", "bronze", "not_null_bronze__transactions_block_timestamp"], "unique_id": "test.harmony.not_null_bronze__transactions_block_timestamp.d0362c6400", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bronze__transactions_block_timestamp.sql", "original_file_path": "models/bronze/bronze__transactions.yml", "name": "not_null_bronze__transactions_block_timestamp", "alias": "transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/bronze/bronze__transactions.yml/not_null_bronze__transactions_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.1689343, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom HARMONY.bronze.transactions\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.bronze__transactions"}, "test.harmony.not_null_bronze__transactions_network.afe59385b9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "network", "model": "{{ get_where_subquery(ref('bronze__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bronze", "fqn": ["harmony", "bronze", "not_null_bronze__transactions_network"], "unique_id": "test.harmony.not_null_bronze__transactions_network.afe59385b9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bronze__transactions_network.sql", "original_file_path": "models/bronze/bronze__transactions.yml", "name": "not_null_bronze__transactions_network", "alias": "transactions_network", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/bronze/bronze__transactions.yml/not_null_bronze__transactions_network.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.1708946, "compiled_code": "\n    \n    \n\n\n\nselect network\nfrom HARMONY.bronze.transactions\nwhere network is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "network", "file_key_name": "models.bronze__transactions"}, "test.harmony.not_null_bronze__transactions_chain_id.2a790fb1e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('bronze__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bronze", "fqn": ["harmony", "bronze", "not_null_bronze__transactions_chain_id"], "unique_id": "test.harmony.not_null_bronze__transactions_chain_id.2a790fb1e9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bronze__transactions_chain_id.sql", "original_file_path": "models/bronze/bronze__transactions.yml", "name": "not_null_bronze__transactions_chain_id", "alias": "transactions_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/bronze/bronze__transactions.yml/not_null_bronze__transactions_chain_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.1731079, "compiled_code": "\n    \n    \n\n\n\nselect chain_id\nfrom HARMONY.bronze.transactions\nwhere chain_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "chain_id", "file_key_name": "models.bronze__transactions"}, "test.harmony.not_null_bronze__transactions__inserted_timestamp.73ca005859": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_inserted_timestamp", "model": "{{ get_where_subquery(ref('bronze__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_bronze", "fqn": ["harmony", "bronze", "not_null_bronze__transactions__inserted_timestamp"], "unique_id": "test.harmony.not_null_bronze__transactions__inserted_timestamp.73ca005859", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_bronze__transactions__inserted_timestamp.sql", "original_file_path": "models/bronze/bronze__transactions.yml", "name": "not_null_bronze__transactions__inserted_timestamp", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/bronze/bronze__transactions.yml/not_null_bronze__transactions__inserted_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676639821.174993, "compiled_code": "\n    \n    \n\n\n\nselect _inserted_timestamp\nfrom HARMONY.bronze.transactions\nwhere _inserted_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_inserted_timestamp", "file_key_name": "models.bronze__transactions"}}, "sources": {"source.harmony.chainwalkers.harmony_blocks": {"fqn": ["harmony", "chainwalkers", "harmony_blocks"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.harmony.chainwalkers.harmony_blocks", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "harmony_blocks", "source_name": "chainwalkers", "source_description": "", "loader": "", "identifier": "harmony_blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Blocks from the Harmony chain. Note always use the latest ingested at timestamp as duplicates can exist in this table!", "columns": {"record_id": {"name": "record_id", "description": "A unique id for the record generated by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offset_id": {"name": "offset_id", "description": "Synonmous with `block_id` for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network. (i.e. mainnet, testnet, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Synonmous with blockchain name for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "header": {"name": "header", "description": "A json column containing the block's header information.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The time this row was ingested by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.harmony_blocks", "created_at": 1676639821.211066}, "source.harmony.chainwalkers.harmony_txs": {"fqn": ["harmony", "chainwalkers", "harmony_txs"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.harmony.chainwalkers.harmony_txs", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "harmony_txs", "source_name": "chainwalkers", "source_description": "", "loader": "", "identifier": "harmony_txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Txs from the Harmony chain. Note always use the latest ingested at timestamp as duplicates can exist in this table!", "columns": {"record_id": {"name": "record_id", "description": "A unique id for the record generated by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "Synonmous with transaction hash, a unique on chain identifier for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_block_index": {"name": "tx_block_index", "description": "The index of the transaction within the block. Starts at 0.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offset_id": {"name": "offset_id", "description": "Synonmous with `block_id` for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network. (i.e. mainnet, testnet, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Synonmous with blockchain name for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The time this row was ingested by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.harmony_txs", "created_at": 1676639821.2112868}, "source.harmony.ethereum_db_sushi.FACT_HOURLY_TOKEN_PRICES": {"fqn": ["harmony", "ethereum_db_sushi", "FACT_HOURLY_TOKEN_PRICES"], "database": "ethereum", "schema": "CORE", "unique_id": "source.harmony.ethereum_db_sushi.FACT_HOURLY_TOKEN_PRICES", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "FACT_HOURLY_TOKEN_PRICES", "source_name": "ethereum_db_sushi", "source_description": "", "loader": "", "identifier": "FACT_HOURLY_TOKEN_PRICES", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.CORE.FACT_HOURLY_TOKEN_PRICES", "created_at": 1676639821.2114322}, "source.harmony.symbols_cross_tab.MARKET_ASSET_METADATA": {"fqn": ["harmony", "symbols_cross_tab", "MARKET_ASSET_METADATA"], "database": "FLIPSIDE_PROD_DB", "schema": "SILVER", "unique_id": "source.harmony.symbols_cross_tab.MARKET_ASSET_METADATA", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "MARKET_ASSET_METADATA", "source_name": "symbols_cross_tab", "source_description": "", "loader": "", "identifier": "MARKET_ASSET_METADATA", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "FLIPSIDE_PROD_DB.SILVER.MARKET_ASSET_METADATA", "created_at": 1676639821.2115653}}, "macros": {"macro.harmony.deduped_blocks": {"unique_id": "macro.harmony.deduped_blocks", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "macros/dedupe_utils.sql", "original_file_path": "macros/dedupe_utils.sql", "name": "deduped_blocks", "macro_sql": "{% macro deduped_blocks(table_name) -%}\n    (\n        select\n            *\n        from {{ source(\"chainwalkers\", table_name) }}\n        qualify row_number() over (partition by block_id order by ingested_at desc) = 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.44216, "supported_languages": null}, "macro.harmony.deduped_txs": {"unique_id": "macro.harmony.deduped_txs", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "macros/dedupe_utils.sql", "original_file_path": "macros/dedupe_utils.sql", "name": "deduped_txs", "macro_sql": "{% macro deduped_txs(table_name) -%}\n    (\n        select\n            *\n        from {{ source(\"chainwalkers\", table_name) }}\n        qualify row_number() over (partition by tx_id order by ingested_at desc) = 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.442632, "supported_languages": null}, "macro.harmony.generate_schema_name": {"unique_id": "macro.harmony.generate_schema_name", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4441633, "supported_languages": null}, "macro.harmony.generate_alias_name": {"unique_id": "macro.harmony.generate_alias_name", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [1] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.444998, "supported_languages": null}, "macro.harmony.incremental_load_filter": {"unique_id": "macro.harmony.incremental_load_filter", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "macros/incremental_utils.sql", "original_file_path": "macros/incremental_utils.sql", "name": "incremental_load_filter", "macro_sql": "{% macro incremental_load_filter(time_col) -%}\n    -- dbt makes it easy to query your target table by using the \"{{ this }}\" variable.\n    {% if is_incremental() %}\n      {{ time_col }} > (select max({{ time_col }}) from {{ this }})\n    {%- else -%}\n      true\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4468193, "supported_languages": null}, "macro.harmony.incremental_load_filter_2": {"unique_id": "macro.harmony.incremental_load_filter_2", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "macros/incremental_utils.sql", "original_file_path": "macros/incremental_utils.sql", "name": "incremental_load_filter_2", "macro_sql": "{% macro incremental_load_filter_2(time_col_other, time_col_this) -%}\n    -- dbt makes it easy to query your target table by using the \"{{ this }}\" variable.\n    {% if is_incremental() %}\n      {{ time_col_other }} > (select max({{ time_col_this }}) from {{ this }})\n    {%- else -%}\n      true\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4475596, "supported_languages": null}, "macro.harmony.incremental_last_x_days": {"unique_id": "macro.harmony.incremental_last_x_days", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "macros/incremental_utils.sql", "original_file_path": "macros/incremental_utils.sql", "name": "incremental_last_x_days", "macro_sql": "{% macro incremental_last_x_days(time_col, time_in_days) -%}\n    {% if is_incremental() %}\n        {{ time_col }} >= current_date() - interval '{{ time_in_days }} day'\n    {% else %}\n        true\n    {% endif %}  \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4481335, "supported_languages": null}, "macro.harmony.create_js_hex_to_int": {"unique_id": "macro.harmony.create_js_hex_to_int", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "macros/udfs/js_hextoint.sql", "original_file_path": "macros/udfs/js_hextoint.sql", "name": "create_js_hex_to_int", "macro_sql": "{% macro create_js_hex_to_int() %}\n    CREATE\n    OR REPLACE FUNCTION {{ target.schema }}.js_hex_to_int (\n        s STRING\n    ) returns DOUBLE LANGUAGE javascript AS 'if (S !== null) { yourNumber = parseInt(S, 16); } return yourNumber'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.448916, "supported_languages": null}, "macro.harmony.create_js_onetohex": {"unique_id": "macro.harmony.create_js_onetohex", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "macros/udfs/func_onetoeth.sql", "original_file_path": "macros/udfs/func_onetoeth.sql", "name": "create_js_onetohex", "macro_sql": "{% macro create_js_onetohex() -%}\ncreate or replace function {{ target.database }}.{{ target.schema }}.js_onetohex (s string)\nreturns string\nlanguage javascript\nas $$\nconst ALPHABET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\nconst ALPHABET_MAP = {};\nfor (let z = 0; z < ALPHABET.length; z++) {\n    const x = ALPHABET.charAt(z);\n    ALPHABET_MAP[x] = z;\n}\nfunction polymodStep(pre) {\n    const b = pre >> 25;\n    return (((pre & 0x1ffffff) << 5) ^\n        (-((b >> 0) & 1) & 0x3b6a57b2) ^\n        (-((b >> 1) & 1) & 0x26508e6d) ^\n        (-((b >> 2) & 1) & 0x1ea119fa) ^\n        (-((b >> 3) & 1) & 0x3d4233dd) ^\n        (-((b >> 4) & 1) & 0x2a1462b3));\n}\nfunction prefixChk(prefix) {\n    let chk = 1;\n    for (let i = 0; i < prefix.length; ++i) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            return \"Invalid prefix (\" + prefix + \")\";\n        chk = polymodStep(chk) ^ (c >> 5);\n    }\n    chk = polymodStep(chk);\n    for (let i = 0; i < prefix.length; ++i) {\n        const v = prefix.charCodeAt(i);\n        chk = polymodStep(chk) ^ (v & 0x1f);\n    }\n    return chk;\n}\nfunction convert(data, inBits, outBits, pad) {\n    let value = 0;\n    let bits = 0;\n    const maxV = (1 << outBits) - 1;\n    const result = [];\n    for (let i = 0; i < data.length; ++i) {\n        value = (value << inBits) | data[i];\n        bits += inBits;\n        while (bits >= outBits) {\n            bits -= outBits;\n            result.push((value >> bits) & maxV);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            result.push((value << (outBits - bits)) & maxV);\n        }\n    }\n    else {\n        if (bits >= inBits)\n            return \"Excess padding\";\n        if ((value << (outBits - bits)) & maxV)\n            return \"Non-zero padding\";\n    }\n    return result;\n}\nfunction toWords(bytes) {\n    return convert(bytes, 8, 5, true);\n}\nfunction fromWordsUnsafe(words) {\n    const res = convert(words, 5, 8, false);\n    if (Array.isArray(res))\n        return res;\n}\nfunction fromWords(words) {\n    const res = convert(words, 5, 8, false);\n    if (Array.isArray(res))\n        return res;\n    throw new Error(res);\n}\nfunction getLibraryFromEncoding(encoding) {\n    let ENCODING_CONST;\n    if (encoding === \"bech32\") {\n        ENCODING_CONST = 1;\n    }\n    else {\n        ENCODING_CONST = 0x2bc830a3;\n    }\n    function encode(prefix, words, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (prefix.length + 7 + words.length > LIMIT)\n            throw new TypeError(\"Exceeds length limit\");\n        prefix = prefix.toLowerCase();\n        // determine chk mod\n        let chk = prefixChk(prefix);\n        if (typeof chk === \"string\")\n            throw new Error(chk);\n        let result = prefix + \"1\";\n        for (let i = 0; i < words.length; ++i) {\n            const x = words[i];\n            if (x >> 5 !== 0)\n                throw new Error(\"Non 5-bit word\");\n            chk = polymodStep(chk) ^ x;\n            result += ALPHABET.charAt(x);\n        }\n        for (let i = 0; i < 6; ++i) {\n            chk = polymodStep(chk);\n        }\n        chk ^= ENCODING_CONST;\n        for (let i = 0; i < 6; ++i) {\n            const v = (chk >> ((5 - i) * 5)) & 0x1f;\n            result += ALPHABET.charAt(v);\n        }\n        return result;\n    }\n    function __decode(str, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (str.length < 8)\n            return str + \" too short\";\n        if (str.length > LIMIT)\n            return \"Exceeds length limit\";\n        // don\"t allow mixed case\n        const lowered = str.toLowerCase();\n        const uppered = str.toUpperCase();\n        if (str !== lowered && str !== uppered)\n            return \"Mixed-case string \" + str;\n        str = lowered;\n        const split = str.lastIndexOf(\"1\");\n        if (split === -1)\n            return \"No separator character for \" + str;\n        if (split === 0)\n            return \"Missing prefix for \" + str;\n        const prefix = str.slice(0, split);\n        const wordChars = str.slice(split + 1);\n        if (wordChars.length < 6)\n            return \"Data too short\";\n        let chk = prefixChk(prefix);\n        if (typeof chk === \"string\")\n            return chk;\n        const words = [];\n        for (let i = 0; i < wordChars.length; ++i) {\n            const c = wordChars.charAt(i);\n            const v = ALPHABET_MAP[c];\n            if (v === undefined)\n                return \"Unknown character \" + c;\n            chk = polymodStep(chk) ^ v;\n            // not in the checksum?\n            if (i + 6 >= wordChars.length)\n                continue;\n            words.push(v);\n        }\n        if (chk !== ENCODING_CONST)\n            return \"Invalid checksum for \" + str;\n        return { prefix, words };\n    }\n    function decodeUnsafe(str, LIMIT) {\n        const res = __decode(str, LIMIT);\n        if (typeof res === \"object\")\n            return res;\n    }\n    function decode(str, LIMIT) {\n        const res = __decode(str, LIMIT);\n        if (typeof res === \"object\")\n            return res;\n        throw new Error(res);\n    }\n    return {\n        decodeUnsafe,\n        decode,\n        encode,\n        toWords,\n        fromWordsUnsafe,\n        fromWords,\n    };\n}\nconst { prefix, words } = getLibraryFromEncoding(\"bech32\").decode(S);\nconst results = fromWords(words);\nreturn \"0x\"+results.map(a=>{return a.toString(16).padStart(2,\"0\")}).join(\"\");\n$$;\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.45171, "supported_languages": null}, "macro.harmony.create_java_hextoint": {"unique_id": "macro.harmony.create_java_hextoint", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "macros/udfs/func_hextoint.sql", "original_file_path": "macros/udfs/func_hextoint.sql", "name": "create_java_hextoint", "macro_sql": "{% macro create_java_hextoint() -%}\ncreate or replace function {{ target.database }}.{{ target.schema }}.java_hextoint (s string)\nreturns string\nlanguage java\nhandler='MyClass.x'\nas $$\nimport java.math.*;\nclass MyClass {\n  public static String x(String s)\n  {\n    return new BigInteger(s,16).toString();\n  }\n}\n$$;\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4526212, "supported_languages": null}, "macro.harmony.test_tx_gaps": {"unique_id": "macro.harmony.test_tx_gaps", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "macros/tests/tx_gaps.sql", "original_file_path": "macros/tests/tx_gaps.sql", "name": "test_tx_gaps", "macro_sql": "{% test tx_gaps( model, column_name, column_block, column_tx_count\n            ) %}\n    WITH block_base AS (\n        SELECT\n            {{column_block}},\n            {{column_tx_count}}\n        FROM\n            {{ ref('blocks') }}\n    ),\n    model_name AS (\n        SELECT\n            {{column_block}},\n            COUNT(\n                DISTINCT {{column_name}}\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            {{column_block}}\n    )\nSELECT\n    block_base.{{column_block}},\n    {{column_tx_count}},\n    model_name.{{column_block}},\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.{{column_block}} = model_name.{{column_block}}\nWHERE\n    {{column_tx_count}} <> model_tx_count\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4547029, "supported_languages": null}, "macro.harmony.test_sequence_gaps": {"unique_id": "macro.harmony.test_sequence_gaps", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "name": "test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4575267, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.459908, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.461021, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.461462, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4870179, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4891243, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4899395, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4921217, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4943905, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4959974, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.497458, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.49837, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4989126, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.4996228, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5002003, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.501677, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5022044, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5026565, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.504026, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.504531, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5061018, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5083914, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.509017, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.509724, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5106945, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5114136, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5123773, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5128963, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5131974, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5134926, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5138917, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.514709, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"unique_id": "macro.dbt_snowflake.snowflake__array_construct", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5155325, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5164382, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5222023, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.523249, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5251918, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5285203, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.529355, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.530125, "supported_languages": null}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.53643, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"unique_id": "macro.dbt_snowflake.py_write_table", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5370588, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"unique_id": "macro.dbt_snowflake.py_script_comment", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.537322, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5386906, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n\n  /* {#\n       If we are running multiple statements (DELETE + INSERT),\n       we must first save the model query results as a temporary table\n       in order to guarantee consistent inputs to both statements.\n\n       If we are running a single statement (MERGE or INSERT alone),\n       we can save the model query definition as a view instead,\n       for faster overall incremental processing.\n  #} */\n\n  {% if language == 'sql' and (strategy in ('default', 'append', 'merge') or (unique_key is none)) %}\n    {{ return('view') }}\n  {% else %}  {#--  play it safe -- #}\n    {{ return('table') }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5423477, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ create_view_as(tmp_relation, compiled_code) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_view_as", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.552059, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5525556, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.553994, "supported_languages": ["sql"]}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5552955, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.555839, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5563045, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5568273, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.563232, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5637226, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5643506, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5651867, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5659008, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5668132, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5673218, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5679252, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5684252, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5688782, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5694394, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5702515, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.570953, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5730045, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.573664, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5740902, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5746586, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5785813, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5789316, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5794194, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.579748, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5807621, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5812974, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5815868, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5822504, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5827878, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5834353, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5840354, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5846927, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.586758, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5873263, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5880463, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5887043, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5922594, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5960937, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.596606, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5975335, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5980825, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5990953, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.5997612, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6015167, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.602271, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.604586, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.606119, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6073818, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6088822, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6093295, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6097453, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6100698, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6105454, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6107583, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6112256, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6117036, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6132092, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6136181, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.614085, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6154335, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.617361, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6178718, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6184735, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.618965, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6197429, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6211622, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.624492, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6252663, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6258047, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.626265, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.626779, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6274936, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.628083, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6289618, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6294868, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6299543, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6315856, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6323595, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6331952, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6345537, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6352882, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6365857, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6373982, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6385286, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6389453, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6399763, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6402817, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.642746, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.643205, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6436725, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.644103, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6445644, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6449971, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6454453, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6459646, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6464338, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6468606, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6473098, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6477208, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6481733, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.648582, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6496677, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6500044, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.651235, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.651852, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6531026, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6535857, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.654825, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6553009, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6563966, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.656782, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.658608, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6598198, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.661091, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6618936, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.662323, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6634488, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6638558, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6648538, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6653247, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.666339, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6666415, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6680248, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6687477, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.670306, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.670781, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6715794, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6727202, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6731045, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6741488, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.674626, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6756635, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6759577, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6769118, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.677121, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6782165, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6785944, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6795392, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6797473, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6808302, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6812193, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6822338, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6825886, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6836843, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6841414, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6881604, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6919398, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.694185, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.694867, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.6991625, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7008643, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7017283, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7049072, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7054808, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.705921, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7063303, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.706734, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7080157, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7089052, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.70979, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7120805, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7127776, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7133093, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7140992, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7146375, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7153943, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7159152, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7166636, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7173522, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.717811, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.718646, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7207575, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7306907, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7343755, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.73797, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7404516, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7442162, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7458708, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7478416, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.748524, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7506545, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7584527, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7632418, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.763922, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7661052, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7668526, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.768719, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7820694, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.783307, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.783958, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7883084, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7896054, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7901008, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7906218, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7913744, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.7982254, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8051186, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8067353, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8072772, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8085396, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8097153, "supported_languages": null}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.81665, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8175118, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8180032, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8182576, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8186784, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.819014, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8196092, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8222342, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8227687, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8234987, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8247476, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8326218, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8331091, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8337667, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8358853, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8363495, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8368504, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8409634, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8449457, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.846431, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8472102, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8616462, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8703551, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.873001, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8736548, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8750894, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8756356, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.876012, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8764074, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8767273, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8771725, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8775086, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8789072, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8794231, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8831673, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8919642, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8933523, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.8944845, "supported_languages": null}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.89592, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.896826, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.902618, "supported_languages": ["sql"]}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.906124, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9075243, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9088635, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9100478, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9102576, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9121187, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9132977, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9143107, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.915497, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9170837, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9177806, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9186313, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9194286, "supported_languages": null}, "macro.dbt_constraints.redshift__create_primary_key": {"unique_id": "macro.dbt_constraints.redshift__create_primary_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__create_primary_key", "macro_sql": "\n{%- macro redshift__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.931224, "supported_languages": null}, "macro.dbt_constraints.redshift__create_unique_key": {"unique_id": "macro.dbt_constraints.redshift__create_unique_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__create_unique_key", "macro_sql": "\n{%- macro redshift__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9350247, "supported_languages": null}, "macro.dbt_constraints.redshift__create_not_null": {"unique_id": "macro.dbt_constraints.redshift__create_not_null", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__create_not_null", "macro_sql": "\n{%- macro redshift__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false, lookup_cache=none) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because ALTER COLUMN SET NOT NULL is not supported\", info=true) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9360526, "supported_languages": null}, "macro.dbt_constraints.redshift__create_foreign_key": {"unique_id": "macro.dbt_constraints.redshift__create_foreign_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__create_foreign_key", "macro_sql": "\n{%- macro redshift__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- set query -%}\n                --Note: ON DELETE not supported in Redshift\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) --ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endset -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.94119, "supported_languages": null}, "macro.dbt_constraints.redshift__unique_constraint_exists": {"unique_id": "macro.dbt_constraints.redshift__unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__unique_constraint_exists", "macro_sql": "\n{%- macro redshift__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name\n        , lower(kc.column_name) as column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type in ('PRIMARY KEY', 'UNIQUE')\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9439032, "supported_languages": null}, "macro.dbt_constraints.redshift__foreign_key_exists": {"unique_id": "macro.dbt_constraints.redshift__foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__foreign_key_exists", "macro_sql": "\n{%- macro redshift__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name fk_name\n        , lower(kc.column_name) as fk_column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type='FOREIGN KEY'\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9466076, "supported_languages": null}, "macro.dbt_constraints.redshift__have_references_priv": {"unique_id": "macro.dbt_constraints.redshift__have_references_priv", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__have_references_priv", "macro_sql": "{%- macro redshift__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9484382, "supported_languages": null}, "macro.dbt_constraints.redshift__have_ownership_priv": {"unique_id": "macro.dbt_constraints.redshift__have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__have_ownership_priv", "macro_sql": "{%- macro redshift__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.950279, "supported_languages": null}, "macro.dbt_constraints.redshift__drop_referential_constraints": {"unique_id": "macro.dbt_constraints.redshift__drop_referential_constraints", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__drop_referential_constraints", "macro_sql": "{% macro redshift__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- set query -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT \"{{constraint_name}}\" CASCADE\n        {%- endset -%}\n        {%- do run_query(query) -%}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9519207, "supported_languages": null}, "macro.dbt_constraints.redshift__truncate_relation": {"unique_id": "macro.dbt_constraints.redshift__truncate_relation", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__truncate_relation", "macro_sql": "{% macro redshift__truncate_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.95257, "supported_languages": null}, "macro.dbt_constraints.redshift__drop_relation": {"unique_id": "macro.dbt_constraints.redshift__drop_relation", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__drop_relation", "macro_sql": "{% macro redshift__drop_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9532042, "supported_languages": null}, "macro.dbt_constraints.default__test_primary_key": {"unique_id": "macro.dbt_constraints.default__test_primary_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "default__test_primary_key", "macro_sql": "\n{%- macro default__test_primary_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"primary key\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns. In\n    addition, if the unique constraint was defined with PRIMARY KEY,\n    then it requires that none of the values in the specified column or\n    columns be the null value.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return for any duplicates and if any of the key columns is null -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}, count(*) as row_count\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n        {% for column in column_names -%}\n        or {{column}} is null\n        {% endfor %}\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.956681, "supported_languages": null}, "macro.dbt_constraints.default__test_unique_key": {"unique_id": "macro.dbt_constraints.default__test_unique_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "default__test_unique_key", "macro_sql": "\n{%- macro default__test_unique_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"unique constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return any duplicates -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9574778, "supported_languages": null}, "macro.dbt_constraints.default__test_foreign_key": {"unique_id": "macro.dbt_constraints.default__test_foreign_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "default__test_foreign_key", "macro_sql": "\n{%- macro default__test_foreign_key(model, fk_column_names, pk_table_name, pk_column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"referential constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A referential constraint is satisfied if one of the following con-\n    ditions is true, depending on the <match option> specified in the\n    <referential constraint definition>:\n\n    -  If no <match type> was specified then, for each row R1 of the\n        referencing table, either at least one of the values of the\n        referencing columns in R1 shall be a null value, or the value of\n        each referencing column in R1 shall be equal to the value of the\n        corresponding referenced column in some row of the referenced\n        table.\"\n\nThe implications of this standard is that if one column is NULL in a compound foreign key, the other column\ndoes NOT need to match a row in a referenced unique key. This is implemented by first excluding any\nrows from the test that have a NULL value in any of the columns.\n#}\n\n{%- set fk_columns_list=dbt_constraints.get_quoted_column_list(fk_column_names, quote_columns) %}\n{%- set pk_columns_list=dbt_constraints.get_quoted_column_list(pk_column_names, quote_columns) %}\n{%- set fk_columns_csv=dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) %}\n{%- set pk_columns_csv=dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) %}\n{%- set join_conditions = [] -%}\n{%- for x in range(fk_columns_list|count) -%}\n    {%- set join_conditions = join_conditions.append( 'parent.' ~ pk_columns_list[x] ~ ' = child.' ~ fk_columns_list[x] ) -%}\n{%- endfor -%}\n\n{#- This test will return if all the columns are not null\n    and the values are not found in the referenced PK table #}\nwith child as (\n  select\n    {{fk_columns_csv}}\n  from {{model}}\n  where 1=1\n        {% for column in fk_columns_list -%}\n        and {{column}} is not null\n        {% endfor %}\n),\n\nparent as (\n    select\n        {{pk_columns_csv}}\n    from {{pk_table_name}}\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on {{join_conditions | join(' and ')}}\n\n    where parent.{{pk_columns_list | first}} is null\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9602983, "supported_languages": null}, "macro.dbt_constraints.get_quoted_column_list": {"unique_id": "macro.dbt_constraints.get_quoted_column_list", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "get_quoted_column_list", "macro_sql": "{%- macro get_quoted_column_list(column_array, quote_columns=false) -%}\n\n    {%- if not quote_columns -%}\n        {%- set column_list=column_array -%}\n    {%- elif quote_columns -%}\n        {%- set column_list=[] -%}\n        {%- for column in column_array -%}\n            {%- set column_list = column_list.append( adapter.quote(column) ) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {{ exceptions.raise_compiler_error(\n            \"`quote_columns` argument must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n        ) }}\n    {%- endif -%}\n\n    {{ return(column_list) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9618108, "supported_languages": null}, "macro.dbt_constraints.get_quoted_column_csv": {"unique_id": "macro.dbt_constraints.get_quoted_column_csv", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "get_quoted_column_csv", "macro_sql": "{%- macro get_quoted_column_csv(column_array, quote_columns=false) -%}\n\n    {%- set column_list = dbt_constraints.get_quoted_column_list(column_array, quote_columns) -%}\n    {%- set columns_csv=column_list | join(', ') -%}\n    {{ return(columns_csv) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9626415, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_primary_key": {"unique_id": "macro.dbt_constraints.snowflake__create_primary_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__create_primary_key", "macro_sql": "\n{%- macro snowflake__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9765384, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_unique_key": {"unique_id": "macro.dbt_constraints.snowflake__create_unique_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__create_unique_key", "macro_sql": "\n{%- macro snowflake__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9801142, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_foreign_key": {"unique_id": "macro.dbt_constraints.snowflake__create_foreign_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__create_foreign_key", "macro_sql": "\n{%- macro snowflake__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set query -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) RELY\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name: fk_column_names} }) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9847817, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_not_null": {"unique_id": "macro.dbt_constraints.snowflake__create_not_null", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__create_not_null", "macro_sql": "\n{%- macro snowflake__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n\n    {%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n    {%- set columns_to_change = [] -%}\n    {%- for column_name in column_names if column_name not in existing_not_null_col -%}\n        {%- do columns_to_change.append(column_name) -%}\n        {%- do existing_not_null_col.append(column_name) -%}\n    {%- endfor -%}\n    {%- if columns_to_change|count > 0 -%}\n        {%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set modify_statements= [] -%}\n                {%- for column in columns_list -%}\n                    {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n                {%- endfor -%}\n                {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n                {%- set query -%}\n                    ALTER TABLE {{table_relation}} MODIFY {{ modify_statement_csv }};\n                {%- endset -%}\n                {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n                {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9894915, "supported_languages": null}, "macro.dbt_constraints.snowflake__unique_constraint_exists": {"unique_id": "macro.dbt_constraints.snowflake__unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__unique_constraint_exists", "macro_sql": "\n{%- macro snowflake__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.unique_keys -%}\n        {%- set cached_unique_keys = lookup_cache.unique_keys[table_relation] -%}\n        {%- for cached_columns in cached_unique_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    SHOW UNIQUE KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    SHOW PRIMARY KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639817.9960792, "supported_languages": null}, "macro.dbt_constraints.snowflake__foreign_key_exists": {"unique_id": "macro.dbt_constraints.snowflake__foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__foreign_key_exists", "macro_sql": "\n{%- macro snowflake__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.foreign_keys -%}\n        {%- set cached_foreign_keys = lookup_cache.foreign_keys[table_relation] -%}\n        {%- for cached_columns in cached_foreign_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    SHOW IMPORTED KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.foreign_keys.update({table_relation: {constraint.key_name: constraint.columns[\"fk_column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0003483, "supported_languages": null}, "macro.dbt_constraints.snowflake__have_references_priv": {"unique_id": "macro.dbt_constraints.snowflake__have_references_priv", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__have_references_priv", "macro_sql": "{%- macro snowflake__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0016649, "supported_languages": null}, "macro.dbt_constraints.snowflake__have_ownership_priv": {"unique_id": "macro.dbt_constraints.snowflake__have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__have_ownership_priv", "macro_sql": "{%- macro snowflake__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0029168, "supported_languages": null}, "macro.dbt_constraints.snowflake__lookup_table_privileges": {"unique_id": "macro.dbt_constraints.snowflake__lookup_table_privileges", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__lookup_table_privileges", "macro_sql": "{%- macro snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n    {%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- set lookup_query -%}\n        select distinct\n            upper(tp.table_schema) as \"table_schema\",\n            upper(tp.table_name) as \"table_name\",\n            tp.privilege_type as \"privilege_type\"\n        from {{table_relation.database}}.information_schema.table_privileges tp\n        where is_role_in_session(tp.grantee)\n            and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n        {%- set privilege_list = run_query(lookup_query) -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n    {%- set tab_priv_list = [] -%}\n    {%- set schema_name = table_relation.schema|upper -%}\n    {%- set table_name = table_relation.identifier|upper -%}\n    {%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0056655, "supported_languages": null}, "macro.dbt_constraints.snowflake__lookup_table_columns": {"unique_id": "macro.dbt_constraints.snowflake__lookup_table_columns", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__lookup_table_columns", "macro_sql": "{%- macro snowflake__lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n        SHOW COLUMNS IN TABLE {{table_relation}}\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n\n        {%- set not_null_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['null?'] == 'false' -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0082114, "supported_languages": null}, "macro.dbt_constraints.test_primary_key": {"unique_id": "macro.dbt_constraints.test_primary_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "test_primary_key", "macro_sql": "\n\n{%- test primary_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_primary_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.default__test_primary_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0204747, "supported_languages": null}, "macro.dbt_constraints.test_unique_key": {"unique_id": "macro.dbt_constraints.test_unique_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "test_unique_key", "macro_sql": "{%- test unique_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_unique_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.default__test_unique_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0217352, "supported_languages": null}, "macro.dbt_constraints.test_foreign_key": {"unique_id": "macro.dbt_constraints.test_foreign_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "test_foreign_key", "macro_sql": "{%- test foreign_key(model,\n        column_name=none, fk_column_name=none, fk_column_names=[],\n        pk_table_name=none, to=none,\n        pk_column_name=none, pk_column_names=[], field=none,\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if pk_column_names|count == 0 and (pk_column_name or field) -%}\n        {%- do pk_column_names.append( (pk_column_name or field) ) -%}\n    {%- endif -%}\n    {%- if fk_column_names|count == 0 and (fk_column_name or column_name) -%}\n        {%- do fk_column_names.append( (fk_column_name or column_name) ) -%}\n    {%- endif -%}\n    {%- set pk_table_name = pk_table_name or to -%}\n\n    {{ return(adapter.dispatch('test_foreign_key', 'dbt_constraints')(model, fk_column_names, pk_table_name, pk_column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.default__test_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.02425, "supported_languages": null}, "macro.dbt_constraints.create_primary_key": {"unique_id": "macro.dbt_constraints.create_primary_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_primary_key", "macro_sql": "\n\n{%- macro create_primary_key(table_model, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {{ return(adapter.dispatch('create_primary_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_primary_key"]}, "description": "Calls the adapter-specific version of the macro to create a primary key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1676639821.1949792, "supported_languages": null}, "macro.dbt_constraints.create_unique_key": {"unique_id": "macro.dbt_constraints.create_unique_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_unique_key", "macro_sql": "{%- macro create_unique_key(table_model, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {{ return(adapter.dispatch('create_unique_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_unique_key"]}, "description": "Calls the adapter-specific version of the macro to create a unique key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1676639821.198871, "supported_languages": null}, "macro.dbt_constraints.create_foreign_key": {"unique_id": "macro.dbt_constraints.create_foreign_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_foreign_key", "macro_sql": "{%- macro create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {{ return(adapter.dispatch('create_foreign_key', 'dbt_constraints')(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_foreign_key"]}, "description": "Calls the adapter-specific version of the macro to create a foreign key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "test_model", "type": "results node", "description": "Accepts the result node of the test related to this constraint"}, {"name": "pk_model", "type": "graph node", "description": "Accepts the graph node of the parent table that has a PK or UK"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the FK reference"}, {"name": "fk_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "fk_column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1676639821.2049942, "supported_languages": null}, "macro.dbt_constraints.create_not_null": {"unique_id": "macro.dbt_constraints.create_not_null", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_not_null", "macro_sql": "{%- macro create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n    {{ return(adapter.dispatch('create_not_null', 'dbt_constraints')(table_relation, column_names, verify_permissions, quote_columns, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.027864, "supported_languages": null}, "macro.dbt_constraints.unique_constraint_exists": {"unique_id": "macro.dbt_constraints.unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "unique_constraint_exists", "macro_sql": "\n\n{%- macro unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('unique_constraint_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache) ) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__unique_constraint_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a PK or UK already exists", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1676639821.207222, "supported_languages": null}, "macro.dbt_constraints.foreign_key_exists": {"unique_id": "macro.dbt_constraints.foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "foreign_key_exists", "macro_sql": "{%- macro foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('foreign_key_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__foreign_key_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a foreign key already exists", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1676639821.2094002, "supported_languages": null}, "macro.dbt_constraints.have_references_priv": {"unique_id": "macro.dbt_constraints.have_references_priv", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "have_references_priv", "macro_sql": "\n\n{%- macro have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_references_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache) ) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0297701, "supported_languages": null}, "macro.dbt_constraints.have_ownership_priv": {"unique_id": "macro.dbt_constraints.have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "have_ownership_priv", "macro_sql": "{%- macro have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_ownership_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache)) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0304046, "supported_languages": null}, "macro.dbt_constraints.truncate_relation": {"unique_id": "macro.dbt_constraints.truncate_relation", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0308697, "supported_languages": null}, "macro.dbt_constraints.drop_relation": {"unique_id": "macro.dbt_constraints.drop_relation", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0313268, "supported_languages": null}, "macro.dbt_constraints.create_constraints": {"unique_id": "macro.dbt_constraints.create_constraints", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_constraints", "macro_sql": "\n{%- macro create_constraints(\n        constraint_types=[\n            'primary_key',\n            'unique_key',\n            'unique_combination_of_columns',\n            'unique',\n            'foreign_key',\n            'relationships',\n            'not_null'],\n        quote_columns=false) -%}\n    {%- if execute and var('dbt_constraints_enabled', false) and results -%}\n        {%- do log(\"Running dbt Constraints\", info=true) -%}\n\n        {%- set lookup_cache = {\n            \"table_columns\": { },\n            \"table_privileges\": { },\n            \"unique_keys\": { },\n            \"not_null_col\": { },\n            \"foreign_keys\": { } } -%}\n\n        {%- if 'not_null' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['not_null'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'primary_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['primary_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_combination_of_columns' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_combination_of_columns'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'foreign_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['foreign_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'relationships' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['relationships'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n\n        {%- do log(\"Finished dbt Constraints\", info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.create_constraints_by_type"]}, "description": "Primary macro automatically called `on-run-end` to generate primary keys, unique keys, and foreign keys. The `dbt_constraints_enabled` variable can be set to `false` in your project to disable this macro.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "constraint_types", "type": "array of constraint types", "description": "Accepts a list of tests to consider for constraint creation and whether columns should be quoted. By default it will create all the constraint types. Valid values are ['primary_key', 'unique_key', 'unique_combination_of_columns', 'unique', 'foreign_key', 'relationships']"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1676639821.1910398, "supported_languages": null}, "macro.dbt_constraints.create_constraints_by_type": {"unique_id": "macro.dbt_constraints.create_constraints_by_type", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_constraints_by_type", "macro_sql": "\n{%- macro create_constraints_by_type(constraint_types, quote_columns, lookup_cache) -%}\n\n    {#- Loop through the results and find all tests that passed and match the constraint_types -#}\n    {#- Issue #2: added condition that the where config must be empty -#}\n    {%- for res in results\n        if res.status == \"pass\"\n            and res.node.config.materialized == \"test\"\n            and res.node.test_metadata\n            and res.node.test_metadata.name is in( constraint_types )\n            and res.node.config.where is none -%}\n\n        {%- set test_model = res.node -%}\n        {%- set test_parameters = test_model.test_metadata.kwargs -%}\n        {% set ns = namespace(verify_permissions=false) %}\n\n        {#- Find the table models that are referenced by this test.\n            These models must be physical tables and cannot be sources -#}\n        {%- set table_models = [] -%}\n        {%- for node in graph.nodes.values() | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes)\n                if node.resource_type in ( ( \"model\", \"snapshot\", \"seed\") )\n                    if node.config.materialized in( (\"table\", \"incremental\", \"snapshot\", \"seed\") ) -%}\n\n                        {#- Append to our list of models &or snapshots for this test -#}\n                        {%- do table_models.append(node) -%}\n\n        {% endfor %}\n\n        {#- Check if we allow constraints on sources overall and for this specific type of constraint -#}\n        {%- if var('dbt_constraints_sources_enabled', false) and (\n                ( var('dbt_constraints_sources_pk_enabled', false) and test_model.test_metadata.name in(\"primary_key\") )\n             or ( var('dbt_constraints_sources_uk_enabled', false) and test_model.test_metadata.name in(\"unique_key\", \"unique_combination_of_columns\", \"unique\") )\n             or ( var('dbt_constraints_sources_fk_enabled', false) and test_model.test_metadata.name in(\"foreign_key\", \"relationships\") )\n             or ( var('dbt_constraints_sources_nn_enabled', false) and test_model.test_metadata.name in(\"not_null\") )\n            ) -%}\n            {%- for node in graph.sources.values()\n                | selectattr(\"resource_type\", \"equalto\", \"source\")\n                | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes) -%}\n\n                    {%- do node.update({'alias': node.alias or node.name }) -%}\n                    {#- Append to our list of models for this test -#}\n                    {%- do table_models.append(node) -%}\n                    {#- If we are using a sources, we will need to verify permissions -#}\n                    {%- set ns.verify_permissions = true -%}\n\n            {%- endfor -%}\n        {%- endif -%}\n\n\n        {#- We only create PK/UK if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- if 1 == table_models|count\n            and test_model.test_metadata.name in(\"primary_key\", \"unique_key\", \"unique_combination_of_columns\", \"unique\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for primary/unique key constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                {%- if test_model.test_metadata.name == \"primary_key\" -%}\n                    {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache) -%}\n                    {%- do dbt_constraints.create_primary_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_unique_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping primary/unique key because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create FK if there are two models referenced by the test\n            and if all the columns exist as physical columns on the tables -#}\n        {%- elif 2 == table_models|count\n            and test_model.test_metadata.name in( \"foreign_key\", \"relationships\") -%}\n\n            {%- set fk_model = none -%}\n            {%- set pk_model = none -%}\n            {%- set fk_model_names = modules.re.findall( \"(models|snapshots|seeds)\\W+(\\w+)\" , test_model.file_key_name)  -%}\n            {%- set fk_source_names = modules.re.findall( \"source\\W+(\\w+)\\W+(\\w+)\" , test_parameters.model)  -%}\n\n            {%- if 1 == fk_model_names | count -%}\n                {%- set fk_model = table_models | selectattr(\"name\", \"equalto\", fk_model_names[0][1]) | first -%}\n                {%- set pk_model = table_models | rejectattr(\"name\", \"equalto\", fk_model_names[0][1]) | first -%}\n            {%- elif 1 == fk_source_names | count  -%}\n                {%- if table_models[0].source_name == fk_source_names[0][0] and table_models[0].name == fk_source_names[0][1] -%}\n                    {%- set fk_model = table_models[0] -%}\n                    {%- set pk_model = table_models[1] -%}\n                {%- else  -%}\n                    {%- set fk_model = table_models[1] -%}\n                    {%- set pk_model = table_models[0] -%}\n                {%- endif -%}\n            {%- endif -%}\n            {# {%- set fk_model_name = test_model.file_key_name |replace(\"models.\", \"\") -%} #}\n\n            {%- if fk_model and pk_model -%}\n\n                {%- set fk_table_relation = api.Relation.create(\n                    database=fk_model.database,\n                    schema=fk_model.schema,\n                    identifier=fk_model.alias) -%}\n\n                {%- set pk_table_relation = api.Relation.create(\n                    database=pk_model.database,\n                    schema=pk_model.schema,\n                    identifier=pk_model.alias) -%}\n\n                {# Attempt to identify parameters we can use for the column names #}\n                {%- set pk_column_names = [] -%}\n                {%- if  test_parameters.pk_column_names -%}\n                    {%- set pk_column_names = test_parameters.pk_column_names -%}\n                {%- elif  test_parameters.field -%}\n                    {%- set pk_column_names = [test_parameters.field] -%}\n                {%- elif test_parameters.pk_column_name -%}\n                    {%- set pk_column_names = [test_parameters.pk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`pk_column_names`, `pk_column_name`, or `field` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- set fk_column_names = [] -%}\n                {%- if  test_parameters.fk_column_names -%}\n                    {%- set fk_column_names = test_parameters.fk_column_names -%}\n                {%- elif test_parameters.column_name -%}\n                    {%- set fk_column_names = [test_parameters.column_name] -%}\n                {%- elif test_parameters.fk_column_name -%}\n                    {%- set fk_column_names = [test_parameters.fk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`fk_column_names`, `fk_column_name`, or `column_name` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- if not dbt_constraints.table_columns_all_exist(pk_table_relation, pk_column_names, lookup_cache) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the pk table: \" ~ pk_model.name ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- elif not dbt_constraints.table_columns_all_exist(fk_table_relation, fk_column_names, lookup_cache) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the fk table: \" ~ fk_model.name ~ \" \" ~ fk_column_names, info=true) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping foreign key because a we couldn't find the child table: model=\" ~ fk_model_names ~ \" or source=\" ~ fk_source_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create NN if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- elif 1 == table_models|count\n            and test_model.test_metadata.name in(\"not_null\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for not null constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache) -%}\n            {%- else  -%}\n                {%- do log(\"Skipping not null constraint because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.table_columns_all_exist", "macro.dbt_constraints.create_not_null", "macro.dbt_constraints.create_primary_key", "macro.dbt_constraints.create_unique_key", "macro.dbt_constraints.create_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.059438, "supported_languages": null}, "macro.dbt_constraints.table_columns_all_exist": {"unique_id": "macro.dbt_constraints.table_columns_all_exist", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "table_columns_all_exist", "macro_sql": "\n{%- macro table_columns_all_exist(table_relation, column_list, lookup_cache) -%}\n    {%- set tab_column_list = dbt_constraints.lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- for column in column_list|map('upper') if column not in tab_column_list -%}\n        {{ return(false) }}\n    {%- endfor -%}\n    {{ return(true) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.lookup_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.060618, "supported_languages": null}, "macro.dbt_constraints.lookup_table_columns": {"unique_id": "macro.dbt_constraints.lookup_table_columns", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "lookup_table_columns", "macro_sql": "{%- macro lookup_table_columns(table_relation, lookup_cache) -%}\n    {{ return(adapter.dispatch('lookup_table_columns', 'dbt_constraints')(table_relation, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0612376, "supported_languages": null}, "macro.dbt_constraints.default__lookup_table_columns": {"unique_id": "macro.dbt_constraints.default__lookup_table_columns", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "default__lookup_table_columns", "macro_sql": "{%- macro default__lookup_table_columns(table_relation, lookup_cache) -%}\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set tab_Columns = adapter.get_columns_in_relation(table_relation) -%}\n\n        {%- set tab_column_list = [] -%}\n        {%- for column in tab_Columns -%}\n            {{ tab_column_list.append(column.name|upper) }}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: tab_column_list }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0627983, "supported_languages": null}, "macro.dbt_constraints.column_list_matches": {"unique_id": "macro.dbt_constraints.column_list_matches", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "column_list_matches", "macro_sql": "\n{%- macro column_list_matches(listA, listB) -%}\n    {# Test if A is empty or the lists are not the same size #}\n    {%- if listA | count > 0 and listA | count == listB | count  -%}\n        {# Fail if there are any columns in A that are not in B #}\n        {%- for valueFromA in listA|map('upper') -%}\n            {%- if valueFromA|upper not in listB| map('upper')  -%}\n                {{ return(false) }}\n            {%- endif -%}\n        {% endfor %}\n        {# Since we know the count is the same, A must equal B #}\n        {{ return(true) }}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0643344, "supported_languages": null}, "macro.dbt_constraints.postgres__create_primary_key": {"unique_id": "macro.dbt_constraints.postgres__create_primary_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__create_primary_key", "macro_sql": "\n{%- macro postgres__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_pk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0768929, "supported_languages": null}, "macro.dbt_constraints.postgres__create_unique_key": {"unique_id": "macro.dbt_constraints.postgres__create_unique_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__create_unique_key", "macro_sql": "\n{%- macro postgres__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_uk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0809453, "supported_languages": null}, "macro.dbt_constraints.postgres__create_not_null": {"unique_id": "macro.dbt_constraints.postgres__create_not_null", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__create_not_null", "macro_sql": "\n{%- macro postgres__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false, lookup_cache=none) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"ALTER COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- call statement('add_nn', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{table_relation}} {{ modify_statement_csv }};\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0839002, "supported_languages": null}, "macro.dbt_constraints.postgres__create_foreign_key": {"unique_id": "macro.dbt_constraints.postgres__create_foreign_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__create_foreign_key", "macro_sql": "\n{%- macro postgres__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- call statement('add_fk', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endcall -%}\n                {{ adapter.commit() }}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0892668, "supported_languages": null}, "macro.dbt_constraints.postgres__unique_constraint_exists": {"unique_id": "macro.dbt_constraints.postgres__unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__unique_constraint_exists", "macro_sql": "\n{%- macro postgres__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as constraint_name\n        , upper(col.attname) as column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('p', 'u')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0920436, "supported_languages": null}, "macro.dbt_constraints.postgres__foreign_key_exists": {"unique_id": "macro.dbt_constraints.postgres__foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__foreign_key_exists", "macro_sql": "\n{%- macro postgres__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as fk_name\n        , upper(col.attname) as fk_column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('f')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by fk_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0947595, "supported_languages": null}, "macro.dbt_constraints.postgres__have_references_priv": {"unique_id": "macro.dbt_constraints.postgres__have_references_priv", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__have_references_priv", "macro_sql": "{%- macro postgres__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0966043, "supported_languages": null}, "macro.dbt_constraints.postgres__have_ownership_priv": {"unique_id": "macro.dbt_constraints.postgres__have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__have_ownership_priv", "macro_sql": "{%- macro postgres__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.0984495, "supported_languages": null}, "macro.dbt_constraints.postgres__drop_referential_constraints": {"unique_id": "macro.dbt_constraints.postgres__drop_referential_constraints", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__drop_referential_constraints", "macro_sql": "{% macro postgres__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- call statement('drop_constraint_cascade', fetch_result=False, auto_begin=True) -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT IF EXISTS \"{{constraint_name}}\" CASCADE\n        {%- endcall -%}\n        {{ adapter.commit() }}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.100213, "supported_languages": null}, "macro.dbt_constraints.postgres__truncate_relation": {"unique_id": "macro.dbt_constraints.postgres__truncate_relation", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__truncate_relation", "macro_sql": "{% macro postgres__truncate_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.100843, "supported_languages": null}, "macro.dbt_constraints.postgres__drop_relation": {"unique_id": "macro.dbt_constraints.postgres__drop_relation", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__drop_relation", "macro_sql": "{% macro postgres__drop_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1014779, "supported_languages": null}, "macro.dbt_constraints.oracle__create_primary_key": {"unique_id": "macro.dbt_constraints.oracle__create_primary_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__create_primary_key", "macro_sql": "\n{%- macro oracle__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'PK_' ||  ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1120713, "supported_languages": null}, "macro.dbt_constraints.oracle__create_unique_key": {"unique_id": "macro.dbt_constraints.oracle__create_unique_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__create_unique_key", "macro_sql": "\n{%- macro oracle__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1161172, "supported_languages": null}, "macro.dbt_constraints.oracle__create_foreign_key": {"unique_id": "macro.dbt_constraints.oracle__create_foreign_key", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__create_foreign_key", "macro_sql": "\n{%- macro oracle__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1212173, "supported_languages": null}, "macro.dbt_constraints.oracle__create_not_null": {"unique_id": "macro.dbt_constraints.oracle__create_not_null", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__create_not_null", "macro_sql": "\n{%- macro oracle__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( column ~ \" NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} MODIFY ( {{ modify_statement_csv }} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.123971, "supported_languages": null}, "macro.dbt_constraints.oracle__unique_constraint_exists": {"unique_id": "macro.dbt_constraints.oracle__unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__unique_constraint_exists", "macro_sql": "\n{%- macro oracle__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"constraint_name\",\n    upper(cols.column_name) as \"column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'P', 'U' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.126718, "supported_languages": null}, "macro.dbt_constraints.oracle__foreign_key_exists": {"unique_id": "macro.dbt_constraints.oracle__foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__foreign_key_exists", "macro_sql": "\n{%- macro oracle__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"fk_name\",\n    upper(cols.column_name) as \"fk_column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'R' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1294136, "supported_languages": null}, "macro.dbt_constraints.oracle__have_references_priv": {"unique_id": "macro.dbt_constraints.oracle__have_references_priv", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__have_references_priv", "macro_sql": "\n{%- macro oracle__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1298356, "supported_languages": null}, "macro.dbt_constraints.oracle__have_ownership_priv": {"unique_id": "macro.dbt_constraints.oracle__have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__have_ownership_priv", "macro_sql": "\n{%- macro oracle__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.130224, "supported_languages": null}, "macro.dbt_constraints.oracle__drop_referential_constraints": {"unique_id": "macro.dbt_constraints.oracle__drop_referential_constraints", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__drop_referential_constraints", "macro_sql": "{% macro oracle__drop_referential_constraints(relation) -%}\n    {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.130909, "supported_languages": null}, "macro.dbt_constraints.oracle__truncate_relation": {"unique_id": "macro.dbt_constraints.oracle__truncate_relation", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__truncate_relation", "macro_sql": "{% macro oracle__truncate_relation(relation) -%}\n    {%- do log(\"Truncating table \" ~ relation, info=true) -%}\n    {{ oracle__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.oracle__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.131766, "supported_languages": null}, "macro.dbt_constraints.oracle__drop_relation": {"unique_id": "macro.dbt_constraints.oracle__drop_relation", "package_name": "dbt_constraints", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__drop_relation", "macro_sql": "{% macro oracle__drop_relation(relation) -%}\n    {%- do log(\"Dropping table \" ~ relation, info=true) -%}\n        {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\n    FOR REC IN (\n        SELECT owner, table_name\n        FROM all_tables\n        WHERE upper(owner) = '{{relation.schema|upper}}'\n            AND upper(table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'DROP TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" CASCADE CONSTRAINTS';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop table: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1329238, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1348884, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1354535, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.135995, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1364207, "supported_languages": null}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1368432, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1381638, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1383743, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1385803, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1387827, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.139232, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1394315, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1396258, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1398184, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.141248, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.141852, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1424427, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1435285, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1438198, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1441002, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1445699, "supported_languages": null}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1454947, "supported_languages": null}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.146625, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1468487, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.147056, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1472871, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1474962, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1476986, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.150935, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.153454, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1565251, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1602366, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1616862, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1637597, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.164716, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1673028, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1686602, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1696925, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1711457, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1723576, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1761706, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_utils.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.17844, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1797922, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.181382, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1847851, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1862974, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1895828, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1930044, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.194478, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.1978369, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2016516, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2031295, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.205102, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2075727, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2093875, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.212283, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2144432, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2152817, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.217514, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2190669, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.224941, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.226625, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2298543, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2401795, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2412581, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2415626, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2441316, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2463334, "supported_languages": null}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.254515, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2561798, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2575505, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2612877, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2636335, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.264497, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2663329, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.268102, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2691848, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2718225, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2734559, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2750516, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2771518, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2787778, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.28157, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2843702, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.287083, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2888422, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.29263, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.29659, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.2984505, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.300814, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.302791, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3097553, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.313282, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3155005, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3180077, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3202384, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3237, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3259964, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3278506, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.330129, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.332808, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3343432, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3365273, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3386385, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3404522, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3425791, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3450444, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3472972, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.349419, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3515408, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3540757, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.356608, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.358885, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3609107, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3756123, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3825226, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3894696, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3918405, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3951547, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3967302, "supported_languages": null}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.398394, "supported_languages": null}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3988287, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.3996844, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4004366, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.402035, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4026592, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4030585, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4034448, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4064422, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4074383, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4078872, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4083564, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4093049, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4098637, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4114983, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4119534, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4123452, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4127352, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.41313, "supported_languages": null}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4146504, "supported_languages": null}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4156866, "supported_languages": null}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4165392, "supported_languages": null}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4175878, "supported_languages": null}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4185083, "supported_languages": null}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4193287, "supported_languages": null}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4202719, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4216228, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.422932, "supported_languages": null}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4239516, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.426701, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.427473, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4282334, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4296072, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4307804, "supported_languages": null}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4316566, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.433013, "supported_languages": null}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4341023, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.435219, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.435627, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.436026, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4363184, "supported_languages": null}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4371393, "supported_languages": null}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4387941, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.439342, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4397626, "supported_languages": null}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4409425, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.441355, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4417565, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4423018, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.44382, "supported_languages": null}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4446564, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4463627, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4469242, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4473228, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4477265, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.448139, "supported_languages": null}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.449051, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4495904, "supported_languages": null}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.45053, "supported_languages": null}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4516132, "supported_languages": null}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4519851, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.452354, "supported_languages": null}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4539006, "supported_languages": null}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4543085, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4548848, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.45564, "supported_languages": null}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4566953, "supported_languages": null}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4577038, "supported_languages": null}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.46133, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4622056, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4634023, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4642441, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4654887, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.46658, "supported_languages": null}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4681435, "supported_languages": null}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.46874, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4693246, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.469904, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.470485, "supported_languages": null}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4722576, "supported_languages": null}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4728656, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4734583, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4740667, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4746575, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.47633, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4774582, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4787147, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4793687, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.481433, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4840565, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4859254, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4873195, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4888437, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4894714, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.490707, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4912167, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4925177, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4933772, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4952617, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4970975, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4985366, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.4995065, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.500955, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5014403, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.503076, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.504077, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5059428, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5070527, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5129893, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5174432, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5190742, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5199509, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5214286, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.521932, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5236983, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5256054, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5270224, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.528544, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.529783, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5311856, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.53261, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.534557, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5357535, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5366838, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5405838, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5471284, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.549101, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5508685, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5515416, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5525765, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5538049, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5548053, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5567153, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.55925, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5651765, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5658107, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5664508, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.567007, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.567482, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5679677, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5700612, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5731878, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5751677, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.577689, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5791547, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5799837, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5850375, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5939815, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.595275, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5962956, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5976233, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.597901, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.5981374, "supported_languages": null}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.598366, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.599705, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6014836, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6028855, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6037273, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6061473, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6069565, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6085732, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.611095, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6144824, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6152813, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.617427, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6189463, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6207314, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6235304, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6263223, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6308117, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6323743, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6345139, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.637362, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6398902, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.641009, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.641735, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6438105, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6450436, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.645588, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6471088, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6481602, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6486647, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6497753, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.650517, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6515627, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6520283, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6536922, "supported_languages": null}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6549146, "supported_languages": null}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.655321, "supported_languages": null}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6557221, "supported_languages": null}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6561108, "supported_languages": null}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6572921, "supported_languages": null}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6575873, "supported_languages": null}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6578948, "supported_languages": null}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.65818, "supported_languages": null}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6592968, "supported_languages": null}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.659605, "supported_languages": null}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.659895, "supported_languages": null}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6611147, "supported_languages": null}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6615944, "supported_languages": null}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6669052, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6673977, "supported_languages": null}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6678667, "supported_languages": null}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6733696, "supported_languages": null}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6739547, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6756027, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6759293, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6761322, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.67633, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6767771, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.677094, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6775115, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.677849, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6782324, "supported_languages": null}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6798806, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.680351, "supported_languages": null}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6808152, "supported_languages": null}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6812747, "supported_languages": null}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.681845, "supported_languages": null}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6837826, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6839926, "supported_languages": null}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6842, "supported_languages": null}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6843991, "supported_languages": null}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6846008, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6850576, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6852603, "supported_languages": null}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6854594, "supported_languages": null}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.685801, "supported_languages": null}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6862783, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6864784, "supported_languages": null}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.686673, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6871176, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6873147, "supported_languages": null}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6875088, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6879644, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.688163, "supported_languages": null}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6883578, "supported_languages": null}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6887987, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.688995, "supported_languages": null}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6891878, "supported_languages": null}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6905117, "supported_languages": null}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6909165, "supported_languages": null}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6913054, "supported_languages": null}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6958718, "supported_languages": null}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6970818, "supported_languages": null}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.697938, "supported_languages": null}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.6990829, "supported_languages": null}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7020862, "supported_languages": null}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7038178, "supported_languages": null}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.704591, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7050068, "supported_languages": null}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7061672, "supported_languages": null}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7066674, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7079632, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.708362, "supported_languages": null}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7087276, "supported_languages": null}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7090867, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7102578, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7106812, "supported_languages": null}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7110424, "supported_languages": null}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7121747, "supported_languages": null}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7124906, "supported_languages": null}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7128024, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7158048, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7171907, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7187178, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7192783, "supported_languages": null}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7209551, "supported_languages": null}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.721664, "supported_languages": null}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.722092, "supported_languages": null}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7224882, "supported_languages": null}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7228785, "supported_languages": null}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7261033, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.726593, "supported_languages": null}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7272468, "supported_languages": null}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7282324, "supported_languages": null}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7291958, "supported_languages": null}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.730267, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.731893, "supported_languages": null}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7331722, "supported_languages": null}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.733557, "supported_languages": null}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7339575, "supported_languages": null}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7343411, "supported_languages": null}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.73548, "supported_languages": null}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7358828, "supported_languages": null}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7362616, "supported_languages": null}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7372773, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7375813, "supported_languages": null}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7385976, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.738981, "supported_languages": null}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7391927, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7404134, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7407885, "supported_languages": null}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7411609, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7438433, "supported_languages": null}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7448857, "supported_languages": null}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.745104, "supported_languages": null}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7453566, "supported_languages": null}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7468352, "supported_languages": null}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7472975, "supported_languages": null}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7482944, "supported_languages": null}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7487423, "supported_languages": null}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7490656, "supported_languages": null}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7504983, "supported_languages": null}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7509787, "supported_languages": null}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.751535, "supported_languages": null}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7520623, "supported_languages": null}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7531152, "supported_languages": null}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7534707, "supported_languages": null}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7550843, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.755392, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7556782, "supported_languages": null}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7573802, "supported_languages": null}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7577884, "supported_languages": null}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.758251, "supported_languages": null}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.758686, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7695255, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7710457, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7719707, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7734265, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7885249, "supported_languages": ["sql"]}, "macro.dbt_external_tables.get_external_build_plan": {"unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.78975, "supported_languages": null}, "macro.dbt_external_tables.default__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7901728, "supported_languages": null}, "macro.dbt_external_tables.create_external_table": {"unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.7911932, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_table": {"unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.791577, "supported_languages": null}, "macro.dbt_external_tables.stage_external_sources": {"unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8039248, "supported_languages": null}, "macro.dbt_external_tables.refresh_external_table": {"unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8050675, "supported_languages": null}, "macro.dbt_external_tables.default__refresh_external_table": {"unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8054712, "supported_languages": null}, "macro.dbt_external_tables.dropif": {"unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.806505, "supported_languages": null}, "macro.dbt_external_tables.default__dropif": {"unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.806872, "supported_languages": null}, "macro.dbt_external_tables.exit_transaction": {"unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8078566, "supported_languages": null}, "macro.dbt_external_tables.default__exit_transaction": {"unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8082004, "supported_languages": null}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8108993, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_table": {"unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.817856, "supported_languages": null}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8223798, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.829071, "supported_languages": null}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8321648, "supported_languages": null}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8344858, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8368156, "supported_languages": null}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.841296, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_empty_table": {"unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8432136, "supported_languages": null}, "macro.dbt_external_tables.is_csv": {"unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.850416, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8532774, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__create_external_table": {"unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.85793, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__dropif": {"unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8594115, "supported_languages": null}, "macro.dbt_external_tables.spark__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = spark__recover_partitions(source_node) %}\n    {% if recover_partitions|length > 0 %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.spark__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.862931, "supported_languages": null}, "macro.dbt_external_tables.spark__create_external_table": {"unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8687747, "supported_languages": null}, "macro.dbt_external_tables.spark__refresh_external_table": {"unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8700926, "supported_languages": null}, "macro.dbt_external_tables.spark__dropif": {"unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.87129, "supported_languages": null}, "macro.dbt_external_tables.spark__recover_partitions": {"unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {% set ddl %}\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n    {%- endif -%}\n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8729756, "supported_languages": null}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8754184, "supported_languages": null}, "macro.dbt_external_tables.redshift__create_external_table": {"unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8797073, "supported_languages": null}, "macro.dbt_external_tables.redshift__refresh_external_table": {"unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8904815, "supported_languages": null}, "macro.dbt_external_tables.redshift__dropif": {"unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.891738, "supported_languages": null}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8964665, "supported_languages": null}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.8994937, "supported_languages": null}, "macro.dbt_external_tables.render_from_context": {"unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.902768, "supported_languages": null}, "macro.dbt_external_tables.redshift__exit_transaction": {"unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.9035716, "supported_languages": null}, "macro.dbt_external_tables.year_month_day": {"unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.9048088, "supported_languages": null}, "macro.dbt_external_tables.key_value": {"unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.9053996, "supported_languages": null}, "macro.dbt_external_tables.value_only": {"unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676639818.9059212, "supported_languages": null}}, "docs": {"harmony.sk": {"unique_id": "harmony.sk", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "descriptions/sk.md", "original_file_path": "models/descriptions/sk.md", "name": "sk", "block_contents": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.7.15/x64/lib/python3.7/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"test.harmony.not_null_silver__blocks_block_hash.35a688e647": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_hash", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__blocks_block_hash"], "unique_id": "test.harmony.not_null_silver__blocks_block_hash.35a688e647", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__blocks_block_hash.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_block_hash", "alias": "blocks_block_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1676639820.8851602, "config_call_dict": {"enabled": false}, "column_name": "block_hash", "file_key_name": "models.silver__blocks"}], "test.harmony.not_null_silver__blocks_block_parent_hash.975ccc61ee": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_parent_hash", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__blocks_block_parent_hash"], "unique_id": "test.harmony.not_null_silver__blocks_block_parent_hash.975ccc61ee", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__blocks_block_parent_hash.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_block_parent_hash", "alias": "blocks_block_parent_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1676639820.8873873, "config_call_dict": {"enabled": false}, "column_name": "block_parent_hash", "file_key_name": "models.silver__blocks"}], "test.harmony.not_null_silver__blocks_gas_limit.c4a416ff69": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_limit", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__blocks_gas_limit"], "unique_id": "test.harmony.not_null_silver__blocks_gas_limit.c4a416ff69", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__blocks_gas_limit.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_gas_limit", "alias": "blocks_gas_limit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1676639820.8956752, "config_call_dict": {"enabled": false}, "column_name": "gas_limit", "file_key_name": "models.silver__blocks"}], "test.harmony.not_null_silver__blocks_gas_used.f6c03cacf6": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_used", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__blocks_gas_used"], "unique_id": "test.harmony.not_null_silver__blocks_gas_used.f6c03cacf6", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__blocks_gas_used.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_gas_used", "alias": "blocks_gas_used", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1676639820.8976803, "config_call_dict": {"enabled": false}, "column_name": "gas_used", "file_key_name": "models.silver__blocks"}], "test.harmony.not_null_silver__blocks_tx_count.94a4655c16": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__blocks_tx_count"], "unique_id": "test.harmony.not_null_silver__blocks_tx_count.94a4655c16", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__blocks_tx_count.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_tx_count", "alias": "blocks_tx_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1676639820.918074, "config_call_dict": {"enabled": false}, "column_name": "tx_count", "file_key_name": "models.silver__blocks"}], "test.harmony.not_null_silver__blocks_state_root.dbcc0f6aa9": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "state_root", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__blocks_state_root"], "unique_id": "test.harmony.not_null_silver__blocks_state_root.dbcc0f6aa9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__blocks_state_root.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_state_root", "alias": "blocks_state_root", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1676639820.9200165, "config_call_dict": {"enabled": false}, "column_name": "state_root", "file_key_name": "models.silver__blocks"}], "test.harmony.not_null_silver__blocks_receipts_root.bb8316ae6d": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "receipts_root", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "not_null_silver", "fqn": ["harmony", "silver", "not_null_silver__blocks_receipts_root"], "unique_id": "test.harmony.not_null_silver__blocks_receipts_root.bb8316ae6d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "language": "sql", "package_name": "harmony", "root_path": "/home/runner/work/harmony_dbt/harmony_dbt", "path": "not_null_silver__blocks_receipts_root.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_receipts_root", "alias": "blocks_receipts_root", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1676639820.921957, "config_call_dict": {"enabled": false}, "column_name": "receipts_root", "file_key_name": "models.silver__blocks"}]}, "parent_map": {"model.harmony.sushi__ez_sushi_swaps": ["model.harmony.silver__swaps", "model.harmony.silver__tokens", "model.harmony.silver__tokens", "source.harmony.ethereum_db_sushi.FACT_HOURLY_TOKEN_PRICES", "source.harmony.symbols_cross_tab.MARKET_ASSET_METADATA"], "model.harmony.silver__tokenprices": ["model.harmony.silver__tokenprice_from_swaps"], "model.harmony.silver__logs": ["model.harmony.bronze__transactions"], "model.harmony.silver__tokens": ["seed.harmony.silver__backfill_tokens_data", "seed.harmony.silver__dfk_tokens", "seed.harmony.silver__harmony_explorer_tokens"], "model.harmony.silver__swaps": ["model.harmony.silver__liquidity_pools", "model.harmony.silver__logs", "model.harmony.silver__tokens", "model.harmony.silver__tokens"], "model.harmony.silver__tokenprice_from_swaps": ["model.harmony.silver__swaps", "model.harmony.silver__tokens", "model.harmony.silver__tokens", "seed.harmony.silver__harmony_stable_tokens"], "model.harmony.silver__transfers": ["model.harmony.silver__logs"], "model.harmony.silver__transactions": ["model.harmony.bronze__transactions"], "model.harmony.silver__blocks": ["model.harmony.bronze__blocks"], "model.harmony.silver__liquidity_pools": ["model.harmony.silver__logs", "model.harmony.silver__tokens", "model.harmony.silver__tokens", "seed.harmony.silver__backfill_pools_data"], "model.harmony.core__dim_blocks": ["model.harmony.silver__blocks"], "model.harmony.core__dim_liquidity_pools": ["model.harmony.silver__liquidity_pools"], "model.harmony.core__fact_transfers": ["model.harmony.silver__transfers"], "model.harmony.core__fact_swaps": ["model.harmony.silver__swaps"], "model.harmony.core__fact_transactions": ["model.harmony.silver__transactions"], "model.harmony.core__fact_tokenprices": ["model.harmony.silver__tokenprices"], "model.harmony.core__fact_event_logs": ["model.harmony.silver__logs"], "model.harmony.core__dim_tokens": ["model.harmony.silver__tokens"], "model.harmony.bronze__blocks": ["source.harmony.chainwalkers.harmony_blocks"], "model.harmony.bronze__transactions": ["source.harmony.chainwalkers.harmony_txs"], "seed.harmony.silver__backfill_pools_data": [], "seed.harmony.silver__harmony_stable_tokens": [], "seed.harmony.silver__backfill_tokens_data": [], "seed.harmony.silver__harmony_explorer_tokens": [], "seed.harmony.silver__dfk_tokens": [], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.harmony.not_null_sushi__ez_sushi_swaps_BLOCK_NUMBER.49aaf3ca6a": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_NUMBER__NUMBER__FLOAT.b806644c8e": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.not_null_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP.b5ddce3a4c": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__day__1.82c9acb683": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2ef3ef9355": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.not_null_sushi__ez_sushi_swaps_TX_HASH.bb62e48d4e": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_HASH__0_xX_0_9a_fA_F_.5a402045dc": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.not_null_sushi__ez_sushi_swaps_POOL_ADDRESS.4b6799907f": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.bd262348ce": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.not_null_sushi__ez_sushi_swaps_AMOUNT_IN.e94b624204": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN__NUMBER__FLOAT.8c21fa4f5a": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.not_null_sushi__ez_sushi_swaps_AMOUNT_OUT.a7df9dc6fc": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT__NUMBER__FLOAT.6b7f01837a": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.d86443d5f9": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.6b03ebe0d3": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.not_null_sushi__ez_sushi_swaps_TOKEN_IN.b89e733da7": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.9c3856914a": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.not_null_sushi__ez_sushi_swaps_TOKEN_OUT.564efc5972": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.31674c7bd2": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_IN__STRING__VARCHAR.e48cedcabd": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_OUT__STRING__VARCHAR.150a3c5ff1": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.not_null_sushi__ez_sushi_swaps_SENDER.fcc63b82a8": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_SENDER__0_xX_0_9a_fA_F_.fb158a3920": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.not_null_sushi__ez_sushi_swaps_TX_TO.ee09d3adcf": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_TO__0_xX_0_9a_fA_F_.efcfd3e73d": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_PLATFORM__STRING__VARCHAR.ada792b8af": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.not_null_sushi__ez_sushi_swaps_LOG_ID.f743ccabf8": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.not_null_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS.a2fe4d105f": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.632b69e5f5": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.9068afc1bd": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.dbt_utils_unique_combination_of_columns_sushi__ez_sushi_swaps_LOG_ID.5d0b1819b0": ["model.harmony.sushi__ez_sushi_swaps"], "test.harmony.unique_silver__tokens_token_address.84d981b6ce": ["model.harmony.silver__tokens"], "test.harmony.not_null_silver__tokens_token_address.cdb9d76349": ["model.harmony.silver__tokens"], "test.harmony.not_null_silver__tokens_token_symbol.fa00cdf7a3": ["model.harmony.silver__tokens"], "test.harmony.not_null_silver__tokens_decimals.51d3587826": ["model.harmony.silver__tokens"], "test.harmony.not_null_silver__tokenprice_from_swaps_block_date.dc0ad7005d": ["model.harmony.silver__tokenprice_from_swaps"], "test.harmony.not_null_silver__tokenprice_from_swaps_token_address.aa7359019b": ["model.harmony.silver__tokenprice_from_swaps"], "test.harmony.not_null_silver__tokenprice_from_swaps_token_symbol.908ae9c22c": ["model.harmony.silver__tokenprice_from_swaps"], "test.harmony.not_null_silver__tokenprice_from_swaps_usd_price.f0b57a6fa3": ["model.harmony.silver__tokenprice_from_swaps"], "test.harmony.not_null_silver__tokenprice_from_swaps_usd_volume.57ba30eec5": ["model.harmony.silver__tokenprice_from_swaps"], "test.harmony.not_null_silver__tokenprice_from_swaps_token_volume.12b6440929": ["model.harmony.silver__tokenprice_from_swaps"], "test.harmony.not_null_silver__tokenprice_from_swaps_volume_for_price.59917fdae7": ["model.harmony.silver__tokenprice_from_swaps"], "test.harmony.not_null_silver__tokenprice_from_swaps_key.441c86c2d6": ["model.harmony.silver__tokenprice_from_swaps"], "test.harmony.unique_silver__tokenprice_from_swaps_key.5d8eb9c8b5": ["model.harmony.silver__tokenprice_from_swaps"], "test.harmony.not_null_silver__tokenprice_from_swaps_lookup_round.a59b096081": ["model.harmony.silver__tokenprice_from_swaps"], "test.harmony.not_null_silver__swaps_block_timestamp.6419130b6a": ["model.harmony.silver__swaps"], "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_block_timestamp__day__1.067ceccffb": ["model.harmony.silver__swaps"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__swaps_block_timestamp__TIMESTAMP_NTZ.670b2383a8": ["model.harmony.silver__swaps"], "test.harmony.not_null_silver__swaps_log_id.bc6d550699": ["model.harmony.silver__swaps"], "test.harmony.unique_silver__swaps_log_id.38d2ba9755": ["model.harmony.silver__swaps"], "test.harmony.not_null_silver__swaps_tx_hash.dbda80b98f": ["model.harmony.silver__swaps"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_tx_hash__0_xX_0_9a_fA_F_.b5a6ecac1f": ["model.harmony.silver__swaps"], "test.harmony.not_null_silver__swaps_pool_address.a0f27eb1f4": ["model.harmony.silver__swaps"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token0_address__0_xX_0_9a_fA_F_.0a8c00aa03": ["model.harmony.silver__swaps"], "test.harmony.not_null_silver__swaps_amount0Out.cda2e57c17": ["model.harmony.silver__swaps"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token1_address__0_xX_0_9a_fA_F_.e54af594c1": ["model.harmony.silver__swaps"], "test.harmony.not_null_silver__swaps_amount1In.e0bc8964a5": ["model.harmony.silver__swaps"], "test.harmony.not_null_silver__swaps_amount1Out.42932415b4": ["model.harmony.silver__swaps"], "test.harmony.not_null_silver__swaps_from_address.c1fcaa4685": ["model.harmony.silver__swaps"], "test.harmony.not_null_silver__swaps_to_address.7917716776": ["model.harmony.silver__swaps"], "test.harmony.not_null_silver__swaps__inserted_timestamp.8c6bc00b4f": ["model.harmony.silver__swaps"], "test.harmony.dbt_utils_unique_combination_of_columns_silver__swaps_LOG_ID.b46ef73616": ["model.harmony.silver__swaps"], "test.harmony.unique_silver__liquidity_pools_pool_address.d1c5d9e379": ["model.harmony.silver__liquidity_pools"], "test.harmony.not_null_silver__liquidity_pools_pool_address.fc5bad21fb": ["model.harmony.silver__liquidity_pools"], "test.harmony.not_null_silver__liquidity_pools_pool_name.eac305bdc9": ["model.harmony.silver__liquidity_pools"], "test.harmony.not_null_silver__liquidity_pools_token0.b5814b0316": ["model.harmony.silver__liquidity_pools"], "test.harmony.not_null_silver__liquidity_pools_token1.a1beb20c06": ["model.harmony.silver__liquidity_pools"], "test.harmony.dbt_utils_unique_combination_of_columns_silver__liquidity_pools_POOL_ADDRESS.87ef1a5a30": ["model.harmony.silver__liquidity_pools"], "test.harmony.unique_silver__logs_log_id.b0534634c1": ["model.harmony.silver__logs"], "test.harmony.not_null_silver__logs_log_id.40e84ec907": ["model.harmony.silver__logs"], "test.harmony.not_null_silver__logs_block_id.32225c90cc": ["model.harmony.silver__logs"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_id__NUMBER.65f9dc93a1": ["model.harmony.silver__logs"], "test.harmony.not_null_silver__logs_block_timestamp.85ba4d96cb": ["model.harmony.silver__logs"], "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_block_timestamp__day__1.060ac3b8fb": ["model.harmony.silver__logs"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_timestamp__TIMESTAMP_NTZ.751f70d483": ["model.harmony.silver__logs"], "test.harmony.not_null_silver__logs_tx_hash.b38748e3fd": ["model.harmony.silver__logs"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__logs_tx_hash__0_xX_0_9a_fA_F_.92cdfa00ed": ["model.harmony.silver__logs"], "test.harmony.not_null_silver__logs_event_index.a3feb87adf": ["model.harmony.silver__logs"], "test.harmony.not_null_silver__logs_evm_contract_address.067f1be309": ["model.harmony.silver__logs"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__logs_evm_contract_address__0_xX_0_9a_fA_F_.976fb77467": ["model.harmony.silver__logs"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_name__STRING__VARCHAR.9b6b8b63c2": ["model.harmony.silver__logs"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_inputs__OBJECT__VARIANT.2b089c53c7": ["model.harmony.silver__logs"], "test.harmony.not_null_silver__logs_topics.fa8920332a": ["model.harmony.silver__logs"], "test.harmony.not_null_silver__logs_data.a1bd813a43": ["model.harmony.silver__logs"], "test.harmony.not_null_silver__logs_event_removed.423eaaec26": ["model.harmony.silver__logs"], "test.harmony.dbt_utils_unique_combination_of_columns_silver__logs_LOG_ID.56ad8797d0": ["model.harmony.silver__logs"], "test.harmony.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_ID__TX_HASH.a2e6e00fbb": ["model.harmony.silver__logs"], "test.harmony.unique_silver__blocks_block_id.f7be7f6b71": ["model.harmony.silver__blocks"], "test.harmony.not_null_silver__blocks_block_id.267efd80e1": ["model.harmony.silver__blocks"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_id__NUMBER__FLOAT.400333bd32": ["model.harmony.silver__blocks"], "test.harmony.not_null_silver__blocks_block_timestamp.0920efa41b": ["model.harmony.silver__blocks"], "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1.21cac2f295": ["model.harmony.silver__blocks"], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ.a690d9e325": ["model.harmony.silver__blocks"], "test.harmony.unique_silver__blocks_block_hash.cdd5b93cb8": ["model.harmony.silver__blocks"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_block_parent_hash__0_xX_0_9a_fA_F_.a60111cce9": ["model.harmony.silver__blocks"], "test.harmony.not_null_silver__blocks_miner.6dbe19a617": ["model.harmony.silver__blocks"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_miner__0_xX_0_9a_fA_F_.30387dc41b": ["model.harmony.silver__blocks"], "test.harmony.not_null_silver__blocks_nonce.94b002faf1": ["model.harmony.silver__blocks"], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_nonce__0_xX_0_9a_fA_F_.78e67d4fa7": ["model.harmony.silver__blocks"], "test.harmony.not_null_silver__blocks_size.0832a5c552": ["model.harmony.silver__blocks"], "test.harmony.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65": ["model.harmony.silver__blocks"], "test.harmony.sequence_gaps_silver__blocks_block_id.c10db99188": ["model.harmony.silver__blocks"], "test.harmony.not_null_silver__transactions_block_timestamp.1554985986": ["model.harmony.silver__transactions"], "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1.bdc2ddbf00": ["model.harmony.silver__transactions"], "test.harmony.not_null_silver__transactions_nonce.e553344380": ["model.harmony.silver__transactions"], "test.harmony.not_null_silver__transactions_from_address.cb53fcb412": ["model.harmony.silver__transactions"], "test.harmony.not_null_silver__transactions_value.252eabb536": ["model.harmony.silver__transactions"], "test.harmony.not_null_silver__transactions_gas_price.4a6a7bc99f": ["model.harmony.silver__transactions"], "test.harmony.not_null_silver__transactions_gas.67ccee0621": ["model.harmony.silver__transactions"], "test.harmony.not_null_silver__transactions_tx_hash.d542339dda": ["model.harmony.silver__transactions"], "test.harmony.unique_silver__transactions_tx_hash.bee83d976b": ["model.harmony.silver__transactions"], "test.harmony.not_null_silver__transactions_data.90d1ffd10b": ["model.harmony.silver__transactions"], "test.harmony.not_null_silver__transactions_status.6c30495740": ["model.harmony.silver__transactions"], "test.harmony.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7": ["model.harmony.silver__transactions"], "test.harmony.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6": ["model.harmony.silver__transactions"], "test.harmony.not_null_silver__tokenprices_key.824f14495e": ["model.harmony.silver__tokenprices"], "test.harmony.unique_silver__tokenprices_key.7d4cf4f773": ["model.harmony.silver__tokenprices"], "test.harmony.not_null_silver__tokenprices_block_date.a9d2fe4662": ["model.harmony.silver__tokenprices"], "test.harmony.not_null_silver__tokenprices_token_address.b5d226ae48": ["model.harmony.silver__tokenprices"], "test.harmony.not_null_silver__tokenprices_token_symbol.5948abf1ec": ["model.harmony.silver__tokenprices"], "test.harmony.not_null_silver__tokenprices_usd_price.234f43f6f8": ["model.harmony.silver__tokenprices"], "test.harmony.not_null_silver__tokenprices_usd_volume.bea0063552": ["model.harmony.silver__tokenprices"], "test.harmony.not_null_silver__tokenprices_token_volume.87dce12af5": ["model.harmony.silver__tokenprices"], "test.harmony.unique_silver__transfers_log_id.a9169cebd7": ["model.harmony.silver__transfers"], "test.harmony.not_null_silver__transfers_log_id.b85b524f16": ["model.harmony.silver__transfers"], "test.harmony.not_null_silver__transfers_block_id.77f03bb32e": ["model.harmony.silver__transfers"], "test.harmony.not_null_silver__transfers_tx_hash.b0da0c6141": ["model.harmony.silver__transfers"], "test.harmony.not_null_silver__transfers_block_timestamp.0793efcca3": ["model.harmony.silver__transfers"], "test.harmony.not_null_silver__transfers_contract_address.bb507b1064": ["model.harmony.silver__transfers"], "test.harmony.not_null_silver__transfers_from_address.d07403aa89": ["model.harmony.silver__transfers"], "test.harmony.not_null_silver__transfers_to_address.56c037ad67": ["model.harmony.silver__transfers"], "test.harmony.not_null_silver__transfers_raw_amount.82c0c17a7d": ["model.harmony.silver__transfers"], "test.harmony.dbt_expectations_expect_column_to_exist_core__dim_tokens_DIM_TOKENS_ID.ca6fe4de67": ["model.harmony.core__dim_tokens"], "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_tokenprices_FACT_TOKENPRICES_ID.83419f6bfe": ["model.harmony.core__fact_tokenprices"], "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID.87b06ee713": ["model.harmony.core__fact_swaps"], "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_event_logs_FACT_EVENT_LOGS_ID.c4518f5cd7": ["model.harmony.core__fact_event_logs"], "test.harmony.dbt_expectations_expect_column_to_exist_core__dim_liquidity_pools_DIM_LIQUIDITY_POOL_ID.cfe59b4ac8": ["model.harmony.core__dim_liquidity_pools"], "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be": ["model.harmony.core__fact_transfers"], "test.harmony.dbt_expectations_expect_column_to_exist_core__dim_blocks_DIM_BLOCK_ID.cc097dc5dc": ["model.harmony.core__dim_blocks"], "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_transactions_FACT_TRANSACTIONS_ID.3cfaac32a9": ["model.harmony.core__fact_transactions"], "test.harmony.not_null_bonze__blocks_record_id.566699a3d9": [], "test.harmony.not_null_bonze__blocks_offset_id.e635caef80": [], "test.harmony.not_null_bonze__blocks_block_id.1b3cae964c": [], "test.harmony.not_null_bonze__blocks_block_timestamp.364a824d90": [], "test.harmony.not_null_bonze__blocks_network.e181e89265": [], "test.harmony.not_null_bonze__blocks_chain_id.5583086f04": [], "test.harmony.not_null_bonze__blocks_tx_count.54c67748a9": [], "test.harmony.not_null_bonze__blocks_header.eed11d8297": [], "test.harmony.not_null_bonze__blocks__inserted_timestamp.baac8432d2": [], "test.harmony.not_null_bronze__transactions_record_id.230dc348e9": ["model.harmony.bronze__transactions"], "test.harmony.not_null_bronze__transactions_tx_id.c31ab25698": ["model.harmony.bronze__transactions"], "test.harmony.tx_gaps_bronze__transactions_BLOCK_ID__tx_id__tx_count.960db882f2": ["model.harmony.bronze__transactions"], "test.harmony.not_null_bronze__transactions_tx_block_index.dfb7580b37": ["model.harmony.bronze__transactions"], "test.harmony.not_null_bronze__transactions_offset_id.e9af2daa68": ["model.harmony.bronze__transactions"], "test.harmony.not_null_bronze__transactions_block_id.3f0d16bdd0": ["model.harmony.bronze__transactions"], "test.harmony.not_null_bronze__transactions_block_timestamp.d0362c6400": ["model.harmony.bronze__transactions"], "test.harmony.not_null_bronze__transactions_network.afe59385b9": ["model.harmony.bronze__transactions"], "test.harmony.not_null_bronze__transactions_chain_id.2a790fb1e9": ["model.harmony.bronze__transactions"], "test.harmony.not_null_bronze__transactions__inserted_timestamp.73ca005859": ["model.harmony.bronze__transactions"], "source.harmony.chainwalkers.harmony_blocks": [], "source.harmony.chainwalkers.harmony_txs": [], "source.harmony.ethereum_db_sushi.FACT_HOURLY_TOKEN_PRICES": [], "source.harmony.symbols_cross_tab.MARKET_ASSET_METADATA": []}, "child_map": {"model.harmony.sushi__ez_sushi_swaps": ["test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.d86443d5f9", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN__NUMBER__FLOAT.8c21fa4f5a", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.6b03ebe0d3", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT__NUMBER__FLOAT.6b7f01837a", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_NUMBER__NUMBER__FLOAT.b806644c8e", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2ef3ef9355", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_PLATFORM__STRING__VARCHAR.ada792b8af", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_IN__STRING__VARCHAR.e48cedcabd", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_OUT__STRING__VARCHAR.150a3c5ff1", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.632b69e5f5", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.9068afc1bd", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.bd262348ce", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_SENDER__0_xX_0_9a_fA_F_.fb158a3920", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.9c3856914a", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.31674c7bd2", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_HASH__0_xX_0_9a_fA_F_.5a402045dc", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_TO__0_xX_0_9a_fA_F_.efcfd3e73d", "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__day__1.82c9acb683", "test.harmony.dbt_utils_unique_combination_of_columns_sushi__ez_sushi_swaps_LOG_ID.5d0b1819b0", "test.harmony.not_null_sushi__ez_sushi_swaps_AMOUNT_IN.e94b624204", "test.harmony.not_null_sushi__ez_sushi_swaps_AMOUNT_OUT.a7df9dc6fc", "test.harmony.not_null_sushi__ez_sushi_swaps_BLOCK_NUMBER.49aaf3ca6a", "test.harmony.not_null_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP.b5ddce3a4c", "test.harmony.not_null_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS.a2fe4d105f", "test.harmony.not_null_sushi__ez_sushi_swaps_LOG_ID.f743ccabf8", "test.harmony.not_null_sushi__ez_sushi_swaps_POOL_ADDRESS.4b6799907f", "test.harmony.not_null_sushi__ez_sushi_swaps_SENDER.fcc63b82a8", "test.harmony.not_null_sushi__ez_sushi_swaps_TOKEN_IN.b89e733da7", "test.harmony.not_null_sushi__ez_sushi_swaps_TOKEN_OUT.564efc5972", "test.harmony.not_null_sushi__ez_sushi_swaps_TX_HASH.bb62e48d4e", "test.harmony.not_null_sushi__ez_sushi_swaps_TX_TO.ee09d3adcf"], "model.harmony.silver__tokenprices": ["model.harmony.core__fact_tokenprices", "test.harmony.not_null_silver__tokenprices_block_date.a9d2fe4662", "test.harmony.not_null_silver__tokenprices_key.824f14495e", "test.harmony.not_null_silver__tokenprices_token_address.b5d226ae48", "test.harmony.not_null_silver__tokenprices_token_symbol.5948abf1ec", "test.harmony.not_null_silver__tokenprices_token_volume.87dce12af5", "test.harmony.not_null_silver__tokenprices_usd_price.234f43f6f8", "test.harmony.not_null_silver__tokenprices_usd_volume.bea0063552", "test.harmony.unique_silver__tokenprices_key.7d4cf4f773"], "model.harmony.silver__logs": ["model.harmony.core__fact_event_logs", "model.harmony.silver__liquidity_pools", "model.harmony.silver__swaps", "model.harmony.silver__transfers", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_id__NUMBER.65f9dc93a1", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_timestamp__TIMESTAMP_NTZ.751f70d483", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_inputs__OBJECT__VARIANT.2b089c53c7", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_name__STRING__VARCHAR.9b6b8b63c2", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__logs_evm_contract_address__0_xX_0_9a_fA_F_.976fb77467", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__logs_tx_hash__0_xX_0_9a_fA_F_.92cdfa00ed", "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_block_timestamp__day__1.060ac3b8fb", "test.harmony.dbt_utils_unique_combination_of_columns_silver__logs_LOG_ID.56ad8797d0", "test.harmony.not_null_silver__logs_block_id.32225c90cc", "test.harmony.not_null_silver__logs_block_timestamp.85ba4d96cb", "test.harmony.not_null_silver__logs_data.a1bd813a43", "test.harmony.not_null_silver__logs_event_index.a3feb87adf", "test.harmony.not_null_silver__logs_event_removed.423eaaec26", "test.harmony.not_null_silver__logs_evm_contract_address.067f1be309", "test.harmony.not_null_silver__logs_log_id.40e84ec907", "test.harmony.not_null_silver__logs_topics.fa8920332a", "test.harmony.not_null_silver__logs_tx_hash.b38748e3fd", "test.harmony.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_ID__TX_HASH.a2e6e00fbb", "test.harmony.unique_silver__logs_log_id.b0534634c1"], "model.harmony.silver__tokens": ["model.harmony.core__dim_tokens", "model.harmony.silver__liquidity_pools", "model.harmony.silver__liquidity_pools", "model.harmony.silver__swaps", "model.harmony.silver__swaps", "model.harmony.silver__tokenprice_from_swaps", "model.harmony.silver__tokenprice_from_swaps", "model.harmony.sushi__ez_sushi_swaps", "model.harmony.sushi__ez_sushi_swaps", "test.harmony.not_null_silver__tokens_decimals.51d3587826", "test.harmony.not_null_silver__tokens_token_address.cdb9d76349", "test.harmony.not_null_silver__tokens_token_symbol.fa00cdf7a3", "test.harmony.unique_silver__tokens_token_address.84d981b6ce"], "model.harmony.silver__swaps": ["model.harmony.core__fact_swaps", "model.harmony.silver__tokenprice_from_swaps", "model.harmony.sushi__ez_sushi_swaps", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__swaps_block_timestamp__TIMESTAMP_NTZ.670b2383a8", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token0_address__0_xX_0_9a_fA_F_.0a8c00aa03", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token1_address__0_xX_0_9a_fA_F_.e54af594c1", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_tx_hash__0_xX_0_9a_fA_F_.b5a6ecac1f", "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_block_timestamp__day__1.067ceccffb", "test.harmony.dbt_utils_unique_combination_of_columns_silver__swaps_LOG_ID.b46ef73616", "test.harmony.not_null_silver__swaps__inserted_timestamp.8c6bc00b4f", "test.harmony.not_null_silver__swaps_amount0Out.cda2e57c17", "test.harmony.not_null_silver__swaps_amount1In.e0bc8964a5", "test.harmony.not_null_silver__swaps_amount1Out.42932415b4", "test.harmony.not_null_silver__swaps_block_timestamp.6419130b6a", "test.harmony.not_null_silver__swaps_from_address.c1fcaa4685", "test.harmony.not_null_silver__swaps_log_id.bc6d550699", "test.harmony.not_null_silver__swaps_pool_address.a0f27eb1f4", "test.harmony.not_null_silver__swaps_to_address.7917716776", "test.harmony.not_null_silver__swaps_tx_hash.dbda80b98f", "test.harmony.unique_silver__swaps_log_id.38d2ba9755"], "model.harmony.silver__tokenprice_from_swaps": ["model.harmony.silver__tokenprices", "test.harmony.not_null_silver__tokenprice_from_swaps_block_date.dc0ad7005d", "test.harmony.not_null_silver__tokenprice_from_swaps_key.441c86c2d6", "test.harmony.not_null_silver__tokenprice_from_swaps_lookup_round.a59b096081", "test.harmony.not_null_silver__tokenprice_from_swaps_token_address.aa7359019b", "test.harmony.not_null_silver__tokenprice_from_swaps_token_symbol.908ae9c22c", "test.harmony.not_null_silver__tokenprice_from_swaps_token_volume.12b6440929", "test.harmony.not_null_silver__tokenprice_from_swaps_usd_price.f0b57a6fa3", "test.harmony.not_null_silver__tokenprice_from_swaps_usd_volume.57ba30eec5", "test.harmony.not_null_silver__tokenprice_from_swaps_volume_for_price.59917fdae7", "test.harmony.unique_silver__tokenprice_from_swaps_key.5d8eb9c8b5"], "model.harmony.silver__transfers": ["model.harmony.core__fact_transfers", "test.harmony.not_null_silver__transfers_block_id.77f03bb32e", "test.harmony.not_null_silver__transfers_block_timestamp.0793efcca3", "test.harmony.not_null_silver__transfers_contract_address.bb507b1064", "test.harmony.not_null_silver__transfers_from_address.d07403aa89", "test.harmony.not_null_silver__transfers_log_id.b85b524f16", "test.harmony.not_null_silver__transfers_raw_amount.82c0c17a7d", "test.harmony.not_null_silver__transfers_to_address.56c037ad67", "test.harmony.not_null_silver__transfers_tx_hash.b0da0c6141", "test.harmony.unique_silver__transfers_log_id.a9169cebd7"], "model.harmony.silver__transactions": ["model.harmony.core__fact_transactions", "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1.bdc2ddbf00", "test.harmony.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6", "test.harmony.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7", "test.harmony.not_null_silver__transactions_block_timestamp.1554985986", "test.harmony.not_null_silver__transactions_data.90d1ffd10b", "test.harmony.not_null_silver__transactions_from_address.cb53fcb412", "test.harmony.not_null_silver__transactions_gas.67ccee0621", "test.harmony.not_null_silver__transactions_gas_price.4a6a7bc99f", "test.harmony.not_null_silver__transactions_nonce.e553344380", "test.harmony.not_null_silver__transactions_status.6c30495740", "test.harmony.not_null_silver__transactions_tx_hash.d542339dda", "test.harmony.not_null_silver__transactions_value.252eabb536", "test.harmony.unique_silver__transactions_tx_hash.bee83d976b"], "model.harmony.silver__blocks": ["model.harmony.core__dim_blocks", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_id__NUMBER__FLOAT.400333bd32", "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ.a690d9e325", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_block_parent_hash__0_xX_0_9a_fA_F_.a60111cce9", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_miner__0_xX_0_9a_fA_F_.30387dc41b", "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_nonce__0_xX_0_9a_fA_F_.78e67d4fa7", "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1.21cac2f295", "test.harmony.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65", "test.harmony.not_null_silver__blocks_block_id.267efd80e1", "test.harmony.not_null_silver__blocks_block_timestamp.0920efa41b", "test.harmony.not_null_silver__blocks_miner.6dbe19a617", "test.harmony.not_null_silver__blocks_nonce.94b002faf1", "test.harmony.not_null_silver__blocks_size.0832a5c552", "test.harmony.sequence_gaps_silver__blocks_block_id.c10db99188", "test.harmony.unique_silver__blocks_block_hash.cdd5b93cb8", "test.harmony.unique_silver__blocks_block_id.f7be7f6b71"], "model.harmony.silver__liquidity_pools": ["model.harmony.core__dim_liquidity_pools", "model.harmony.silver__swaps", "test.harmony.dbt_utils_unique_combination_of_columns_silver__liquidity_pools_POOL_ADDRESS.87ef1a5a30", "test.harmony.not_null_silver__liquidity_pools_pool_address.fc5bad21fb", "test.harmony.not_null_silver__liquidity_pools_pool_name.eac305bdc9", "test.harmony.not_null_silver__liquidity_pools_token0.b5814b0316", "test.harmony.not_null_silver__liquidity_pools_token1.a1beb20c06", "test.harmony.unique_silver__liquidity_pools_pool_address.d1c5d9e379"], "model.harmony.core__dim_blocks": ["test.harmony.dbt_expectations_expect_column_to_exist_core__dim_blocks_DIM_BLOCK_ID.cc097dc5dc"], "model.harmony.core__dim_liquidity_pools": ["test.harmony.dbt_expectations_expect_column_to_exist_core__dim_liquidity_pools_DIM_LIQUIDITY_POOL_ID.cfe59b4ac8"], "model.harmony.core__fact_transfers": ["test.harmony.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be"], "model.harmony.core__fact_swaps": ["test.harmony.dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID.87b06ee713"], "model.harmony.core__fact_transactions": ["test.harmony.dbt_expectations_expect_column_to_exist_core__fact_transactions_FACT_TRANSACTIONS_ID.3cfaac32a9"], "model.harmony.core__fact_tokenprices": ["test.harmony.dbt_expectations_expect_column_to_exist_core__fact_tokenprices_FACT_TOKENPRICES_ID.83419f6bfe"], "model.harmony.core__fact_event_logs": ["test.harmony.dbt_expectations_expect_column_to_exist_core__fact_event_logs_FACT_EVENT_LOGS_ID.c4518f5cd7"], "model.harmony.core__dim_tokens": ["test.harmony.dbt_expectations_expect_column_to_exist_core__dim_tokens_DIM_TOKENS_ID.ca6fe4de67"], "model.harmony.bronze__blocks": ["model.harmony.silver__blocks"], "model.harmony.bronze__transactions": ["model.harmony.silver__logs", "model.harmony.silver__transactions", "test.harmony.not_null_bronze__transactions__inserted_timestamp.73ca005859", "test.harmony.not_null_bronze__transactions_block_id.3f0d16bdd0", "test.harmony.not_null_bronze__transactions_block_timestamp.d0362c6400", "test.harmony.not_null_bronze__transactions_chain_id.2a790fb1e9", "test.harmony.not_null_bronze__transactions_network.afe59385b9", "test.harmony.not_null_bronze__transactions_offset_id.e9af2daa68", "test.harmony.not_null_bronze__transactions_record_id.230dc348e9", "test.harmony.not_null_bronze__transactions_tx_block_index.dfb7580b37", "test.harmony.not_null_bronze__transactions_tx_id.c31ab25698", "test.harmony.tx_gaps_bronze__transactions_BLOCK_ID__tx_id__tx_count.960db882f2"], "seed.harmony.silver__backfill_pools_data": ["model.harmony.silver__liquidity_pools"], "seed.harmony.silver__harmony_stable_tokens": ["model.harmony.silver__tokenprice_from_swaps"], "seed.harmony.silver__backfill_tokens_data": ["model.harmony.silver__tokens"], "seed.harmony.silver__harmony_explorer_tokens": ["model.harmony.silver__tokens"], "seed.harmony.silver__dfk_tokens": ["model.harmony.silver__tokens"], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.harmony.not_null_sushi__ez_sushi_swaps_BLOCK_NUMBER.49aaf3ca6a": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_NUMBER__NUMBER__FLOAT.b806644c8e": [], "test.harmony.not_null_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP.b5ddce3a4c": [], "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__day__1.82c9acb683": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2ef3ef9355": [], "test.harmony.not_null_sushi__ez_sushi_swaps_TX_HASH.bb62e48d4e": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_HASH__0_xX_0_9a_fA_F_.5a402045dc": [], "test.harmony.not_null_sushi__ez_sushi_swaps_POOL_ADDRESS.4b6799907f": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.bd262348ce": [], "test.harmony.not_null_sushi__ez_sushi_swaps_AMOUNT_IN.e94b624204": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN__NUMBER__FLOAT.8c21fa4f5a": [], "test.harmony.not_null_sushi__ez_sushi_swaps_AMOUNT_OUT.a7df9dc6fc": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT__NUMBER__FLOAT.6b7f01837a": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.d86443d5f9": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.6b03ebe0d3": [], "test.harmony.not_null_sushi__ez_sushi_swaps_TOKEN_IN.b89e733da7": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.9c3856914a": [], "test.harmony.not_null_sushi__ez_sushi_swaps_TOKEN_OUT.564efc5972": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.31674c7bd2": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_IN__STRING__VARCHAR.e48cedcabd": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_SYMBOL_OUT__STRING__VARCHAR.150a3c5ff1": [], "test.harmony.not_null_sushi__ez_sushi_swaps_SENDER.fcc63b82a8": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_SENDER__0_xX_0_9a_fA_F_.fb158a3920": [], "test.harmony.not_null_sushi__ez_sushi_swaps_TX_TO.ee09d3adcf": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_TX_TO__0_xX_0_9a_fA_F_.efcfd3e73d": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_sushi_swaps_PLATFORM__STRING__VARCHAR.ada792b8af": [], "test.harmony.not_null_sushi__ez_sushi_swaps_LOG_ID.f743ccabf8": [], "test.harmony.not_null_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS.a2fe4d105f": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.632b69e5f5": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_sushi_swaps_EVM_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.9068afc1bd": [], "test.harmony.dbt_utils_unique_combination_of_columns_sushi__ez_sushi_swaps_LOG_ID.5d0b1819b0": [], "test.harmony.unique_silver__tokens_token_address.84d981b6ce": [], "test.harmony.not_null_silver__tokens_token_address.cdb9d76349": [], "test.harmony.not_null_silver__tokens_token_symbol.fa00cdf7a3": [], "test.harmony.not_null_silver__tokens_decimals.51d3587826": [], "test.harmony.not_null_silver__tokenprice_from_swaps_block_date.dc0ad7005d": [], "test.harmony.not_null_silver__tokenprice_from_swaps_token_address.aa7359019b": [], "test.harmony.not_null_silver__tokenprice_from_swaps_token_symbol.908ae9c22c": [], "test.harmony.not_null_silver__tokenprice_from_swaps_usd_price.f0b57a6fa3": [], "test.harmony.not_null_silver__tokenprice_from_swaps_usd_volume.57ba30eec5": [], "test.harmony.not_null_silver__tokenprice_from_swaps_token_volume.12b6440929": [], "test.harmony.not_null_silver__tokenprice_from_swaps_volume_for_price.59917fdae7": [], "test.harmony.not_null_silver__tokenprice_from_swaps_key.441c86c2d6": [], "test.harmony.unique_silver__tokenprice_from_swaps_key.5d8eb9c8b5": [], "test.harmony.not_null_silver__tokenprice_from_swaps_lookup_round.a59b096081": [], "test.harmony.not_null_silver__swaps_block_timestamp.6419130b6a": [], "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_block_timestamp__day__1.067ceccffb": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__swaps_block_timestamp__TIMESTAMP_NTZ.670b2383a8": [], "test.harmony.not_null_silver__swaps_log_id.bc6d550699": [], "test.harmony.unique_silver__swaps_log_id.38d2ba9755": [], "test.harmony.not_null_silver__swaps_tx_hash.dbda80b98f": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_tx_hash__0_xX_0_9a_fA_F_.b5a6ecac1f": [], "test.harmony.not_null_silver__swaps_pool_address.a0f27eb1f4": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token0_address__0_xX_0_9a_fA_F_.0a8c00aa03": [], "test.harmony.not_null_silver__swaps_amount0Out.cda2e57c17": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__swaps_token1_address__0_xX_0_9a_fA_F_.e54af594c1": [], "test.harmony.not_null_silver__swaps_amount1In.e0bc8964a5": [], "test.harmony.not_null_silver__swaps_amount1Out.42932415b4": [], "test.harmony.not_null_silver__swaps_from_address.c1fcaa4685": [], "test.harmony.not_null_silver__swaps_to_address.7917716776": [], "test.harmony.not_null_silver__swaps__inserted_timestamp.8c6bc00b4f": [], "test.harmony.dbt_utils_unique_combination_of_columns_silver__swaps_LOG_ID.b46ef73616": [], "test.harmony.unique_silver__liquidity_pools_pool_address.d1c5d9e379": [], "test.harmony.not_null_silver__liquidity_pools_pool_address.fc5bad21fb": [], "test.harmony.not_null_silver__liquidity_pools_pool_name.eac305bdc9": [], "test.harmony.not_null_silver__liquidity_pools_token0.b5814b0316": [], "test.harmony.not_null_silver__liquidity_pools_token1.a1beb20c06": [], "test.harmony.dbt_utils_unique_combination_of_columns_silver__liquidity_pools_POOL_ADDRESS.87ef1a5a30": [], "test.harmony.unique_silver__logs_log_id.b0534634c1": [], "test.harmony.not_null_silver__logs_log_id.40e84ec907": [], "test.harmony.not_null_silver__logs_block_id.32225c90cc": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_id__NUMBER.65f9dc93a1": [], "test.harmony.not_null_silver__logs_block_timestamp.85ba4d96cb": [], "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_block_timestamp__day__1.060ac3b8fb": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_block_timestamp__TIMESTAMP_NTZ.751f70d483": [], "test.harmony.not_null_silver__logs_tx_hash.b38748e3fd": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__logs_tx_hash__0_xX_0_9a_fA_F_.92cdfa00ed": [], "test.harmony.not_null_silver__logs_event_index.a3feb87adf": [], "test.harmony.not_null_silver__logs_evm_contract_address.067f1be309": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__logs_evm_contract_address__0_xX_0_9a_fA_F_.976fb77467": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_name__STRING__VARCHAR.9b6b8b63c2": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_event_inputs__OBJECT__VARIANT.2b089c53c7": [], "test.harmony.not_null_silver__logs_topics.fa8920332a": [], "test.harmony.not_null_silver__logs_data.a1bd813a43": [], "test.harmony.not_null_silver__logs_event_removed.423eaaec26": [], "test.harmony.dbt_utils_unique_combination_of_columns_silver__logs_LOG_ID.56ad8797d0": [], "test.harmony.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_ID__TX_HASH.a2e6e00fbb": [], "test.harmony.unique_silver__blocks_block_id.f7be7f6b71": [], "test.harmony.not_null_silver__blocks_block_id.267efd80e1": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_id__NUMBER__FLOAT.400333bd32": [], "test.harmony.not_null_silver__blocks_block_timestamp.0920efa41b": [], "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1.21cac2f295": [], "test.harmony.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ.a690d9e325": [], "test.harmony.unique_silver__blocks_block_hash.cdd5b93cb8": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_block_parent_hash__0_xX_0_9a_fA_F_.a60111cce9": [], "test.harmony.not_null_silver__blocks_miner.6dbe19a617": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_miner__0_xX_0_9a_fA_F_.30387dc41b": [], "test.harmony.not_null_silver__blocks_nonce.94b002faf1": [], "test.harmony.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_nonce__0_xX_0_9a_fA_F_.78e67d4fa7": [], "test.harmony.not_null_silver__blocks_size.0832a5c552": [], "test.harmony.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65": [], "test.harmony.sequence_gaps_silver__blocks_block_id.c10db99188": [], "test.harmony.not_null_silver__transactions_block_timestamp.1554985986": [], "test.harmony.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1.bdc2ddbf00": [], "test.harmony.not_null_silver__transactions_nonce.e553344380": [], "test.harmony.not_null_silver__transactions_from_address.cb53fcb412": [], "test.harmony.not_null_silver__transactions_value.252eabb536": [], "test.harmony.not_null_silver__transactions_gas_price.4a6a7bc99f": [], "test.harmony.not_null_silver__transactions_gas.67ccee0621": [], "test.harmony.not_null_silver__transactions_tx_hash.d542339dda": [], "test.harmony.unique_silver__transactions_tx_hash.bee83d976b": [], "test.harmony.not_null_silver__transactions_data.90d1ffd10b": [], "test.harmony.not_null_silver__transactions_status.6c30495740": [], "test.harmony.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7": [], "test.harmony.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6": [], "test.harmony.not_null_silver__tokenprices_key.824f14495e": [], "test.harmony.unique_silver__tokenprices_key.7d4cf4f773": [], "test.harmony.not_null_silver__tokenprices_block_date.a9d2fe4662": [], "test.harmony.not_null_silver__tokenprices_token_address.b5d226ae48": [], "test.harmony.not_null_silver__tokenprices_token_symbol.5948abf1ec": [], "test.harmony.not_null_silver__tokenprices_usd_price.234f43f6f8": [], "test.harmony.not_null_silver__tokenprices_usd_volume.bea0063552": [], "test.harmony.not_null_silver__tokenprices_token_volume.87dce12af5": [], "test.harmony.unique_silver__transfers_log_id.a9169cebd7": [], "test.harmony.not_null_silver__transfers_log_id.b85b524f16": [], "test.harmony.not_null_silver__transfers_block_id.77f03bb32e": [], "test.harmony.not_null_silver__transfers_tx_hash.b0da0c6141": [], "test.harmony.not_null_silver__transfers_block_timestamp.0793efcca3": [], "test.harmony.not_null_silver__transfers_contract_address.bb507b1064": [], "test.harmony.not_null_silver__transfers_from_address.d07403aa89": [], "test.harmony.not_null_silver__transfers_to_address.56c037ad67": [], "test.harmony.not_null_silver__transfers_raw_amount.82c0c17a7d": [], "test.harmony.dbt_expectations_expect_column_to_exist_core__dim_tokens_DIM_TOKENS_ID.ca6fe4de67": [], "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_tokenprices_FACT_TOKENPRICES_ID.83419f6bfe": [], "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID.87b06ee713": [], "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_event_logs_FACT_EVENT_LOGS_ID.c4518f5cd7": [], "test.harmony.dbt_expectations_expect_column_to_exist_core__dim_liquidity_pools_DIM_LIQUIDITY_POOL_ID.cfe59b4ac8": [], "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be": [], "test.harmony.dbt_expectations_expect_column_to_exist_core__dim_blocks_DIM_BLOCK_ID.cc097dc5dc": [], "test.harmony.dbt_expectations_expect_column_to_exist_core__fact_transactions_FACT_TRANSACTIONS_ID.3cfaac32a9": [], "test.harmony.not_null_bonze__blocks_record_id.566699a3d9": [], "test.harmony.not_null_bonze__blocks_offset_id.e635caef80": [], "test.harmony.not_null_bonze__blocks_block_id.1b3cae964c": [], "test.harmony.not_null_bonze__blocks_block_timestamp.364a824d90": [], "test.harmony.not_null_bonze__blocks_network.e181e89265": [], "test.harmony.not_null_bonze__blocks_chain_id.5583086f04": [], "test.harmony.not_null_bonze__blocks_tx_count.54c67748a9": [], "test.harmony.not_null_bonze__blocks_header.eed11d8297": [], "test.harmony.not_null_bonze__blocks__inserted_timestamp.baac8432d2": [], "test.harmony.not_null_bronze__transactions_record_id.230dc348e9": [], "test.harmony.not_null_bronze__transactions_tx_id.c31ab25698": [], "test.harmony.tx_gaps_bronze__transactions_BLOCK_ID__tx_id__tx_count.960db882f2": [], "test.harmony.not_null_bronze__transactions_tx_block_index.dfb7580b37": [], "test.harmony.not_null_bronze__transactions_offset_id.e9af2daa68": [], "test.harmony.not_null_bronze__transactions_block_id.3f0d16bdd0": [], "test.harmony.not_null_bronze__transactions_block_timestamp.d0362c6400": [], "test.harmony.not_null_bronze__transactions_network.afe59385b9": [], "test.harmony.not_null_bronze__transactions_chain_id.2a790fb1e9": [], "test.harmony.not_null_bronze__transactions__inserted_timestamp.73ca005859": [], "source.harmony.chainwalkers.harmony_blocks": ["model.harmony.bronze__blocks"], "source.harmony.chainwalkers.harmony_txs": ["model.harmony.bronze__transactions"], "source.harmony.ethereum_db_sushi.FACT_HOURLY_TOKEN_PRICES": ["model.harmony.sushi__ez_sushi_swaps"], "source.harmony.symbols_cross_tab.MARKET_ASSET_METADATA": ["model.harmony.sushi__ez_sushi_swaps"]}}